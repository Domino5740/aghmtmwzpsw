
RF.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000686  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00802000  00000686  0000071a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  00802002  00802002  0000071c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000074c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  0000078c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005235  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002fe6  00000000  00000000  00005ba1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013a8  00000000  00000000  00008b87  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000051c  00000000  00000000  00009f30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002b0a  00000000  00000000  0000a44c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001771  00000000  00000000  0000cf56  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  0000e6c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
   8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__vector_2>
   c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  10:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  14:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  18:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  1c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  20:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  24:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  28:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  2c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  30:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  34:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  38:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  3c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  40:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  44:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  48:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  4c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  50:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  54:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  58:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  5c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  60:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  64:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  68:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  6c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  70:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  74:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  78:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  7c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  80:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  84:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  88:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  8c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  90:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  94:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  98:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  9c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  a0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  a4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  a8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  ac:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  b0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  b4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  b8:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <__vector_46>
  bc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  c0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  c4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  c8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  cc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  d0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  d4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  d8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  dc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  e0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  e4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  e8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  ec:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  f0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  f4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  f8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
  fc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 100:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 104:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 108:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 10c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 110:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 114:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 118:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 11c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 120:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 124:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 128:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 12c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 130:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 134:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 138:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 13c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 140:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 144:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 148:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 14c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 150:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 154:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 158:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 15c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 160:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 164:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 168:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 16c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 170:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 174:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 178:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 17c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 180:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 184:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 188:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 18c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 190:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 194:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 198:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 19c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1a0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1a4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1a8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1ac:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1b0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1b4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1b8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1bc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1c0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1c4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1c8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1cc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1d0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1d4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1d8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1dc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1e0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1e4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1e8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1ec:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1f0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1f4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
 1f8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e2       	ldi	r29, 0x2F	; 47
 206:	de bf       	out	0x3e, r29	; 62

00000208 <__do_copy_data>:
 208:	10 e2       	ldi	r17, 0x20	; 32
 20a:	a0 e0       	ldi	r26, 0x00	; 0
 20c:	b0 e2       	ldi	r27, 0x20	; 32
 20e:	e6 e8       	ldi	r30, 0x86	; 134
 210:	f6 e0       	ldi	r31, 0x06	; 6
 212:	02 c0       	rjmp	.+4      	; 0x218 <__do_copy_data+0x10>
 214:	05 90       	lpm	r0, Z+
 216:	0d 92       	st	X+, r0
 218:	a2 30       	cpi	r26, 0x02	; 2
 21a:	b1 07       	cpc	r27, r17
 21c:	d9 f7       	brne	.-10     	; 0x214 <__do_copy_data+0xc>

0000021e <__do_clear_bss>:
 21e:	20 e2       	ldi	r18, 0x20	; 32
 220:	a2 e0       	ldi	r26, 0x02	; 2
 222:	b0 e2       	ldi	r27, 0x20	; 32
 224:	01 c0       	rjmp	.+2      	; 0x228 <.do_clear_bss_start>

00000226 <.do_clear_bss_loop>:
 226:	1d 92       	st	X+, r1

00000228 <.do_clear_bss_start>:
 228:	a3 32       	cpi	r26, 0x23	; 35
 22a:	b2 07       	cpc	r27, r18
 22c:	e1 f7       	brne	.-8      	; 0x226 <.do_clear_bss_loop>
 22e:	0e 94 48 01 	call	0x290	; 0x290 <main>
 232:	0c 94 41 03 	jmp	0x682	; 0x682 <_exit>

00000236 <__bad_interrupt>:
 236:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023a <__vector_2>:
#define PORTC3__bm 1 << 3
#define PORTC2__bm 1 << 2

unsigned char cByte = '\n';

ISR(PORTC_INT0_vect) { // interrupt service routine
 23a:	1f 92       	push	r1
 23c:	0f 92       	push	r0
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	0f 92       	push	r0
 242:	11 24       	eor	r1, r1
 244:	2f 93       	push	r18
 246:	3f 93       	push	r19
 248:	4f 93       	push	r20
 24a:	5f 93       	push	r21
 24c:	6f 93       	push	r22
 24e:	7f 93       	push	r23
 250:	8f 93       	push	r24
 252:	9f 93       	push	r25
 254:	af 93       	push	r26
 256:	bf 93       	push	r27
 258:	ef 93       	push	r30
 25a:	ff 93       	push	r31
	rf_send_byte(cByte);
 25c:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 260:	0e 94 5e 02 	call	0x4bc	; 0x4bc <rf_send_byte>
	set_bit_in_reg(STATUS_, TX_DS, 1);
 264:	41 e0       	ldi	r20, 0x01	; 1
 266:	65 e0       	ldi	r22, 0x05	; 5
 268:	87 e0       	ldi	r24, 0x07	; 7
 26a:	0e 94 16 02 	call	0x42c	; 0x42c <set_bit_in_reg>
};
 26e:	ff 91       	pop	r31
 270:	ef 91       	pop	r30
 272:	bf 91       	pop	r27
 274:	af 91       	pop	r26
 276:	9f 91       	pop	r25
 278:	8f 91       	pop	r24
 27a:	7f 91       	pop	r23
 27c:	6f 91       	pop	r22
 27e:	5f 91       	pop	r21
 280:	4f 91       	pop	r20
 282:	3f 91       	pop	r19
 284:	2f 91       	pop	r18
 286:	0f 90       	pop	r0
 288:	0f be       	out	0x3f, r0	; 63
 28a:	0f 90       	pop	r0
 28c:	1f 90       	pop	r1
 28e:	18 95       	reti

00000290 <main>:

int main (void) {
	
	led_init();
 290:	0e 94 96 01 	call	0x32c	; 0x32c <led_init>
	rf_init_as_tx();
 294:	0e 94 3a 02 	call	0x474	; 0x474 <rf_init_as_tx>
	
	PORTC.DIRCLR = PORTC2__bm;
 298:	e0 e4       	ldi	r30, 0x40	; 64
 29a:	f6 e0       	ldi	r31, 0x06	; 6
 29c:	84 e0       	ldi	r24, 0x04	; 4
 29e:	82 83       	std	Z+2, r24	; 0x02
	PORTC.PIN3CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 2a0:	8a e1       	ldi	r24, 0x1A	; 26
 2a2:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.INT0MASK |= PORTC2__bm;
 2a4:	82 85       	ldd	r24, Z+10	; 0x0a
 2a6:	84 60       	ori	r24, 0x04	; 4
 2a8:	82 87       	std	Z+10, r24	; 0x0a
	PORTC.INTCTRL = PORT_INT0LVL_LO_gc;
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	81 87       	std	Z+9, r24	; 0x09
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
 2ae:	e0 ea       	ldi	r30, 0xA0	; 160
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	82 81       	ldd	r24, Z+2	; 0x02
 2b4:	81 60       	ori	r24, 0x01	; 1
 2b6:	82 83       	std	Z+2, r24	; 0x02
	set_bit_in_reg(STATUS_, TX_DS, 1);
 2b8:	41 e0       	ldi	r20, 0x01	; 1
 2ba:	65 e0       	ldi	r22, 0x05	; 5
 2bc:	87 e0       	ldi	r24, 0x07	; 7
 2be:	0e 94 16 02 	call	0x42c	; 0x42c <set_bit_in_reg>
	rf_send_byte(cByte);
 2c2:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 2c6:	0e 94 5e 02 	call	0x4bc	; 0x4bc <rf_send_byte>
	
	sei(); // global interrupts enabling
 2ca:	78 94       	sei
	set_sleep_mode(SLEEP_MODE_IDLE);
 2cc:	e8 e4       	ldi	r30, 0x48	; 72
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	80 81       	ld	r24, Z
 2d2:	81 7f       	andi	r24, 0xF1	; 241
 2d4:	80 83       	st	Z, r24
	sleep_enable();
 2d6:	80 81       	ld	r24, Z
 2d8:	81 60       	ori	r24, 0x01	; 1
 2da:	80 83       	st	Z, r24
	while(1) {
		sleep_cpu();
 2dc:	88 95       	sleep
 2de:	fe cf       	rjmp	.-4      	; 0x2dc <main+0x4c>

000002e0 <__vector_46>:
	return acc+128; 
}

/*! TWIE Master Interrupt vector. */
ISR(TWIE_TWIM_vect)
{
 2e0:	1f 92       	push	r1
 2e2:	0f 92       	push	r0
 2e4:	0f b6       	in	r0, 0x3f	; 63
 2e6:	0f 92       	push	r0
 2e8:	11 24       	eor	r1, r1
 2ea:	2f 93       	push	r18
 2ec:	3f 93       	push	r19
 2ee:	4f 93       	push	r20
 2f0:	5f 93       	push	r21
 2f2:	6f 93       	push	r22
 2f4:	7f 93       	push	r23
 2f6:	8f 93       	push	r24
 2f8:	9f 93       	push	r25
 2fa:	af 93       	push	r26
 2fc:	bf 93       	push	r27
 2fe:	ef 93       	push	r30
 300:	ff 93       	push	r31
	TWI_MasterInterruptHandler(&twiMaster);
 302:	82 e0       	ldi	r24, 0x02	; 2
 304:	90 e2       	ldi	r25, 0x20	; 32
 306:	0e 94 28 03 	call	0x650	; 0x650 <TWI_MasterInterruptHandler>
}
 30a:	ff 91       	pop	r31
 30c:	ef 91       	pop	r30
 30e:	bf 91       	pop	r27
 310:	af 91       	pop	r26
 312:	9f 91       	pop	r25
 314:	8f 91       	pop	r24
 316:	7f 91       	pop	r23
 318:	6f 91       	pop	r22
 31a:	5f 91       	pop	r21
 31c:	4f 91       	pop	r20
 31e:	3f 91       	pop	r19
 320:	2f 91       	pop	r18
 322:	0f 90       	pop	r0
 324:	0f be       	out	0x3f, r0	; 63
 326:	0f 90       	pop	r0
 328:	1f 90       	pop	r1
 32a:	18 95       	reti

0000032c <led_init>:

#define LED_PORT PORTD
#define LED_bm	(1<<4)

void led_init(void){
	PORT_SetPinsAsOutput( &LED_PORT,LED_bm);
 32c:	80 e1       	ldi	r24, 0x10	; 16
 32e:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x700661>
 332:	08 95       	ret

00000334 <spi_init>:
	
	delay_us(2000);
}

void rf_clear_int_flags(){
	reg_write(STATUS_,NOP);
 334:	af 92       	push	r10
 336:	cf 92       	push	r12
 338:	ef 92       	push	r14
 33a:	0f 93       	push	r16
 33c:	e0 e4       	ldi	r30, 0x40	; 64
 33e:	f6 e0       	ldi	r31, 0x06	; 6
 340:	82 e1       	ldi	r24, 0x12	; 18
 342:	81 83       	std	Z+1, r24	; 0x01
 344:	82 e0       	ldi	r24, 0x02	; 2
 346:	85 83       	std	Z+5, r24	; 0x05
 348:	a1 2c       	mov	r10, r1
 34a:	c1 2c       	mov	r12, r1
 34c:	e1 2c       	mov	r14, r1
 34e:	00 e0       	ldi	r16, 0x00	; 0
 350:	20 e0       	ldi	r18, 0x00	; 0
 352:	40 e4       	ldi	r20, 0x40	; 64
 354:	56 e0       	ldi	r21, 0x06	; 6
 356:	60 ec       	ldi	r22, 0xC0	; 192
 358:	78 e0       	ldi	r23, 0x08	; 8
 35a:	8c e1       	ldi	r24, 0x1C	; 28
 35c:	90 e2       	ldi	r25, 0x20	; 32
 35e:	0e 94 7e 02 	call	0x4fc	; 0x4fc <SPI_MasterInit>
 362:	0f 91       	pop	r16
 364:	ef 90       	pop	r14
 366:	cf 90       	pop	r12
 368:	af 90       	pop	r10
 36a:	08 95       	ret

0000036c <reg_write>:
 36c:	0f 93       	push	r16
 36e:	1f 93       	push	r17
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
 374:	06 2f       	mov	r16, r22
 376:	c0 e4       	ldi	r28, 0x40	; 64
 378:	d6 e0       	ldi	r29, 0x06	; 6
 37a:	12 e0       	ldi	r17, 0x02	; 2
 37c:	1e 83       	std	Y+6, r17	; 0x06
 37e:	68 2f       	mov	r22, r24
 380:	60 62       	ori	r22, 0x20	; 32
 382:	8c e1       	ldi	r24, 0x1C	; 28
 384:	90 e2       	ldi	r25, 0x20	; 32
 386:	0e 94 ab 02 	call	0x556	; 0x556 <SPI_MasterTransceiveByte>
 38a:	60 2f       	mov	r22, r16
 38c:	8c e1       	ldi	r24, 0x1C	; 28
 38e:	90 e2       	ldi	r25, 0x20	; 32
 390:	0e 94 ab 02 	call	0x556	; 0x556 <SPI_MasterTransceiveByte>
 394:	1d 83       	std	Y+5, r17	; 0x05
 396:	df 91       	pop	r29
 398:	cf 91       	pop	r28
 39a:	1f 91       	pop	r17
 39c:	0f 91       	pop	r16
 39e:	08 95       	ret

000003a0 <reg_read>:
 3a0:	1f 93       	push	r17
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	c0 e4       	ldi	r28, 0x40	; 64
 3a8:	d6 e0       	ldi	r29, 0x06	; 6
 3aa:	12 e0       	ldi	r17, 0x02	; 2
 3ac:	1e 83       	std	Y+6, r17	; 0x06
 3ae:	9d e0       	ldi	r25, 0x0D	; 13
 3b0:	9a 95       	dec	r25
 3b2:	f1 f7       	brne	.-4      	; 0x3b0 <reg_read+0x10>
 3b4:	00 00       	nop
 3b6:	68 2f       	mov	r22, r24
 3b8:	8c e1       	ldi	r24, 0x1C	; 28
 3ba:	90 e2       	ldi	r25, 0x20	; 32
 3bc:	0e 94 ab 02 	call	0x556	; 0x556 <SPI_MasterTransceiveByte>
 3c0:	60 e0       	ldi	r22, 0x00	; 0
 3c2:	8c e1       	ldi	r24, 0x1C	; 28
 3c4:	90 e2       	ldi	r25, 0x20	; 32
 3c6:	0e 94 ab 02 	call	0x556	; 0x556 <SPI_MasterTransceiveByte>
 3ca:	1d 83       	std	Y+5, r17	; 0x05
 3cc:	df 91       	pop	r29
 3ce:	cf 91       	pop	r28
 3d0:	1f 91       	pop	r17
 3d2:	08 95       	ret

000003d4 <payload_write>:
 3d4:	ef 92       	push	r14
 3d6:	ff 92       	push	r15
 3d8:	0f 93       	push	r16
 3da:	1f 93       	push	r17
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	7c 01       	movw	r14, r24
 3e2:	16 2f       	mov	r17, r22
 3e4:	82 e0       	ldi	r24, 0x02	; 2
 3e6:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
 3ea:	60 ea       	ldi	r22, 0xA0	; 160
 3ec:	8c e1       	ldi	r24, 0x1C	; 28
 3ee:	90 e2       	ldi	r25, 0x20	; 32
 3f0:	0e 94 ab 02 	call	0x556	; 0x556 <SPI_MasterTransceiveByte>
 3f4:	11 23       	and	r17, r17
 3f6:	81 f0       	breq	.+32     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 3f8:	e7 01       	movw	r28, r14
 3fa:	11 50       	subi	r17, 0x01	; 1
 3fc:	01 2f       	mov	r16, r17
 3fe:	10 e0       	ldi	r17, 0x00	; 0
 400:	0f 5f       	subi	r16, 0xFF	; 255
 402:	1f 4f       	sbci	r17, 0xFF	; 255
 404:	0e 0d       	add	r16, r14
 406:	1f 1d       	adc	r17, r15
 408:	69 91       	ld	r22, Y+
 40a:	8c e1       	ldi	r24, 0x1C	; 28
 40c:	90 e2       	ldi	r25, 0x20	; 32
 40e:	0e 94 ab 02 	call	0x556	; 0x556 <SPI_MasterTransceiveByte>
 412:	c0 17       	cp	r28, r16
 414:	d1 07       	cpc	r29, r17
 416:	c1 f7       	brne	.-16     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 418:	82 e0       	ldi	r24, 0x02	; 2
 41a:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
 41e:	df 91       	pop	r29
 420:	cf 91       	pop	r28
 422:	1f 91       	pop	r17
 424:	0f 91       	pop	r16
 426:	ff 90       	pop	r15
 428:	ef 90       	pop	r14
 42a:	08 95       	ret

0000042c <set_bit_in_reg>:
 42c:	0f 93       	push	r16
 42e:	1f 93       	push	r17
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
 434:	18 2f       	mov	r17, r24
 436:	04 2f       	mov	r16, r20
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	ec 01       	movw	r28, r24
 43e:	02 c0       	rjmp	.+4      	; 0x444 <set_bit_in_reg+0x18>
 440:	cc 0f       	add	r28, r28
 442:	dd 1f       	adc	r29, r29
 444:	6a 95       	dec	r22
 446:	e2 f7       	brpl	.-8      	; 0x440 <set_bit_in_reg+0x14>
 448:	81 2f       	mov	r24, r17
 44a:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <reg_read>
 44e:	01 30       	cpi	r16, 0x01	; 1
 450:	31 f4       	brne	.+12     	; 0x45e <set_bit_in_reg+0x32>
 452:	6c 2f       	mov	r22, r28
 454:	68 2b       	or	r22, r24
 456:	81 2f       	mov	r24, r17
 458:	0e 94 b6 01 	call	0x36c	; 0x36c <reg_write>
 45c:	06 c0       	rjmp	.+12     	; 0x46a <set_bit_in_reg+0x3e>
 45e:	c0 95       	com	r28
 460:	6c 2f       	mov	r22, r28
 462:	68 23       	and	r22, r24
 464:	81 2f       	mov	r24, r17
 466:	0e 94 b6 01 	call	0x36c	; 0x36c <reg_write>
 46a:	df 91       	pop	r29
 46c:	cf 91       	pop	r28
 46e:	1f 91       	pop	r17
 470:	0f 91       	pop	r16
 472:	08 95       	ret

00000474 <rf_init_as_tx>:
 474:	8b e7       	ldi	r24, 0x7B	; 123
 476:	95 e1       	ldi	r25, 0x15	; 21
 478:	01 97       	sbiw	r24, 0x01	; 1
 47a:	f1 f7       	brne	.-4      	; 0x478 <rf_init_as_tx+0x4>
 47c:	00 c0       	rjmp	.+0      	; 0x47e <rf_init_as_tx+0xa>
 47e:	00 00       	nop
 480:	0e 94 9a 01 	call	0x334	; 0x334 <spi_init>
 484:	e0 e4       	ldi	r30, 0x40	; 64
 486:	f6 e0       	ldi	r31, 0x06	; 6
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	81 83       	std	Z+1, r24	; 0x01
 48c:	86 83       	std	Z+6, r24	; 0x06
 48e:	6a e0       	ldi	r22, 0x0A	; 10
 490:	80 e0       	ldi	r24, 0x00	; 0
 492:	0e 94 b6 01 	call	0x36c	; 0x36c <reg_write>
 496:	60 e0       	ldi	r22, 0x00	; 0
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	0e 94 b6 01 	call	0x36c	; 0x36c <reg_write>
 49e:	68 e0       	ldi	r22, 0x08	; 8
 4a0:	86 e0       	ldi	r24, 0x06	; 6
 4a2:	0e 94 b6 01 	call	0x36c	; 0x36c <reg_write>
 4a6:	63 e1       	ldi	r22, 0x13	; 19
 4a8:	85 e0       	ldi	r24, 0x05	; 5
 4aa:	0e 94 b6 01 	call	0x36c	; 0x36c <reg_write>
 4ae:	87 ee       	ldi	r24, 0xE7	; 231
 4b0:	93 e0       	ldi	r25, 0x03	; 3
 4b2:	01 97       	sbiw	r24, 0x01	; 1
 4b4:	f1 f7       	brne	.-4      	; 0x4b2 <rf_init_as_tx+0x3e>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <rf_init_as_tx+0x44>
 4b8:	00 00       	nop
 4ba:	08 95       	ret

000004bc <rf_send_byte>:
}

void rf_send_byte(unsigned char ucByte) {
 4bc:	ff 92       	push	r15
 4be:	0f 93       	push	r16
 4c0:	1f 93       	push	r17
 4c2:	cf 93       	push	r28
 4c4:	df 93       	push	r29
 4c6:	1f 92       	push	r1
 4c8:	cd b7       	in	r28, 0x3d	; 61
 4ca:	de b7       	in	r29, 0x3e	; 62
 4cc:	89 83       	std	Y+1, r24	; 0x01
	}
};

void set_CE(unsigned char uset_CState){
	if (uset_CState) {
		PORT_SetPins( &RF_PORT,RF_CE_bm);
 4ce:	00 e4       	ldi	r16, 0x40	; 64
 4d0:	16 e0       	ldi	r17, 0x06	; 6
 4d2:	ff 24       	eor	r15, r15
 4d4:	f3 94       	inc	r15
 4d6:	f8 01       	movw	r30, r16
 4d8:	f5 82       	std	Z+5, r15	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4da:	fa e0       	ldi	r31, 0x0A	; 10
 4dc:	fa 95       	dec	r31
 4de:	f1 f7       	brne	.-4      	; 0x4dc <rf_send_byte+0x20>
}

void rf_send_byte(unsigned char ucByte) {
	set_CE(1);
	delay_us(15);
	payload_write(&ucByte, 1);
 4e0:	61 e0       	ldi	r22, 0x01	; 1
 4e2:	ce 01       	movw	r24, r28
 4e4:	01 96       	adiw	r24, 0x01	; 1
 4e6:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <payload_write>
void set_CE(unsigned char uset_CState){
	if (uset_CState) {
		PORT_SetPins( &RF_PORT,RF_CE_bm);
	}
	else {
		PORT_ClearPins( &RF_PORT,RF_CE_bm);
 4ea:	f8 01       	movw	r30, r16
 4ec:	f6 82       	std	Z+6, r15	; 0x06
void rf_send_byte(unsigned char ucByte) {
	set_CE(1);
	delay_us(15);
	payload_write(&ucByte, 1);
	set_CE(0);
}
 4ee:	0f 90       	pop	r0
 4f0:	df 91       	pop	r29
 4f2:	cf 91       	pop	r28
 4f4:	1f 91       	pop	r17
 4f6:	0f 91       	pop	r16
 4f8:	ff 90       	pop	r15
 4fa:	08 95       	ret

000004fc <SPI_MasterInit>:
	data = spi->dataPacket->transmitData[0];
	spi->module->DATA = data;

	/* Successs */
	return (SPI_OK);
}
 4fc:	af 92       	push	r10
 4fe:	cf 92       	push	r12
 500:	ef 92       	push	r14
 502:	0f 93       	push	r16
 504:	fc 01       	movw	r30, r24
 506:	60 83       	st	Z, r22
 508:	71 83       	std	Z+1, r23	; 0x01
 50a:	42 83       	std	Z+2, r20	; 0x02
 50c:	53 83       	std	Z+3, r21	; 0x03
 50e:	14 82       	std	Z+4, r1	; 0x04
 510:	c1 10       	cpse	r12, r1
 512:	02 c0       	rjmp	.+4      	; 0x518 <SPI_MasterInit+0x1c>
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	01 c0       	rjmp	.+2      	; 0x51a <SPI_MasterInit+0x1e>
 518:	80 e8       	ldi	r24, 0x80	; 128
 51a:	9a 2d       	mov	r25, r10
 51c:	90 64       	ori	r25, 0x40	; 64
 51e:	a9 2e       	mov	r10, r25
 520:	a8 2a       	or	r10, r24
 522:	21 11       	cpse	r18, r1
 524:	02 c0       	rjmp	.+4      	; 0x52a <SPI_MasterInit+0x2e>
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	01 c0       	rjmp	.+2      	; 0x52c <SPI_MasterInit+0x30>
 52a:	80 e2       	ldi	r24, 0x20	; 32
 52c:	a8 2a       	or	r10, r24
 52e:	00 61       	ori	r16, 0x10	; 16
 530:	0a 29       	or	r16, r10
 532:	db 01       	movw	r26, r22
 534:	0c 93       	st	X, r16
 536:	a0 81       	ld	r26, Z
 538:	b1 81       	ldd	r27, Z+1	; 0x01
 53a:	11 96       	adiw	r26, 0x01	; 1
 53c:	ec 92       	st	X, r14
 53e:	15 82       	std	Z+5, r1	; 0x05
 540:	16 82       	std	Z+6, r1	; 0x06
 542:	02 80       	ldd	r0, Z+2	; 0x02
 544:	f3 81       	ldd	r31, Z+3	; 0x03
 546:	e0 2d       	mov	r30, r0
 548:	80 ea       	ldi	r24, 0xA0	; 160
 54a:	81 83       	std	Z+1, r24	; 0x01
 54c:	0f 91       	pop	r16
 54e:	ef 90       	pop	r14
 550:	cf 90       	pop	r12
 552:	af 90       	pop	r10
 554:	08 95       	ret

00000556 <SPI_MasterTransceiveByte>:
 *  \return           Data received from slave.
 */
uint8_t SPI_MasterTransceiveByte(SPI_Master_t *spi, uint8_t TXdata)
{
	/* Send pattern. */
	spi->module->DATA = TXdata;
 556:	dc 01       	movw	r26, r24
 558:	ed 91       	ld	r30, X+
 55a:	fc 91       	ld	r31, X
 55c:	11 97       	sbiw	r26, 0x01	; 1
 55e:	63 83       	std	Z+3, r22	; 0x03

	/* Wait for transmission complete. */
	while(!(spi->module->STATUS & SPI_IF_bm)) {}
 560:	ed 91       	ld	r30, X+
 562:	fc 91       	ld	r31, X
 564:	82 81       	ldd	r24, Z+2	; 0x02
 566:	88 23       	and	r24, r24
 568:	ec f7       	brge	.-6      	; 0x564 <SPI_MasterTransceiveByte+0xe>
	/* Read received data. */
	uint8_t result = spi->module->DATA;
 56a:	83 81       	ldd	r24, Z+3	; 0x03

	return(result);
}
 56c:	08 95       	ret

0000056e <TWI_MasterArbitrationLostBusErrorHandler>:
 *  Handles TWI responses to lost arbitration and bus error.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi)
{
 56e:	fc 01       	movw	r30, r24
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
 570:	a0 81       	ld	r26, Z
 572:	b1 81       	ldd	r27, Z+1	; 0x01
 574:	14 96       	adiw	r26, 0x04	; 4
 576:	9c 91       	ld	r25, X
 578:	14 97       	sbiw	r26, 0x04	; 4

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
 57a:	92 ff       	sbrs	r25, 2
 57c:	03 c0       	rjmp	.+6      	; 0x584 <TWI_MasterArbitrationLostBusErrorHandler+0x16>
		twi->result = TWIM_RESULT_BUS_ERROR;
 57e:	84 e0       	ldi	r24, 0x04	; 4
 580:	80 8f       	std	Z+24, r24	; 0x18
 582:	02 c0       	rjmp	.+4      	; 0x588 <TWI_MasterArbitrationLostBusErrorHandler+0x1a>
	}
	/* If arbitration lost. */
	else {
		twi->result = TWIM_RESULT_ARBITRATION_LOST;
 584:	83 e0       	ldi	r24, 0x03	; 3
 586:	80 8f       	std	Z+24, r24	; 0x18
	}

	/* Clear interrupt flag. */
	twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
 588:	98 60       	ori	r25, 0x08	; 8
 58a:	14 96       	adiw	r26, 0x04	; 4
 58c:	9c 93       	st	X, r25

	twi->status = TWIM_STATUS_READY;
 58e:	17 8a       	std	Z+23, r1	; 0x17
 590:	08 95       	ret

00000592 <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi)
{
 592:	cf 93       	push	r28
 594:	df 93       	push	r29
 596:	fc 01       	movw	r30, r24
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite  = twi->bytesToWrite;
 598:	93 89       	ldd	r25, Z+19	; 0x13
	uint8_t bytesToRead   = twi->bytesToRead;
 59a:	24 89       	ldd	r18, Z+20	; 0x14

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
 59c:	a0 81       	ld	r26, Z
 59e:	b1 81       	ldd	r27, Z+1	; 0x01
 5a0:	14 96       	adiw	r26, 0x04	; 4
 5a2:	8c 91       	ld	r24, X
 5a4:	14 97       	sbiw	r26, 0x04	; 4
 5a6:	84 ff       	sbrs	r24, 4
 5a8:	07 c0       	rjmp	.+14     	; 0x5b8 <TWI_MasterWriteHandler+0x26>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 5aa:	83 e0       	ldi	r24, 0x03	; 3
 5ac:	13 96       	adiw	r26, 0x03	; 3
 5ae:	8c 93       	st	X, r24
		twi->result = TWIM_RESULT_NACK_RECEIVED;
 5b0:	85 e0       	ldi	r24, 0x05	; 5
 5b2:	80 8f       	std	Z+24, r24	; 0x18
		twi->status = TWIM_STATUS_READY;
 5b4:	17 8a       	std	Z+23, r1	; 0x17
 5b6:	1c c0       	rjmp	.+56     	; 0x5f0 <TWI_MasterWriteHandler+0x5e>
	}

	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
 5b8:	85 89       	ldd	r24, Z+21	; 0x15
 5ba:	89 17       	cp	r24, r25
 5bc:	58 f4       	brcc	.+22     	; 0x5d4 <TWI_MasterWriteHandler+0x42>
		uint8_t data = twi->writeData[twi->bytesWritten];
 5be:	85 89       	ldd	r24, Z+21	; 0x15
 5c0:	ef 01       	movw	r28, r30
 5c2:	c8 0f       	add	r28, r24
 5c4:	d1 1d       	adc	r29, r1
 5c6:	8b 81       	ldd	r24, Y+3	; 0x03
		twi->interface->MASTER.DATA = data;
 5c8:	17 96       	adiw	r26, 0x07	; 7
 5ca:	8c 93       	st	X, r24
		++twi->bytesWritten;
 5cc:	85 89       	ldd	r24, Z+21	; 0x15
 5ce:	8f 5f       	subi	r24, 0xFF	; 255
 5d0:	85 8b       	std	Z+21, r24	; 0x15
 5d2:	0e c0       	rjmp	.+28     	; 0x5f0 <TWI_MasterWriteHandler+0x5e>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
 5d4:	86 89       	ldd	r24, Z+22	; 0x16
 5d6:	82 17       	cp	r24, r18
 5d8:	28 f4       	brcc	.+10     	; 0x5e4 <TWI_MasterWriteHandler+0x52>
		uint8_t readAddress = twi->address | 0x01;
 5da:	82 81       	ldd	r24, Z+2	; 0x02
 5dc:	81 60       	ori	r24, 0x01	; 1
		twi->interface->MASTER.ADDR = readAddress;
 5de:	16 96       	adiw	r26, 0x06	; 6
 5e0:	8c 93       	st	X, r24
 5e2:	06 c0       	rjmp	.+12     	; 0x5f0 <TWI_MasterWriteHandler+0x5e>
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 5e4:	83 e0       	ldi	r24, 0x03	; 3
 5e6:	13 96       	adiw	r26, 0x03	; 3
 5e8:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
 5ee:	17 8a       	std	Z+23, r1	; 0x17
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_OK);
	}
}
 5f0:	df 91       	pop	r29
 5f2:	cf 91       	pop	r28
 5f4:	08 95       	ret

000005f6 <TWI_MasterReadHandler>:
 *  reading bytes from the TWI slave.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi)
{
 5f6:	fc 01       	movw	r30, r24
	/* Fetch data if bytes to be read. */
	if (twi->bytesRead < TWIM_READ_BUFFER_SIZE) {
 5f8:	86 89       	ldd	r24, Z+22	; 0x16
 5fa:	88 30       	cpi	r24, 0x08	; 8
 5fc:	70 f4       	brcc	.+28     	; 0x61a <TWI_MasterReadHandler+0x24>
		uint8_t data = twi->interface->MASTER.DATA;
 5fe:	a0 81       	ld	r26, Z
 600:	b1 81       	ldd	r27, Z+1	; 0x01
 602:	17 96       	adiw	r26, 0x07	; 7
 604:	8c 91       	ld	r24, X
		twi->readData[twi->bytesRead] = data;
 606:	96 89       	ldd	r25, Z+22	; 0x16
 608:	df 01       	movw	r26, r30
 60a:	a9 0f       	add	r26, r25
 60c:	b1 1d       	adc	r27, r1
 60e:	1b 96       	adiw	r26, 0x0b	; 11
 610:	8c 93       	st	X, r24
		twi->bytesRead++;
 612:	86 89       	ldd	r24, Z+22	; 0x16
 614:	8f 5f       	subi	r24, 0xFF	; 255
 616:	86 8b       	std	Z+22, r24	; 0x16
 618:	08 c0       	rjmp	.+16     	; 0x62a <TWI_MasterReadHandler+0x34>
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 61a:	a0 81       	ld	r26, Z
 61c:	b1 81       	ldd	r27, Z+1	; 0x01
 61e:	83 e0       	ldi	r24, 0x03	; 3
 620:	13 96       	adiw	r26, 0x03	; 3
 622:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
 624:	82 e0       	ldi	r24, 0x02	; 2
 626:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
 628:	17 8a       	std	Z+23, r1	; 0x17
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_BUFFER_OVERFLOW);
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;
 62a:	94 89       	ldd	r25, Z+20	; 0x14

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
 62c:	86 89       	ldd	r24, Z+22	; 0x16
 62e:	89 17       	cp	r24, r25
 630:	30 f4       	brcc	.+12     	; 0x63e <TWI_MasterReadHandler+0x48>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
 632:	01 90       	ld	r0, Z+
 634:	f0 81       	ld	r31, Z
 636:	e0 2d       	mov	r30, r0
 638:	82 e0       	ldi	r24, 0x02	; 2
 63a:	83 83       	std	Z+3, r24	; 0x03
 63c:	08 95       	ret
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
 63e:	a0 81       	ld	r26, Z
 640:	b1 81       	ldd	r27, Z+1	; 0x01
 642:	87 e0       	ldi	r24, 0x07	; 7
 644:	13 96       	adiw	r26, 0x03	; 3
 646:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
 64c:	17 8a       	std	Z+23, r1	; 0x17
 64e:	08 95       	ret

00000650 <TWI_MasterInterruptHandler>:
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
 650:	dc 01       	movw	r26, r24
 652:	ed 91       	ld	r30, X+
 654:	fc 91       	ld	r31, X
 656:	24 81       	ldd	r18, Z+4	; 0x04

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
 658:	32 2f       	mov	r19, r18
 65a:	3c 70       	andi	r19, 0x0C	; 12
 65c:	19 f0       	breq	.+6      	; 0x664 <TWI_MasterInterruptHandler+0x14>
	    (currentStatus & TWI_MASTER_BUSERR_bm)) {

		TWI_MasterArbitrationLostBusErrorHandler(twi);
 65e:	0e 94 b7 02 	call	0x56e	; 0x56e <TWI_MasterArbitrationLostBusErrorHandler>
 662:	08 95       	ret
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
 664:	26 ff       	sbrs	r18, 6
 666:	03 c0       	rjmp	.+6      	; 0x66e <TWI_MasterInterruptHandler+0x1e>
		TWI_MasterWriteHandler(twi);
 668:	0e 94 c9 02 	call	0x592	; 0x592 <TWI_MasterWriteHandler>
 66c:	08 95       	ret
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
 66e:	22 23       	and	r18, r18
 670:	1c f4       	brge	.+6      	; 0x678 <TWI_MasterInterruptHandler+0x28>
		TWI_MasterReadHandler(twi);
 672:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <TWI_MasterReadHandler>
 676:	08 95       	ret
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
 678:	26 e0       	ldi	r18, 0x06	; 6
 67a:	fc 01       	movw	r30, r24
 67c:	20 8f       	std	Z+24, r18	; 0x18
	twi->status = TWIM_STATUS_READY;
 67e:	17 8a       	std	Z+23, r1	; 0x17
 680:	08 95       	ret

00000682 <_exit>:
 682:	f8 94       	cli

00000684 <__stop_program>:
 684:	ff cf       	rjmp	.-2      	; 0x684 <__stop_program>
