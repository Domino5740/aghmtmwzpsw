
RF.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  0000065e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  00802000  00802000  0000065e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000065e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000690  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004fce  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002f65  00000000  00000000  00005846  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001247  00000000  00000000  000087ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c8  00000000  00000000  000099f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002b15  00000000  00000000  00009ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001771  00000000  00000000  0000c9d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  0000e142  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
   8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
   c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  10:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  14:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  18:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  1c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  20:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  24:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  28:	0c 94 12 01 	jmp	0x224	; 0x224 <__vector_10>
  2c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  30:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  34:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  38:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  3c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  40:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  44:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  48:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  4c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  50:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  54:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  58:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  5c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  60:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  64:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  68:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  6c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  70:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  74:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  78:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  7c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  80:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  84:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  88:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  8c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  90:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  94:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  98:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  9c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  a0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  a4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  a8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  ac:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  b0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  b4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  b8:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__vector_46>
  bc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  c0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  c4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  c8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  cc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  d0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  d4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  d8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  dc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  e0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  e4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  e8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  ec:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  f0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  f4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  f8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  fc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 100:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 104:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 108:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 10c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 110:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 114:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 118:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 11c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 120:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 124:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 128:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 12c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 130:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 134:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 138:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 13c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 140:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 144:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 148:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 14c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 150:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 154:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 158:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 15c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 160:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 164:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 168:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 16c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 170:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 174:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 178:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 17c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 180:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 184:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 188:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 18c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 190:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 194:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 198:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 19c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1a0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1a4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1a8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1ac:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1b0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1b4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1b8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1bc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1c0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1c4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1c8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1cc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1d0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1d4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1d8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1dc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1e0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1e4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1e8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1ec:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1f0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1f4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1f8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e2       	ldi	r29, 0x2F	; 47
 206:	de bf       	out	0x3e, r29	; 62

00000208 <__do_clear_bss>:
 208:	20 e2       	ldi	r18, 0x20	; 32
 20a:	a0 e0       	ldi	r26, 0x00	; 0
 20c:	b0 e2       	ldi	r27, 0x20	; 32
 20e:	01 c0       	rjmp	.+2      	; 0x212 <.do_clear_bss_start>

00000210 <.do_clear_bss_loop>:
 210:	1d 92       	st	X+, r1

00000212 <.do_clear_bss_start>:
 212:	a2 32       	cpi	r26, 0x22	; 34
 214:	b2 07       	cpc	r27, r18
 216:	e1 f7       	brne	.-8      	; 0x210 <.do_clear_bss_loop>
 218:	0e 94 3c 01 	call	0x278	; 0x278 <main>
 21c:	0c 94 f3 02 	jmp	0x5e6	; 0x5e6 <_exit>

00000220 <__bad_interrupt>:
 220:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000224 <__vector_10>:
#define PORTC3__bm 1 << 3
#define PORTC2__bm 1 << 2

unsigned char ucByte = 0;

ISR(RTC_OVF_vect) { rf_send_byte(ucByte++); }
 224:	1f 92       	push	r1
 226:	0f 92       	push	r0
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	0f 92       	push	r0
 22c:	11 24       	eor	r1, r1
 22e:	2f 93       	push	r18
 230:	3f 93       	push	r19
 232:	4f 93       	push	r20
 234:	5f 93       	push	r21
 236:	6f 93       	push	r22
 238:	7f 93       	push	r23
 23a:	8f 93       	push	r24
 23c:	9f 93       	push	r25
 23e:	af 93       	push	r26
 240:	bf 93       	push	r27
 242:	ef 93       	push	r30
 244:	ff 93       	push	r31
 246:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	98 0f       	add	r25, r24
 24e:	90 93 00 20 	sts	0x2000, r25	; 0x802000 <__DATA_REGION_ORIGIN__>
 252:	0e 94 10 02 	call	0x420	; 0x420 <rf_send_byte>
 256:	ff 91       	pop	r31
 258:	ef 91       	pop	r30
 25a:	bf 91       	pop	r27
 25c:	af 91       	pop	r26
 25e:	9f 91       	pop	r25
 260:	8f 91       	pop	r24
 262:	7f 91       	pop	r23
 264:	6f 91       	pop	r22
 266:	5f 91       	pop	r21
 268:	4f 91       	pop	r20
 26a:	3f 91       	pop	r19
 26c:	2f 91       	pop	r18
 26e:	0f 90       	pop	r0
 270:	0f be       	out	0x3f, r0	; 63
 272:	0f 90       	pop	r0
 274:	1f 90       	pop	r1
 276:	18 95       	reti

00000278 <main>:
int main (void) {
	rf_init_as_tx();
 278:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <rf_init_as_tx>
	RTC.PER  = 10;
 27c:	e0 e0       	ldi	r30, 0x00	; 0
 27e:	f4 e0       	ldi	r31, 0x04	; 4
 280:	8a e0       	ldi	r24, 0x0A	; 10
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	82 87       	std	Z+10, r24	; 0x0a
 286:	93 87       	std	Z+11, r25	; 0x0b
	RTC.CNT = 0;
 288:	10 86       	std	Z+8, r1	; 0x08
 28a:	11 86       	std	Z+9, r1	; 0x09
	RTC.CTRL = RTC_PRESCALER_DIV1_gc;
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	80 83       	st	Z, r24
	RTC.INTCTRL = RTC_OVFINTLVL0_bm;
 290:	82 83       	std	Z+2, r24	; 0x02
	CLK.RTCCTRL = CLK_RTCEN_bm | CLK_RTCSRC_ULP_gc;
 292:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
 296:	e0 ea       	ldi	r30, 0xA0	; 160
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	82 81       	ldd	r24, Z+2	; 0x02
 29c:	81 60       	ori	r24, 0x01	; 1
 29e:	82 83       	std	Z+2, r24	; 0x02
	sei();
 2a0:	78 94       	sei
	set_sleep_mode(SLEEP_MODE_PWR_SAVE);
 2a2:	e8 e4       	ldi	r30, 0x48	; 72
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	80 81       	ld	r24, Z
 2a8:	81 7f       	andi	r24, 0xF1	; 241
 2aa:	86 60       	ori	r24, 0x06	; 6
 2ac:	80 83       	st	Z, r24
	sleep_enable();
 2ae:	80 81       	ld	r24, Z
 2b0:	81 60       	ori	r24, 0x01	; 1
 2b2:	80 83       	st	Z, r24
	rf_send_byte(ucByte++);
 2b4:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	98 0f       	add	r25, r24
 2bc:	90 93 00 20 	sts	0x2000, r25	; 0x802000 <__DATA_REGION_ORIGIN__>
 2c0:	0e 94 10 02 	call	0x420	; 0x420 <rf_send_byte>
	while(1){
		sleep_cpu();
 2c4:	88 95       	sleep
 2c6:	fe cf       	rjmp	.-4      	; 0x2c4 <main+0x4c>

000002c8 <__vector_46>:
	return acc+128; 
}

/*! TWIE Master Interrupt vector. */
ISR(TWIE_TWIM_vect)
{
 2c8:	1f 92       	push	r1
 2ca:	0f 92       	push	r0
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	0f 92       	push	r0
 2d0:	11 24       	eor	r1, r1
 2d2:	2f 93       	push	r18
 2d4:	3f 93       	push	r19
 2d6:	4f 93       	push	r20
 2d8:	5f 93       	push	r21
 2da:	6f 93       	push	r22
 2dc:	7f 93       	push	r23
 2de:	8f 93       	push	r24
 2e0:	9f 93       	push	r25
 2e2:	af 93       	push	r26
 2e4:	bf 93       	push	r27
 2e6:	ef 93       	push	r30
 2e8:	ff 93       	push	r31
	TWI_MasterInterruptHandler(&twiMaster);
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	90 e2       	ldi	r25, 0x20	; 32
 2ee:	0e 94 da 02 	call	0x5b4	; 0x5b4 <TWI_MasterInterruptHandler>
}
 2f2:	ff 91       	pop	r31
 2f4:	ef 91       	pop	r30
 2f6:	bf 91       	pop	r27
 2f8:	af 91       	pop	r26
 2fa:	9f 91       	pop	r25
 2fc:	8f 91       	pop	r24
 2fe:	7f 91       	pop	r23
 300:	6f 91       	pop	r22
 302:	5f 91       	pop	r21
 304:	4f 91       	pop	r20
 306:	3f 91       	pop	r19
 308:	2f 91       	pop	r18
 30a:	0f 90       	pop	r0
 30c:	0f be       	out	0x3f, r0	; 63
 30e:	0f 90       	pop	r0
 310:	1f 90       	pop	r1
 312:	18 95       	reti

00000314 <spi_init>:
	
	delay_us(2000);
}

void rf_clear_int_flags(){
	reg_write(STATUS_,NOP);
 314:	af 92       	push	r10
 316:	cf 92       	push	r12
 318:	ef 92       	push	r14
 31a:	0f 93       	push	r16
 31c:	e0 e4       	ldi	r30, 0x40	; 64
 31e:	f6 e0       	ldi	r31, 0x06	; 6
 320:	82 e1       	ldi	r24, 0x12	; 18
 322:	81 83       	std	Z+1, r24	; 0x01
 324:	82 e0       	ldi	r24, 0x02	; 2
 326:	85 83       	std	Z+5, r24	; 0x05
 328:	a1 2c       	mov	r10, r1
 32a:	c1 2c       	mov	r12, r1
 32c:	e1 2c       	mov	r14, r1
 32e:	00 e0       	ldi	r16, 0x00	; 0
 330:	20 e0       	ldi	r18, 0x00	; 0
 332:	40 e4       	ldi	r20, 0x40	; 64
 334:	56 e0       	ldi	r21, 0x06	; 6
 336:	60 ec       	ldi	r22, 0xC0	; 192
 338:	78 e0       	ldi	r23, 0x08	; 8
 33a:	8b e1       	ldi	r24, 0x1B	; 27
 33c:	90 e2       	ldi	r25, 0x20	; 32
 33e:	0e 94 30 02 	call	0x460	; 0x460 <SPI_MasterInit>
 342:	0f 91       	pop	r16
 344:	ef 90       	pop	r14
 346:	cf 90       	pop	r12
 348:	af 90       	pop	r10
 34a:	08 95       	ret

0000034c <reg_write>:
 34c:	0f 93       	push	r16
 34e:	1f 93       	push	r17
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
 354:	06 2f       	mov	r16, r22
 356:	c0 e4       	ldi	r28, 0x40	; 64
 358:	d6 e0       	ldi	r29, 0x06	; 6
 35a:	12 e0       	ldi	r17, 0x02	; 2
 35c:	1e 83       	std	Y+6, r17	; 0x06
 35e:	68 2f       	mov	r22, r24
 360:	60 62       	ori	r22, 0x20	; 32
 362:	8b e1       	ldi	r24, 0x1B	; 27
 364:	90 e2       	ldi	r25, 0x20	; 32
 366:	0e 94 5d 02 	call	0x4ba	; 0x4ba <SPI_MasterTransceiveByte>
 36a:	60 2f       	mov	r22, r16
 36c:	8b e1       	ldi	r24, 0x1B	; 27
 36e:	90 e2       	ldi	r25, 0x20	; 32
 370:	0e 94 5d 02 	call	0x4ba	; 0x4ba <SPI_MasterTransceiveByte>
 374:	1d 83       	std	Y+5, r17	; 0x05
 376:	df 91       	pop	r29
 378:	cf 91       	pop	r28
 37a:	1f 91       	pop	r17
 37c:	0f 91       	pop	r16
 37e:	08 95       	ret

00000380 <payload_write>:
 380:	ef 92       	push	r14
 382:	ff 92       	push	r15
 384:	0f 93       	push	r16
 386:	1f 93       	push	r17
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	7c 01       	movw	r14, r24
 38e:	16 2f       	mov	r17, r22
 390:	82 e0       	ldi	r24, 0x02	; 2
 392:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
 396:	60 ea       	ldi	r22, 0xA0	; 160
 398:	8b e1       	ldi	r24, 0x1B	; 27
 39a:	90 e2       	ldi	r25, 0x20	; 32
 39c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <SPI_MasterTransceiveByte>
 3a0:	11 23       	and	r17, r17
 3a2:	81 f0       	breq	.+32     	; 0x3c4 <payload_write+0x44>
 3a4:	e7 01       	movw	r28, r14
 3a6:	11 50       	subi	r17, 0x01	; 1
 3a8:	01 2f       	mov	r16, r17
 3aa:	10 e0       	ldi	r17, 0x00	; 0
 3ac:	0f 5f       	subi	r16, 0xFF	; 255
 3ae:	1f 4f       	sbci	r17, 0xFF	; 255
 3b0:	0e 0d       	add	r16, r14
 3b2:	1f 1d       	adc	r17, r15
 3b4:	69 91       	ld	r22, Y+
 3b6:	8b e1       	ldi	r24, 0x1B	; 27
 3b8:	90 e2       	ldi	r25, 0x20	; 32
 3ba:	0e 94 5d 02 	call	0x4ba	; 0x4ba <SPI_MasterTransceiveByte>
 3be:	c0 17       	cp	r28, r16
 3c0:	d1 07       	cpc	r29, r17
 3c2:	c1 f7       	brne	.-16     	; 0x3b4 <payload_write+0x34>
 3c4:	82 e0       	ldi	r24, 0x02	; 2
 3c6:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
 3ce:	1f 91       	pop	r17
 3d0:	0f 91       	pop	r16
 3d2:	ff 90       	pop	r15
 3d4:	ef 90       	pop	r14
 3d6:	08 95       	ret

000003d8 <rf_init_as_tx>:
 3d8:	8b e7       	ldi	r24, 0x7B	; 123
 3da:	95 e1       	ldi	r25, 0x15	; 21
 3dc:	01 97       	sbiw	r24, 0x01	; 1
 3de:	f1 f7       	brne	.-4      	; 0x3dc <rf_init_as_tx+0x4>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <rf_init_as_tx+0xa>
 3e2:	00 00       	nop
 3e4:	0e 94 8a 01 	call	0x314	; 0x314 <spi_init>
 3e8:	e0 e4       	ldi	r30, 0x40	; 64
 3ea:	f6 e0       	ldi	r31, 0x06	; 6
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	81 83       	std	Z+1, r24	; 0x01
 3f0:	86 83       	std	Z+6, r24	; 0x06
 3f2:	6a e2       	ldi	r22, 0x2A	; 42
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	0e 94 a6 01 	call	0x34c	; 0x34c <reg_write>
 3fa:	60 e0       	ldi	r22, 0x00	; 0
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	0e 94 a6 01 	call	0x34c	; 0x34c <reg_write>
 402:	68 e0       	ldi	r22, 0x08	; 8
 404:	86 e0       	ldi	r24, 0x06	; 6
 406:	0e 94 a6 01 	call	0x34c	; 0x34c <reg_write>
 40a:	63 e1       	ldi	r22, 0x13	; 19
 40c:	85 e0       	ldi	r24, 0x05	; 5
 40e:	0e 94 a6 01 	call	0x34c	; 0x34c <reg_write>
 412:	87 ee       	ldi	r24, 0xE7	; 231
 414:	93 e0       	ldi	r25, 0x03	; 3
 416:	01 97       	sbiw	r24, 0x01	; 1
 418:	f1 f7       	brne	.-4      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 41c:	00 00       	nop
 41e:	08 95       	ret

00000420 <rf_send_byte>:
}

void rf_send_byte(unsigned char ucByte) {
 420:	ff 92       	push	r15
 422:	0f 93       	push	r16
 424:	1f 93       	push	r17
 426:	cf 93       	push	r28
 428:	df 93       	push	r29
 42a:	1f 92       	push	r1
 42c:	cd b7       	in	r28, 0x3d	; 61
 42e:	de b7       	in	r29, 0x3e	; 62
 430:	89 83       	std	Y+1, r24	; 0x01
	}
};

void set_CE(unsigned char uset_CState){
	if (uset_CState) {
		PORT_SetPins( &RF_PORT,RF_CE_bm);
 432:	00 e4       	ldi	r16, 0x40	; 64
 434:	16 e0       	ldi	r17, 0x06	; 6
 436:	ff 24       	eor	r15, r15
 438:	f3 94       	inc	r15
 43a:	f8 01       	movw	r30, r16
 43c:	f5 82       	std	Z+5, r15	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 43e:	fa e0       	ldi	r31, 0x0A	; 10
 440:	fa 95       	dec	r31
 442:	f1 f7       	brne	.-4      	; 0x440 <rf_send_byte+0x20>
}

void rf_send_byte(unsigned char ucByte) {
	set_CE(1);
	delay_us(15);
	payload_write(&ucByte, 1);
 444:	61 e0       	ldi	r22, 0x01	; 1
 446:	ce 01       	movw	r24, r28
 448:	01 96       	adiw	r24, 0x01	; 1
 44a:	0e 94 c0 01 	call	0x380	; 0x380 <payload_write>
void set_CE(unsigned char uset_CState){
	if (uset_CState) {
		PORT_SetPins( &RF_PORT,RF_CE_bm);
	}
	else {
		PORT_ClearPins( &RF_PORT,RF_CE_bm);
 44e:	f8 01       	movw	r30, r16
 450:	f6 82       	std	Z+6, r15	; 0x06
void rf_send_byte(unsigned char ucByte) {
	set_CE(1);
	delay_us(15);
	payload_write(&ucByte, 1);
	set_CE(0);
}
 452:	0f 90       	pop	r0
 454:	df 91       	pop	r29
 456:	cf 91       	pop	r28
 458:	1f 91       	pop	r17
 45a:	0f 91       	pop	r16
 45c:	ff 90       	pop	r15
 45e:	08 95       	ret

00000460 <SPI_MasterInit>:
	data = spi->dataPacket->transmitData[0];
	spi->module->DATA = data;

	/* Successs */
	return (SPI_OK);
}
 460:	af 92       	push	r10
 462:	cf 92       	push	r12
 464:	ef 92       	push	r14
 466:	0f 93       	push	r16
 468:	fc 01       	movw	r30, r24
 46a:	60 83       	st	Z, r22
 46c:	71 83       	std	Z+1, r23	; 0x01
 46e:	42 83       	std	Z+2, r20	; 0x02
 470:	53 83       	std	Z+3, r21	; 0x03
 472:	14 82       	std	Z+4, r1	; 0x04
 474:	c1 10       	cpse	r12, r1
 476:	02 c0       	rjmp	.+4      	; 0x47c <SPI_MasterInit+0x1c>
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	01 c0       	rjmp	.+2      	; 0x47e <SPI_MasterInit+0x1e>
 47c:	80 e8       	ldi	r24, 0x80	; 128
 47e:	9a 2d       	mov	r25, r10
 480:	90 64       	ori	r25, 0x40	; 64
 482:	a9 2e       	mov	r10, r25
 484:	a8 2a       	or	r10, r24
 486:	21 11       	cpse	r18, r1
 488:	02 c0       	rjmp	.+4      	; 0x48e <SPI_MasterInit+0x2e>
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	01 c0       	rjmp	.+2      	; 0x490 <SPI_MasterInit+0x30>
 48e:	80 e2       	ldi	r24, 0x20	; 32
 490:	a8 2a       	or	r10, r24
 492:	00 61       	ori	r16, 0x10	; 16
 494:	0a 29       	or	r16, r10
 496:	db 01       	movw	r26, r22
 498:	0c 93       	st	X, r16
 49a:	a0 81       	ld	r26, Z
 49c:	b1 81       	ldd	r27, Z+1	; 0x01
 49e:	11 96       	adiw	r26, 0x01	; 1
 4a0:	ec 92       	st	X, r14
 4a2:	15 82       	std	Z+5, r1	; 0x05
 4a4:	16 82       	std	Z+6, r1	; 0x06
 4a6:	02 80       	ldd	r0, Z+2	; 0x02
 4a8:	f3 81       	ldd	r31, Z+3	; 0x03
 4aa:	e0 2d       	mov	r30, r0
 4ac:	80 ea       	ldi	r24, 0xA0	; 160
 4ae:	81 83       	std	Z+1, r24	; 0x01
 4b0:	0f 91       	pop	r16
 4b2:	ef 90       	pop	r14
 4b4:	cf 90       	pop	r12
 4b6:	af 90       	pop	r10
 4b8:	08 95       	ret

000004ba <SPI_MasterTransceiveByte>:
 *  \return           Data received from slave.
 */
uint8_t SPI_MasterTransceiveByte(SPI_Master_t *spi, uint8_t TXdata)
{
	/* Send pattern. */
	spi->module->DATA = TXdata;
 4ba:	dc 01       	movw	r26, r24
 4bc:	ed 91       	ld	r30, X+
 4be:	fc 91       	ld	r31, X
 4c0:	11 97       	sbiw	r26, 0x01	; 1
 4c2:	63 83       	std	Z+3, r22	; 0x03

	/* Wait for transmission complete. */
	while(!(spi->module->STATUS & SPI_IF_bm)) {}
 4c4:	ed 91       	ld	r30, X+
 4c6:	fc 91       	ld	r31, X
 4c8:	82 81       	ldd	r24, Z+2	; 0x02
 4ca:	88 23       	and	r24, r24
 4cc:	ec f7       	brge	.-6      	; 0x4c8 <SPI_MasterTransceiveByte+0xe>
	/* Read received data. */
	uint8_t result = spi->module->DATA;
 4ce:	83 81       	ldd	r24, Z+3	; 0x03

	return(result);
}
 4d0:	08 95       	ret

000004d2 <TWI_MasterArbitrationLostBusErrorHandler>:
 *  Handles TWI responses to lost arbitration and bus error.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi)
{
 4d2:	fc 01       	movw	r30, r24
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
 4d4:	a0 81       	ld	r26, Z
 4d6:	b1 81       	ldd	r27, Z+1	; 0x01
 4d8:	14 96       	adiw	r26, 0x04	; 4
 4da:	9c 91       	ld	r25, X
 4dc:	14 97       	sbiw	r26, 0x04	; 4

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
 4de:	92 ff       	sbrs	r25, 2
 4e0:	03 c0       	rjmp	.+6      	; 0x4e8 <TWI_MasterArbitrationLostBusErrorHandler+0x16>
		twi->result = TWIM_RESULT_BUS_ERROR;
 4e2:	84 e0       	ldi	r24, 0x04	; 4
 4e4:	80 8f       	std	Z+24, r24	; 0x18
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <TWI_MasterArbitrationLostBusErrorHandler+0x1a>
	}
	/* If arbitration lost. */
	else {
		twi->result = TWIM_RESULT_ARBITRATION_LOST;
 4e8:	83 e0       	ldi	r24, 0x03	; 3
 4ea:	80 8f       	std	Z+24, r24	; 0x18
	}

	/* Clear interrupt flag. */
	twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
 4ec:	98 60       	ori	r25, 0x08	; 8
 4ee:	14 96       	adiw	r26, 0x04	; 4
 4f0:	9c 93       	st	X, r25

	twi->status = TWIM_STATUS_READY;
 4f2:	17 8a       	std	Z+23, r1	; 0x17
 4f4:	08 95       	ret

000004f6 <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi)
{
 4f6:	cf 93       	push	r28
 4f8:	df 93       	push	r29
 4fa:	fc 01       	movw	r30, r24
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite  = twi->bytesToWrite;
 4fc:	93 89       	ldd	r25, Z+19	; 0x13
	uint8_t bytesToRead   = twi->bytesToRead;
 4fe:	24 89       	ldd	r18, Z+20	; 0x14

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
 500:	a0 81       	ld	r26, Z
 502:	b1 81       	ldd	r27, Z+1	; 0x01
 504:	14 96       	adiw	r26, 0x04	; 4
 506:	8c 91       	ld	r24, X
 508:	14 97       	sbiw	r26, 0x04	; 4
 50a:	84 ff       	sbrs	r24, 4
 50c:	07 c0       	rjmp	.+14     	; 0x51c <TWI_MasterWriteHandler+0x26>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 50e:	83 e0       	ldi	r24, 0x03	; 3
 510:	13 96       	adiw	r26, 0x03	; 3
 512:	8c 93       	st	X, r24
		twi->result = TWIM_RESULT_NACK_RECEIVED;
 514:	85 e0       	ldi	r24, 0x05	; 5
 516:	80 8f       	std	Z+24, r24	; 0x18
		twi->status = TWIM_STATUS_READY;
 518:	17 8a       	std	Z+23, r1	; 0x17
 51a:	1c c0       	rjmp	.+56     	; 0x554 <TWI_MasterWriteHandler+0x5e>
	}

	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
 51c:	85 89       	ldd	r24, Z+21	; 0x15
 51e:	89 17       	cp	r24, r25
 520:	58 f4       	brcc	.+22     	; 0x538 <TWI_MasterWriteHandler+0x42>
		uint8_t data = twi->writeData[twi->bytesWritten];
 522:	85 89       	ldd	r24, Z+21	; 0x15
 524:	ef 01       	movw	r28, r30
 526:	c8 0f       	add	r28, r24
 528:	d1 1d       	adc	r29, r1
 52a:	8b 81       	ldd	r24, Y+3	; 0x03
		twi->interface->MASTER.DATA = data;
 52c:	17 96       	adiw	r26, 0x07	; 7
 52e:	8c 93       	st	X, r24
		++twi->bytesWritten;
 530:	85 89       	ldd	r24, Z+21	; 0x15
 532:	8f 5f       	subi	r24, 0xFF	; 255
 534:	85 8b       	std	Z+21, r24	; 0x15
 536:	0e c0       	rjmp	.+28     	; 0x554 <TWI_MasterWriteHandler+0x5e>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
 538:	86 89       	ldd	r24, Z+22	; 0x16
 53a:	82 17       	cp	r24, r18
 53c:	28 f4       	brcc	.+10     	; 0x548 <TWI_MasterWriteHandler+0x52>
		uint8_t readAddress = twi->address | 0x01;
 53e:	82 81       	ldd	r24, Z+2	; 0x02
 540:	81 60       	ori	r24, 0x01	; 1
		twi->interface->MASTER.ADDR = readAddress;
 542:	16 96       	adiw	r26, 0x06	; 6
 544:	8c 93       	st	X, r24
 546:	06 c0       	rjmp	.+12     	; 0x554 <TWI_MasterWriteHandler+0x5e>
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 548:	83 e0       	ldi	r24, 0x03	; 3
 54a:	13 96       	adiw	r26, 0x03	; 3
 54c:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
 552:	17 8a       	std	Z+23, r1	; 0x17
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_OK);
	}
}
 554:	df 91       	pop	r29
 556:	cf 91       	pop	r28
 558:	08 95       	ret

0000055a <TWI_MasterReadHandler>:
 *  reading bytes from the TWI slave.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi)
{
 55a:	fc 01       	movw	r30, r24
	/* Fetch data if bytes to be read. */
	if (twi->bytesRead < TWIM_READ_BUFFER_SIZE) {
 55c:	86 89       	ldd	r24, Z+22	; 0x16
 55e:	88 30       	cpi	r24, 0x08	; 8
 560:	70 f4       	brcc	.+28     	; 0x57e <TWI_MasterReadHandler+0x24>
		uint8_t data = twi->interface->MASTER.DATA;
 562:	a0 81       	ld	r26, Z
 564:	b1 81       	ldd	r27, Z+1	; 0x01
 566:	17 96       	adiw	r26, 0x07	; 7
 568:	8c 91       	ld	r24, X
		twi->readData[twi->bytesRead] = data;
 56a:	96 89       	ldd	r25, Z+22	; 0x16
 56c:	df 01       	movw	r26, r30
 56e:	a9 0f       	add	r26, r25
 570:	b1 1d       	adc	r27, r1
 572:	1b 96       	adiw	r26, 0x0b	; 11
 574:	8c 93       	st	X, r24
		twi->bytesRead++;
 576:	86 89       	ldd	r24, Z+22	; 0x16
 578:	8f 5f       	subi	r24, 0xFF	; 255
 57a:	86 8b       	std	Z+22, r24	; 0x16
 57c:	08 c0       	rjmp	.+16     	; 0x58e <TWI_MasterReadHandler+0x34>
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 57e:	a0 81       	ld	r26, Z
 580:	b1 81       	ldd	r27, Z+1	; 0x01
 582:	83 e0       	ldi	r24, 0x03	; 3
 584:	13 96       	adiw	r26, 0x03	; 3
 586:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
 588:	82 e0       	ldi	r24, 0x02	; 2
 58a:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
 58c:	17 8a       	std	Z+23, r1	; 0x17
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_BUFFER_OVERFLOW);
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;
 58e:	94 89       	ldd	r25, Z+20	; 0x14

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
 590:	86 89       	ldd	r24, Z+22	; 0x16
 592:	89 17       	cp	r24, r25
 594:	30 f4       	brcc	.+12     	; 0x5a2 <TWI_MasterReadHandler+0x48>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
 596:	01 90       	ld	r0, Z+
 598:	f0 81       	ld	r31, Z
 59a:	e0 2d       	mov	r30, r0
 59c:	82 e0       	ldi	r24, 0x02	; 2
 59e:	83 83       	std	Z+3, r24	; 0x03
 5a0:	08 95       	ret
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
 5a2:	a0 81       	ld	r26, Z
 5a4:	b1 81       	ldd	r27, Z+1	; 0x01
 5a6:	87 e0       	ldi	r24, 0x07	; 7
 5a8:	13 96       	adiw	r26, 0x03	; 3
 5aa:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
 5b0:	17 8a       	std	Z+23, r1	; 0x17
 5b2:	08 95       	ret

000005b4 <TWI_MasterInterruptHandler>:
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
 5b4:	dc 01       	movw	r26, r24
 5b6:	ed 91       	ld	r30, X+
 5b8:	fc 91       	ld	r31, X
 5ba:	24 81       	ldd	r18, Z+4	; 0x04

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
 5bc:	32 2f       	mov	r19, r18
 5be:	3c 70       	andi	r19, 0x0C	; 12
 5c0:	19 f0       	breq	.+6      	; 0x5c8 <TWI_MasterInterruptHandler+0x14>
	    (currentStatus & TWI_MASTER_BUSERR_bm)) {

		TWI_MasterArbitrationLostBusErrorHandler(twi);
 5c2:	0e 94 69 02 	call	0x4d2	; 0x4d2 <TWI_MasterArbitrationLostBusErrorHandler>
 5c6:	08 95       	ret
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
 5c8:	26 ff       	sbrs	r18, 6
 5ca:	03 c0       	rjmp	.+6      	; 0x5d2 <TWI_MasterInterruptHandler+0x1e>
		TWI_MasterWriteHandler(twi);
 5cc:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <TWI_MasterWriteHandler>
 5d0:	08 95       	ret
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
 5d2:	22 23       	and	r18, r18
 5d4:	1c f4       	brge	.+6      	; 0x5dc <TWI_MasterInterruptHandler+0x28>
		TWI_MasterReadHandler(twi);
 5d6:	0e 94 ad 02 	call	0x55a	; 0x55a <TWI_MasterReadHandler>
 5da:	08 95       	ret
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
 5dc:	26 e0       	ldi	r18, 0x06	; 6
 5de:	fc 01       	movw	r30, r24
 5e0:	20 8f       	std	Z+24, r18	; 0x18
	twi->status = TWIM_STATUS_READY;
 5e2:	17 8a       	std	Z+23, r1	; 0x17
 5e4:	08 95       	ret

000005e6 <_exit>:
 5e6:	f8 94       	cli

000005e8 <__stop_program>:
 5e8:	ff cf       	rjmp	.-2      	; 0x5e8 <__stop_program>
