
RF.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000057a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000005ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  00802000  00802000  000005ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000620  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004edd  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002fcd  00000000  00000000  0000570d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000133c  00000000  00000000  000086da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b4  00000000  00000000  00009a18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000297c  00000000  00000000  00009ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016a8  00000000  00000000  0000c848  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  0000def0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
   8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
   c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  10:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  14:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  18:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  1c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  20:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  24:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  28:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  2c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  30:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  34:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  38:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  3c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  40:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  44:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  48:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  4c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  50:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  54:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  58:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  5c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  60:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  64:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  68:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  6c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  70:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  74:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  78:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  7c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  80:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  84:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  88:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  8c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  90:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  94:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  98:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  9c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  a0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  a4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  a8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  ac:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  b0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  b4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  b8:	0c 94 27 01 	jmp	0x24e	; 0x24e <__vector_46>
  bc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  c0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  c4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  c8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  cc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  d0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  d4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  d8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  dc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  e0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  e4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  e8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  ec:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  f0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  f4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  f8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  fc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 100:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 104:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 108:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 10c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 110:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 114:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 118:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 11c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 120:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 124:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 128:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 12c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 130:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 134:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 138:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 13c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 140:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 144:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 148:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 14c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 150:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 154:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 158:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 15c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 160:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 164:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 168:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 16c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 170:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 174:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 178:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 17c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 180:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 184:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 188:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 18c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 190:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 194:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 198:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 19c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1a0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1a4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1a8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1ac:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1b0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1b4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1b8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1bc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1c0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1c4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1c8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1cc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1d0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1d4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1d8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1dc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1e0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1e4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1e8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1ec:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1f0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1f4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1f8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e2       	ldi	r29, 0x2F	; 47
 206:	de bf       	out	0x3e, r29	; 62

00000208 <__do_clear_bss>:
 208:	20 e2       	ldi	r18, 0x20	; 32
 20a:	a0 e0       	ldi	r26, 0x00	; 0
 20c:	b0 e2       	ldi	r27, 0x20	; 32
 20e:	01 c0       	rjmp	.+2      	; 0x212 <.do_clear_bss_start>

00000210 <.do_clear_bss_loop>:
 210:	1d 92       	st	X+, r1

00000212 <.do_clear_bss_start>:
 212:	a2 32       	cpi	r26, 0x22	; 34
 214:	b2 07       	cpc	r27, r18
 216:	e1 f7       	brne	.-8      	; 0x210 <.do_clear_bss_loop>
 218:	0e 94 12 01 	call	0x224	; 0x224 <main>
 21c:	0c 94 bb 02 	jmp	0x576	; 0x576 <_exit>

00000220 <__bad_interrupt>:
 220:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000224 <main>:
#include "modules/rf.h"
#include "modules/avr_compiler.h"


int main (void) {
	led_init();
 224:	0e 94 4d 01 	call	0x29a	; 0x29a <led_init>
	rf_init_as_tx();
 228:	0e 94 b7 01 	call	0x36e	; 0x36e <rf_init_as_tx>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22c:	87 e8       	ldi	r24, 0x87	; 135
 22e:	93 e1       	ldi	r25, 0x13	; 19
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <main+0xc>
 234:	00 c0       	rjmp	.+0      	; 0x236 <main+0x12>
 236:	00 00       	nop
	while(1) {
		
		static unsigned char ucMsgCtr=0;
		
		_delay_ms(10);
		rf_send_byte(ucMsgCtr++);
 238:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	98 0f       	add	r25, r24
 240:	90 93 00 20 	sts	0x2000, r25	; 0x802000 <__DATA_REGION_ORIGIN__>
 244:	0e 94 db 01 	call	0x3b6	; 0x3b6 <rf_send_byte>
		led_toggle();
 248:	0e 94 51 01 	call	0x2a2	; 0x2a2 <led_toggle>
 24c:	ef cf       	rjmp	.-34     	; 0x22c <main+0x8>

0000024e <__vector_46>:
	return acc+128; 
}

/*! TWIE Master Interrupt vector. */
ISR(TWIE_TWIM_vect)
{
 24e:	1f 92       	push	r1
 250:	0f 92       	push	r0
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	0f 92       	push	r0
 256:	11 24       	eor	r1, r1
 258:	2f 93       	push	r18
 25a:	3f 93       	push	r19
 25c:	4f 93       	push	r20
 25e:	5f 93       	push	r21
 260:	6f 93       	push	r22
 262:	7f 93       	push	r23
 264:	8f 93       	push	r24
 266:	9f 93       	push	r25
 268:	af 93       	push	r26
 26a:	bf 93       	push	r27
 26c:	ef 93       	push	r30
 26e:	ff 93       	push	r31
	TWI_MasterInterruptHandler(&twiMaster);
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e2       	ldi	r25, 0x20	; 32
 274:	0e 94 a2 02 	call	0x544	; 0x544 <TWI_MasterInterruptHandler>
}
 278:	ff 91       	pop	r31
 27a:	ef 91       	pop	r30
 27c:	bf 91       	pop	r27
 27e:	af 91       	pop	r26
 280:	9f 91       	pop	r25
 282:	8f 91       	pop	r24
 284:	7f 91       	pop	r23
 286:	6f 91       	pop	r22
 288:	5f 91       	pop	r21
 28a:	4f 91       	pop	r20
 28c:	3f 91       	pop	r19
 28e:	2f 91       	pop	r18
 290:	0f 90       	pop	r0
 292:	0f be       	out	0x3f, r0	; 63
 294:	0f 90       	pop	r0
 296:	1f 90       	pop	r1
 298:	18 95       	reti

0000029a <led_init>:

#define LED_PORT PORTD
#define LED_bm	(1<<4)

void led_init(void){
	PORT_SetPinsAsOutput( &LED_PORT,LED_bm);
 29a:	80 e1       	ldi	r24, 0x10	; 16
 29c:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x700661>
 2a0:	08 95       	ret

000002a2 <led_toggle>:
}

void led_toggle(void){
	PORT_TogglePins(&LED_PORT,LED_bm);
 2a2:	80 e1       	ldi	r24, 0x10	; 16
 2a4:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <__TEXT_REGION_LENGTH__+0x700667>
 2a8:	08 95       	ret

000002aa <spi_init>:
	
	delay_us(2000);
}

void rf_clear_int_flags(){
	reg_write(STATUS_,0xff);
 2aa:	af 92       	push	r10
 2ac:	cf 92       	push	r12
 2ae:	ef 92       	push	r14
 2b0:	0f 93       	push	r16
 2b2:	e0 e4       	ldi	r30, 0x40	; 64
 2b4:	f6 e0       	ldi	r31, 0x06	; 6
 2b6:	82 e1       	ldi	r24, 0x12	; 18
 2b8:	81 83       	std	Z+1, r24	; 0x01
 2ba:	82 e0       	ldi	r24, 0x02	; 2
 2bc:	85 83       	std	Z+5, r24	; 0x05
 2be:	a1 2c       	mov	r10, r1
 2c0:	c1 2c       	mov	r12, r1
 2c2:	e1 2c       	mov	r14, r1
 2c4:	00 e0       	ldi	r16, 0x00	; 0
 2c6:	20 e0       	ldi	r18, 0x00	; 0
 2c8:	40 e4       	ldi	r20, 0x40	; 64
 2ca:	56 e0       	ldi	r21, 0x06	; 6
 2cc:	60 ec       	ldi	r22, 0xC0	; 192
 2ce:	78 e0       	ldi	r23, 0x08	; 8
 2d0:	8b e1       	ldi	r24, 0x1B	; 27
 2d2:	90 e2       	ldi	r25, 0x20	; 32
 2d4:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <SPI_MasterInit>
 2d8:	0f 91       	pop	r16
 2da:	ef 90       	pop	r14
 2dc:	cf 90       	pop	r12
 2de:	af 90       	pop	r10
 2e0:	08 95       	ret

000002e2 <reg_write>:
 2e2:	0f 93       	push	r16
 2e4:	1f 93       	push	r17
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
 2ea:	06 2f       	mov	r16, r22
 2ec:	c0 e4       	ldi	r28, 0x40	; 64
 2ee:	d6 e0       	ldi	r29, 0x06	; 6
 2f0:	12 e0       	ldi	r17, 0x02	; 2
 2f2:	1e 83       	std	Y+6, r17	; 0x06
 2f4:	68 2f       	mov	r22, r24
 2f6:	60 62       	ori	r22, 0x20	; 32
 2f8:	8b e1       	ldi	r24, 0x1B	; 27
 2fa:	90 e2       	ldi	r25, 0x20	; 32
 2fc:	0e 94 25 02 	call	0x44a	; 0x44a <SPI_MasterTransceiveByte>
 300:	60 2f       	mov	r22, r16
 302:	8b e1       	ldi	r24, 0x1B	; 27
 304:	90 e2       	ldi	r25, 0x20	; 32
 306:	0e 94 25 02 	call	0x44a	; 0x44a <SPI_MasterTransceiveByte>
 30a:	1d 83       	std	Y+5, r17	; 0x05
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	1f 91       	pop	r17
 312:	0f 91       	pop	r16
 314:	08 95       	ret

00000316 <payload_write>:
 316:	ef 92       	push	r14
 318:	ff 92       	push	r15
 31a:	0f 93       	push	r16
 31c:	1f 93       	push	r17
 31e:	cf 93       	push	r28
 320:	df 93       	push	r29
 322:	7c 01       	movw	r14, r24
 324:	16 2f       	mov	r17, r22
 326:	82 e0       	ldi	r24, 0x02	; 2
 328:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
 32c:	60 ea       	ldi	r22, 0xA0	; 160
 32e:	8b e1       	ldi	r24, 0x1B	; 27
 330:	90 e2       	ldi	r25, 0x20	; 32
 332:	0e 94 25 02 	call	0x44a	; 0x44a <SPI_MasterTransceiveByte>
 336:	11 23       	and	r17, r17
 338:	81 f0       	breq	.+32     	; 0x35a <payload_write+0x44>
 33a:	e7 01       	movw	r28, r14
 33c:	11 50       	subi	r17, 0x01	; 1
 33e:	01 2f       	mov	r16, r17
 340:	10 e0       	ldi	r17, 0x00	; 0
 342:	0f 5f       	subi	r16, 0xFF	; 255
 344:	1f 4f       	sbci	r17, 0xFF	; 255
 346:	0e 0d       	add	r16, r14
 348:	1f 1d       	adc	r17, r15
 34a:	69 91       	ld	r22, Y+
 34c:	8b e1       	ldi	r24, 0x1B	; 27
 34e:	90 e2       	ldi	r25, 0x20	; 32
 350:	0e 94 25 02 	call	0x44a	; 0x44a <SPI_MasterTransceiveByte>
 354:	c0 17       	cp	r28, r16
 356:	d1 07       	cpc	r29, r17
 358:	c1 f7       	brne	.-16     	; 0x34a <payload_write+0x34>
 35a:	82 e0       	ldi	r24, 0x02	; 2
 35c:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
 364:	1f 91       	pop	r17
 366:	0f 91       	pop	r16
 368:	ff 90       	pop	r15
 36a:	ef 90       	pop	r14
 36c:	08 95       	ret

0000036e <rf_init_as_tx>:
 36e:	8b e7       	ldi	r24, 0x7B	; 123
 370:	95 e1       	ldi	r25, 0x15	; 21
 372:	01 97       	sbiw	r24, 0x01	; 1
 374:	f1 f7       	brne	.-4      	; 0x372 <rf_init_as_tx+0x4>
 376:	00 c0       	rjmp	.+0      	; 0x378 <rf_init_as_tx+0xa>
 378:	00 00       	nop
 37a:	0e 94 55 01 	call	0x2aa	; 0x2aa <spi_init>
 37e:	e0 e4       	ldi	r30, 0x40	; 64
 380:	f6 e0       	ldi	r31, 0x06	; 6
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	81 83       	std	Z+1, r24	; 0x01
 386:	86 83       	std	Z+6, r24	; 0x06
 388:	6a e2       	ldi	r22, 0x2A	; 42
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <reg_write>
 390:	60 e0       	ldi	r22, 0x00	; 0
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	0e 94 71 01 	call	0x2e2	; 0x2e2 <reg_write>
 398:	68 e0       	ldi	r22, 0x08	; 8
 39a:	86 e0       	ldi	r24, 0x06	; 6
 39c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <reg_write>
 3a0:	63 e1       	ldi	r22, 0x13	; 19
 3a2:	85 e0       	ldi	r24, 0x05	; 5
 3a4:	0e 94 71 01 	call	0x2e2	; 0x2e2 <reg_write>
 3a8:	87 ee       	ldi	r24, 0xE7	; 231
 3aa:	93 e0       	ldi	r25, 0x03	; 3
 3ac:	01 97       	sbiw	r24, 0x01	; 1
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <rf_init_as_tx+0x3e>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <rf_init_as_tx+0x44>
 3b2:	00 00       	nop
 3b4:	08 95       	ret

000003b6 <rf_send_byte>:
}

void rf_send_byte(unsigned char ucByte) {
 3b6:	ff 92       	push	r15
 3b8:	0f 93       	push	r16
 3ba:	1f 93       	push	r17
 3bc:	cf 93       	push	r28
 3be:	df 93       	push	r29
 3c0:	1f 92       	push	r1
 3c2:	cd b7       	in	r28, 0x3d	; 61
 3c4:	de b7       	in	r29, 0x3e	; 62
 3c6:	89 83       	std	Y+1, r24	; 0x01
	}
};

void set_CE(unsigned char uset_CState){
	if (uset_CState) {
		PORT_SetPins( &RF_PORT,RF_CE_bm);
 3c8:	00 e4       	ldi	r16, 0x40	; 64
 3ca:	16 e0       	ldi	r17, 0x06	; 6
 3cc:	ff 24       	eor	r15, r15
 3ce:	f3 94       	inc	r15
 3d0:	f8 01       	movw	r30, r16
 3d2:	f5 82       	std	Z+5, r15	; 0x05
void rf_send_byte(unsigned char ucByte) {
	unsigned char ucRxAddress = 19;
	
	set_CE(1);
	//address_write(&ucRxAddress, 1);
	payload_write(&ucByte, 1);
 3d4:	61 e0       	ldi	r22, 0x01	; 1
 3d6:	ce 01       	movw	r24, r28
 3d8:	01 96       	adiw	r24, 0x01	; 1
 3da:	0e 94 8b 01 	call	0x316	; 0x316 <payload_write>
void set_CE(unsigned char uset_CState){
	if (uset_CState) {
		PORT_SetPins( &RF_PORT,RF_CE_bm);
	}
	else {
		PORT_ClearPins( &RF_PORT,RF_CE_bm);
 3de:	f8 01       	movw	r30, r16
 3e0:	f6 82       	std	Z+6, r15	; 0x06
	
	set_CE(1);
	//address_write(&ucRxAddress, 1);
	payload_write(&ucByte, 1);
	set_CE(0);
}
 3e2:	0f 90       	pop	r0
 3e4:	df 91       	pop	r29
 3e6:	cf 91       	pop	r28
 3e8:	1f 91       	pop	r17
 3ea:	0f 91       	pop	r16
 3ec:	ff 90       	pop	r15
 3ee:	08 95       	ret

000003f0 <SPI_MasterInit>:
	data = spi->dataPacket->transmitData[0];
	spi->module->DATA = data;

	/* Successs */
	return (SPI_OK);
}
 3f0:	af 92       	push	r10
 3f2:	cf 92       	push	r12
 3f4:	ef 92       	push	r14
 3f6:	0f 93       	push	r16
 3f8:	fc 01       	movw	r30, r24
 3fa:	60 83       	st	Z, r22
 3fc:	71 83       	std	Z+1, r23	; 0x01
 3fe:	42 83       	std	Z+2, r20	; 0x02
 400:	53 83       	std	Z+3, r21	; 0x03
 402:	14 82       	std	Z+4, r1	; 0x04
 404:	c1 10       	cpse	r12, r1
 406:	02 c0       	rjmp	.+4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	01 c0       	rjmp	.+2      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40c:	80 e8       	ldi	r24, 0x80	; 128
 40e:	9a 2d       	mov	r25, r10
 410:	90 64       	ori	r25, 0x40	; 64
 412:	a9 2e       	mov	r10, r25
 414:	a8 2a       	or	r10, r24
 416:	21 11       	cpse	r18, r1
 418:	02 c0       	rjmp	.+4      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	01 c0       	rjmp	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 41e:	80 e2       	ldi	r24, 0x20	; 32
 420:	a8 2a       	or	r10, r24
 422:	00 61       	ori	r16, 0x10	; 16
 424:	0a 29       	or	r16, r10
 426:	db 01       	movw	r26, r22
 428:	0c 93       	st	X, r16
 42a:	a0 81       	ld	r26, Z
 42c:	b1 81       	ldd	r27, Z+1	; 0x01
 42e:	11 96       	adiw	r26, 0x01	; 1
 430:	ec 92       	st	X, r14
 432:	15 82       	std	Z+5, r1	; 0x05
 434:	16 82       	std	Z+6, r1	; 0x06
 436:	02 80       	ldd	r0, Z+2	; 0x02
 438:	f3 81       	ldd	r31, Z+3	; 0x03
 43a:	e0 2d       	mov	r30, r0
 43c:	80 ea       	ldi	r24, 0xA0	; 160
 43e:	81 83       	std	Z+1, r24	; 0x01
 440:	0f 91       	pop	r16
 442:	ef 90       	pop	r14
 444:	cf 90       	pop	r12
 446:	af 90       	pop	r10
 448:	08 95       	ret

0000044a <SPI_MasterTransceiveByte>:
 *  \return           Data received from slave.
 */
uint8_t SPI_MasterTransceiveByte(SPI_Master_t *spi, uint8_t TXdata)
{
	/* Send pattern. */
	spi->module->DATA = TXdata;
 44a:	dc 01       	movw	r26, r24
 44c:	ed 91       	ld	r30, X+
 44e:	fc 91       	ld	r31, X
 450:	11 97       	sbiw	r26, 0x01	; 1
 452:	63 83       	std	Z+3, r22	; 0x03

	/* Wait for transmission complete. */
	while(!(spi->module->STATUS & SPI_IF_bm)) {}
 454:	ed 91       	ld	r30, X+
 456:	fc 91       	ld	r31, X
 458:	82 81       	ldd	r24, Z+2	; 0x02
 45a:	88 23       	and	r24, r24
 45c:	ec f7       	brge	.-6      	; 0x458 <SPI_MasterTransceiveByte+0xe>
	/* Read received data. */
	uint8_t result = spi->module->DATA;
 45e:	83 81       	ldd	r24, Z+3	; 0x03

	return(result);
}
 460:	08 95       	ret

00000462 <TWI_MasterArbitrationLostBusErrorHandler>:
 *  Handles TWI responses to lost arbitration and bus error.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi)
{
 462:	fc 01       	movw	r30, r24
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
 464:	a0 81       	ld	r26, Z
 466:	b1 81       	ldd	r27, Z+1	; 0x01
 468:	14 96       	adiw	r26, 0x04	; 4
 46a:	9c 91       	ld	r25, X
 46c:	14 97       	sbiw	r26, 0x04	; 4

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
 46e:	92 ff       	sbrs	r25, 2
 470:	03 c0       	rjmp	.+6      	; 0x478 <TWI_MasterArbitrationLostBusErrorHandler+0x16>
		twi->result = TWIM_RESULT_BUS_ERROR;
 472:	84 e0       	ldi	r24, 0x04	; 4
 474:	80 8f       	std	Z+24, r24	; 0x18
 476:	02 c0       	rjmp	.+4      	; 0x47c <TWI_MasterArbitrationLostBusErrorHandler+0x1a>
	}
	/* If arbitration lost. */
	else {
		twi->result = TWIM_RESULT_ARBITRATION_LOST;
 478:	83 e0       	ldi	r24, 0x03	; 3
 47a:	80 8f       	std	Z+24, r24	; 0x18
	}

	/* Clear interrupt flag. */
	twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
 47c:	98 60       	ori	r25, 0x08	; 8
 47e:	14 96       	adiw	r26, 0x04	; 4
 480:	9c 93       	st	X, r25

	twi->status = TWIM_STATUS_READY;
 482:	17 8a       	std	Z+23, r1	; 0x17
 484:	08 95       	ret

00000486 <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi)
{
 486:	cf 93       	push	r28
 488:	df 93       	push	r29
 48a:	fc 01       	movw	r30, r24
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite  = twi->bytesToWrite;
 48c:	93 89       	ldd	r25, Z+19	; 0x13
	uint8_t bytesToRead   = twi->bytesToRead;
 48e:	24 89       	ldd	r18, Z+20	; 0x14

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
 490:	a0 81       	ld	r26, Z
 492:	b1 81       	ldd	r27, Z+1	; 0x01
 494:	14 96       	adiw	r26, 0x04	; 4
 496:	8c 91       	ld	r24, X
 498:	14 97       	sbiw	r26, 0x04	; 4
 49a:	84 ff       	sbrs	r24, 4
 49c:	07 c0       	rjmp	.+14     	; 0x4ac <TWI_MasterWriteHandler+0x26>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 49e:	83 e0       	ldi	r24, 0x03	; 3
 4a0:	13 96       	adiw	r26, 0x03	; 3
 4a2:	8c 93       	st	X, r24
		twi->result = TWIM_RESULT_NACK_RECEIVED;
 4a4:	85 e0       	ldi	r24, 0x05	; 5
 4a6:	80 8f       	std	Z+24, r24	; 0x18
		twi->status = TWIM_STATUS_READY;
 4a8:	17 8a       	std	Z+23, r1	; 0x17
 4aa:	1c c0       	rjmp	.+56     	; 0x4e4 <TWI_MasterWriteHandler+0x5e>
	}

	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
 4ac:	85 89       	ldd	r24, Z+21	; 0x15
 4ae:	89 17       	cp	r24, r25
 4b0:	58 f4       	brcc	.+22     	; 0x4c8 <TWI_MasterWriteHandler+0x42>
		uint8_t data = twi->writeData[twi->bytesWritten];
 4b2:	85 89       	ldd	r24, Z+21	; 0x15
 4b4:	ef 01       	movw	r28, r30
 4b6:	c8 0f       	add	r28, r24
 4b8:	d1 1d       	adc	r29, r1
 4ba:	8b 81       	ldd	r24, Y+3	; 0x03
		twi->interface->MASTER.DATA = data;
 4bc:	17 96       	adiw	r26, 0x07	; 7
 4be:	8c 93       	st	X, r24
		++twi->bytesWritten;
 4c0:	85 89       	ldd	r24, Z+21	; 0x15
 4c2:	8f 5f       	subi	r24, 0xFF	; 255
 4c4:	85 8b       	std	Z+21, r24	; 0x15
 4c6:	0e c0       	rjmp	.+28     	; 0x4e4 <TWI_MasterWriteHandler+0x5e>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
 4c8:	86 89       	ldd	r24, Z+22	; 0x16
 4ca:	82 17       	cp	r24, r18
 4cc:	28 f4       	brcc	.+10     	; 0x4d8 <TWI_MasterWriteHandler+0x52>
		uint8_t readAddress = twi->address | 0x01;
 4ce:	82 81       	ldd	r24, Z+2	; 0x02
 4d0:	81 60       	ori	r24, 0x01	; 1
		twi->interface->MASTER.ADDR = readAddress;
 4d2:	16 96       	adiw	r26, 0x06	; 6
 4d4:	8c 93       	st	X, r24
 4d6:	06 c0       	rjmp	.+12     	; 0x4e4 <TWI_MasterWriteHandler+0x5e>
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 4d8:	83 e0       	ldi	r24, 0x03	; 3
 4da:	13 96       	adiw	r26, 0x03	; 3
 4dc:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
 4e2:	17 8a       	std	Z+23, r1	; 0x17
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_OK);
	}
}
 4e4:	df 91       	pop	r29
 4e6:	cf 91       	pop	r28
 4e8:	08 95       	ret

000004ea <TWI_MasterReadHandler>:
 *  reading bytes from the TWI slave.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi)
{
 4ea:	fc 01       	movw	r30, r24
	/* Fetch data if bytes to be read. */
	if (twi->bytesRead < TWIM_READ_BUFFER_SIZE) {
 4ec:	86 89       	ldd	r24, Z+22	; 0x16
 4ee:	88 30       	cpi	r24, 0x08	; 8
 4f0:	70 f4       	brcc	.+28     	; 0x50e <TWI_MasterReadHandler+0x24>
		uint8_t data = twi->interface->MASTER.DATA;
 4f2:	a0 81       	ld	r26, Z
 4f4:	b1 81       	ldd	r27, Z+1	; 0x01
 4f6:	17 96       	adiw	r26, 0x07	; 7
 4f8:	8c 91       	ld	r24, X
		twi->readData[twi->bytesRead] = data;
 4fa:	96 89       	ldd	r25, Z+22	; 0x16
 4fc:	df 01       	movw	r26, r30
 4fe:	a9 0f       	add	r26, r25
 500:	b1 1d       	adc	r27, r1
 502:	1b 96       	adiw	r26, 0x0b	; 11
 504:	8c 93       	st	X, r24
		twi->bytesRead++;
 506:	86 89       	ldd	r24, Z+22	; 0x16
 508:	8f 5f       	subi	r24, 0xFF	; 255
 50a:	86 8b       	std	Z+22, r24	; 0x16
 50c:	08 c0       	rjmp	.+16     	; 0x51e <TWI_MasterReadHandler+0x34>
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 50e:	a0 81       	ld	r26, Z
 510:	b1 81       	ldd	r27, Z+1	; 0x01
 512:	83 e0       	ldi	r24, 0x03	; 3
 514:	13 96       	adiw	r26, 0x03	; 3
 516:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
 518:	82 e0       	ldi	r24, 0x02	; 2
 51a:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
 51c:	17 8a       	std	Z+23, r1	; 0x17
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_BUFFER_OVERFLOW);
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;
 51e:	94 89       	ldd	r25, Z+20	; 0x14

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
 520:	86 89       	ldd	r24, Z+22	; 0x16
 522:	89 17       	cp	r24, r25
 524:	30 f4       	brcc	.+12     	; 0x532 <TWI_MasterReadHandler+0x48>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
 526:	01 90       	ld	r0, Z+
 528:	f0 81       	ld	r31, Z
 52a:	e0 2d       	mov	r30, r0
 52c:	82 e0       	ldi	r24, 0x02	; 2
 52e:	83 83       	std	Z+3, r24	; 0x03
 530:	08 95       	ret
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
 532:	a0 81       	ld	r26, Z
 534:	b1 81       	ldd	r27, Z+1	; 0x01
 536:	87 e0       	ldi	r24, 0x07	; 7
 538:	13 96       	adiw	r26, 0x03	; 3
 53a:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
 540:	17 8a       	std	Z+23, r1	; 0x17
 542:	08 95       	ret

00000544 <TWI_MasterInterruptHandler>:
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
 544:	dc 01       	movw	r26, r24
 546:	ed 91       	ld	r30, X+
 548:	fc 91       	ld	r31, X
 54a:	24 81       	ldd	r18, Z+4	; 0x04

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
 54c:	32 2f       	mov	r19, r18
 54e:	3c 70       	andi	r19, 0x0C	; 12
 550:	19 f0       	breq	.+6      	; 0x558 <TWI_MasterInterruptHandler+0x14>
	    (currentStatus & TWI_MASTER_BUSERR_bm)) {

		TWI_MasterArbitrationLostBusErrorHandler(twi);
 552:	0e 94 31 02 	call	0x462	; 0x462 <TWI_MasterArbitrationLostBusErrorHandler>
 556:	08 95       	ret
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
 558:	26 ff       	sbrs	r18, 6
 55a:	03 c0       	rjmp	.+6      	; 0x562 <TWI_MasterInterruptHandler+0x1e>
		TWI_MasterWriteHandler(twi);
 55c:	0e 94 43 02 	call	0x486	; 0x486 <TWI_MasterWriteHandler>
 560:	08 95       	ret
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
 562:	22 23       	and	r18, r18
 564:	1c f4       	brge	.+6      	; 0x56c <TWI_MasterInterruptHandler+0x28>
		TWI_MasterReadHandler(twi);
 566:	0e 94 75 02 	call	0x4ea	; 0x4ea <TWI_MasterReadHandler>
 56a:	08 95       	ret
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
 56c:	26 e0       	ldi	r18, 0x06	; 6
 56e:	fc 01       	movw	r30, r24
 570:	20 8f       	std	Z+24, r18	; 0x18
	twi->status = TWIM_STATUS_READY;
 572:	17 8a       	std	Z+23, r1	; 0x17
 574:	08 95       	ret

00000576 <_exit>:
 576:	f8 94       	cli

00000578 <__stop_program>:
 578:	ff cf       	rjmp	.-2      	; 0x578 <__stop_program>
