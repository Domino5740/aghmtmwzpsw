
RF.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  0000094a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  00802000  00802000  0000094a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000094a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000097c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000340  00000000  00000000  000009bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006a6e  00000000  00000000  00000cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000030dd  00000000  00000000  0000776a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002218  00000000  00000000  0000a847  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b84  00000000  00000000  0000ca60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003494  00000000  00000000  0000d5e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003757  00000000  00000000  00010a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e0  00000000  00000000  000141cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
   8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
   c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  10:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  14:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  18:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  1c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  20:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  24:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  28:	0c 94 12 01 	jmp	0x224	; 0x224 <__vector_10>
  2c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  30:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  34:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  38:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  3c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  40:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  44:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  48:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  4c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  50:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  54:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  58:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  5c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  60:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  64:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  68:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  6c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  70:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  74:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  78:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  7c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  80:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  84:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  88:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  8c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  90:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  94:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  98:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  9c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  a0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  a4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  a8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  ac:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  b0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  b4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  b8:	0c 94 c0 01 	jmp	0x380	; 0x380 <__vector_46>
  bc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  c0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  c4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  c8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  cc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  d0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  d4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  d8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  dc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  e0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  e4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  e8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  ec:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  f0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  f4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  f8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  fc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 100:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 104:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 108:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 10c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 110:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 114:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 118:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 11c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 120:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 124:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 128:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 12c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 130:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 134:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 138:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 13c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 140:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 144:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 148:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 14c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 150:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 154:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 158:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 15c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 160:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 164:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 168:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 16c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 170:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 174:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 178:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 17c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 180:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 184:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 188:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 18c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 190:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 194:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 198:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 19c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1a0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1a4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1a8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1ac:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1b0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1b4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1b8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1bc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1c0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1c4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1c8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1cc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1d0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1d4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1d8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1dc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1e0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1e4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1e8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1ec:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1f0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1f4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1f8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e2       	ldi	r29, 0x2F	; 47
 206:	de bf       	out	0x3e, r29	; 62

00000208 <__do_clear_bss>:
 208:	20 e2       	ldi	r18, 0x20	; 32
 20a:	a0 e0       	ldi	r26, 0x00	; 0
 20c:	b0 e2       	ldi	r27, 0x20	; 32
 20e:	01 c0       	rjmp	.+2      	; 0x212 <.do_clear_bss_start>

00000210 <.do_clear_bss_loop>:
 210:	1d 92       	st	X+, r1

00000212 <.do_clear_bss_start>:
 212:	a2 32       	cpi	r26, 0x22	; 34
 214:	b2 07       	cpc	r27, r18
 216:	e1 f7       	brne	.-8      	; 0x210 <.do_clear_bss_loop>
 218:	0e 94 38 01 	call	0x270	; 0x270 <main>
 21c:	0c 94 69 04 	jmp	0x8d2	; 0x8d2 <_exit>

00000220 <__bad_interrupt>:
 220:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000224 <__vector_10>:
#include "modules/rf.h"
#include "modules/avr_compiler.h"
#include "modules/nrf24L01.h"
#include <avr/sleep.h>

ISR(RTC_OVF_vect) { rf_send_byte(acc_read()); }
 224:	1f 92       	push	r1
 226:	0f 92       	push	r0
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	0f 92       	push	r0
 22c:	11 24       	eor	r1, r1
 22e:	2f 93       	push	r18
 230:	3f 93       	push	r19
 232:	4f 93       	push	r20
 234:	5f 93       	push	r21
 236:	6f 93       	push	r22
 238:	7f 93       	push	r23
 23a:	8f 93       	push	r24
 23c:	9f 93       	push	r25
 23e:	af 93       	push	r26
 240:	bf 93       	push	r27
 242:	ef 93       	push	r30
 244:	ff 93       	push	r31
 246:	0e 94 af 01 	call	0x35e	; 0x35e <acc_read>
 24a:	0e 94 31 03 	call	0x662	; 0x662 <rf_send_byte>
 24e:	ff 91       	pop	r31
 250:	ef 91       	pop	r30
 252:	bf 91       	pop	r27
 254:	af 91       	pop	r26
 256:	9f 91       	pop	r25
 258:	8f 91       	pop	r24
 25a:	7f 91       	pop	r23
 25c:	6f 91       	pop	r22
 25e:	5f 91       	pop	r21
 260:	4f 91       	pop	r20
 262:	3f 91       	pop	r19
 264:	2f 91       	pop	r18
 266:	0f 90       	pop	r0
 268:	0f be       	out	0x3f, r0	; 63
 26a:	0f 90       	pop	r0
 26c:	1f 90       	pop	r1
 26e:	18 95       	reti

00000270 <main>:
int main (void) {
	rf_init_as_tx();
 270:	0e 94 0d 03 	call	0x61a	; 0x61a <rf_init_as_tx>
	acc_init();
 274:	0e 94 94 01 	call	0x328	; 0x328 <acc_init>
	RTC.PER  = 10;
 278:	e0 e0       	ldi	r30, 0x00	; 0
 27a:	f4 e0       	ldi	r31, 0x04	; 4
 27c:	8a e0       	ldi	r24, 0x0A	; 10
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	82 87       	std	Z+10, r24	; 0x0a
 282:	93 87       	std	Z+11, r25	; 0x0b
	RTC.CNT = 0;
 284:	10 86       	std	Z+8, r1	; 0x08
 286:	11 86       	std	Z+9, r1	; 0x09
	RTC.CTRL = RTC_PRESCALER_DIV1_gc;
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	80 83       	st	Z, r24
	RTC.INTCTRL = RTC_OVFINTLVL0_bm;
 28c:	82 83       	std	Z+2, r24	; 0x02
	CLK.RTCCTRL = CLK_RTCEN_bm | CLK_RTCSRC_ULP_gc;
 28e:	80 93 43 00 	sts	0x0043, r24	; 0x800043 <__TEXT_REGION_LENGTH__+0x700043>
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
 292:	e0 ea       	ldi	r30, 0xA0	; 160
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	82 81       	ldd	r24, Z+2	; 0x02
 298:	81 60       	ori	r24, 0x01	; 1
 29a:	82 83       	std	Z+2, r24	; 0x02
	sei();
 29c:	78 94       	sei
	set_sleep_mode(SLEEP_MODE_PWR_SAVE);
 29e:	e8 e4       	ldi	r30, 0x48	; 72
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	80 81       	ld	r24, Z
 2a4:	81 7f       	andi	r24, 0xF1	; 241
 2a6:	86 60       	ori	r24, 0x06	; 6
 2a8:	80 83       	st	Z, r24
	sleep_enable();
 2aa:	80 81       	ld	r24, Z
 2ac:	81 60       	ori	r24, 0x01	; 1
 2ae:	80 83       	st	Z, r24
	while(1){
		sleep_cpu();
 2b0:	88 95       	sleep
 2b2:	fe cf       	rjmp	.-4      	; 0x2b0 <main+0x40>

000002b4 <LIS3DH_ReadReg>:

TWI_Master_t twiMaster; 

uint8_t Buffer[1];

u8_t LIS3DH_ReadReg(u8_t Addr, u8_t* Data) {
 2b4:	0f 93       	push	r16
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	eb 01       	movw	r28, r22
	
	Buffer[0]=Addr;
 2bc:	80 93 1a 20 	sts	0x201A, r24	; 0x80201a <Buffer>
	TWI_MasterWriteRead(&twiMaster,SLAVE_ADDRESS,Buffer,1,1);
 2c0:	01 e0       	ldi	r16, 0x01	; 1
 2c2:	21 e0       	ldi	r18, 0x01	; 1
 2c4:	4a e1       	ldi	r20, 0x1A	; 26
 2c6:	50 e2       	ldi	r21, 0x20	; 32
 2c8:	69 e1       	ldi	r22, 0x19	; 25
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e2       	ldi	r25, 0x20	; 32
 2ce:	0e 94 9b 03 	call	0x736	; 0x736 <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY) {	}
 2d2:	e1 e0       	ldi	r30, 0x01	; 1
 2d4:	f0 e2       	ldi	r31, 0x20	; 32
 2d6:	87 89       	ldd	r24, Z+23	; 0x17
 2d8:	81 11       	cpse	r24, r1
 2da:	fd cf       	rjmp	.-6      	; 0x2d6 <LIS3DH_ReadReg+0x22>
	Data[0]=twiMaster.readData[0];
 2dc:	80 91 0c 20 	lds	r24, 0x200C	; 0x80200c <twiMaster+0xb>
 2e0:	88 83       	st	Y, r24
	
	return 1;
}
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	0f 91       	pop	r16
 2ea:	08 95       	ret

000002ec <LIS3DH_WriteReg>:

u8_t LIS3DH_WriteReg(u8_t Addr, u8_t Data) {
 2ec:	0f 93       	push	r16
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	00 d0       	rcall	.+0      	; 0x2f4 <LIS3DH_WriteReg+0x8>
 2f4:	cd b7       	in	r28, 0x3d	; 61
 2f6:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t Buffer[2];
		
	Buffer[0]=Addr;
 2f8:	89 83       	std	Y+1, r24	; 0x01
	Buffer[1]=Data;
 2fa:	6a 83       	std	Y+2, r22	; 0x02
	TWI_MasterWriteRead(&twiMaster,SLAVE_ADDRESS,&Buffer[0],2,0);
 2fc:	00 e0       	ldi	r16, 0x00	; 0
 2fe:	22 e0       	ldi	r18, 0x02	; 2
 300:	ae 01       	movw	r20, r28
 302:	4f 5f       	subi	r20, 0xFF	; 255
 304:	5f 4f       	sbci	r21, 0xFF	; 255
 306:	69 e1       	ldi	r22, 0x19	; 25
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	90 e2       	ldi	r25, 0x20	; 32
 30c:	0e 94 9b 03 	call	0x736	; 0x736 <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY) {	}
 310:	e1 e0       	ldi	r30, 0x01	; 1
 312:	f0 e2       	ldi	r31, 0x20	; 32
 314:	87 89       	ldd	r24, Z+23	; 0x17
 316:	81 11       	cpse	r24, r1
 318:	fd cf       	rjmp	.-6      	; 0x314 <LIS3DH_WriteReg+0x28>
	
	return 1;
}
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	0f 90       	pop	r0
 31e:	0f 90       	pop	r0
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	0f 91       	pop	r16
 326:	08 95       	ret

00000328 <acc_init>:

void acc_init(void){

	TWI_MasterInit(&twiMaster,&TWIE,TWI_MASTER_INTLVL_HI_gc,TWI_BAUDSETTING); //TWI_MASTER_INTLVL_LO_gc
 328:	20 e0       	ldi	r18, 0x00	; 0
 32a:	40 ec       	ldi	r20, 0xC0	; 192
 32c:	60 ea       	ldi	r22, 0xA0	; 160
 32e:	74 e0       	ldi	r23, 0x04	; 4
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e2       	ldi	r25, 0x20	; 32
 334:	0e 94 8a 03 	call	0x714	; 0x714 <TWI_MasterInit>
	PMIC.CTRL |= PMIC_HILVLEN_bm;//PMIC_LOLVLEN_bm
 338:	e0 ea       	ldi	r30, 0xA0	; 160
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	82 81       	ldd	r24, Z+2	; 0x02
 33e:	84 60       	ori	r24, 0x04	; 4
 340:	82 83       	std	Z+2, r24	; 0x02
	
	sei();
 342:	78 94       	sei
	
	// ACC
	LIS3DH_SetODR(LIS3DH_ODR_400Hz);
 344:	87 e0       	ldi	r24, 0x07	; 7
 346:	0e 94 e6 01 	call	0x3cc	; 0x3cc <LIS3DH_SetODR>
	LIS3DH_SetMode(LIS3DH_NORMAL);
 34a:	82 e0       	ldi	r24, 0x02	; 2
 34c:	0e 94 0c 02 	call	0x418	; 0x418 <LIS3DH_SetMode>
	LIS3DH_SetFullScale(LIS3DH_FULLSCALE_2);
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	0e 94 85 02 	call	0x50a	; 0x50a <LIS3DH_SetFullScale>
	LIS3DH_SetAxis(LIS3DH_X_ENABLE | LIS3DH_Y_ENABLE | LIS3DH_Z_ENABLE);
 356:	87 e0       	ldi	r24, 0x07	; 7
 358:	0e 94 62 02 	call	0x4c4	; 0x4c4 <LIS3DH_SetAxis>
 35c:	08 95       	ret

0000035e <acc_read>:
};

unsigned char acc_read(void){
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	1f 92       	push	r1
 364:	cd b7       	in	r28, 0x3d	; 61
 366:	de b7       	in	r29, 0x3e	; 62
	unsigned char acc;
	LIS3DH_ReadReg(LIS3DH_OUT_Z_H, &acc);	
 368:	be 01       	movw	r22, r28
 36a:	6f 5f       	subi	r22, 0xFF	; 255
 36c:	7f 4f       	sbci	r23, 0xFF	; 255
 36e:	8d e2       	ldi	r24, 0x2D	; 45
 370:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LIS3DH_ReadReg>
	return acc+128; 
 374:	89 81       	ldd	r24, Y+1	; 0x01
}
 376:	80 58       	subi	r24, 0x80	; 128
 378:	0f 90       	pop	r0
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	08 95       	ret

00000380 <__vector_46>:

/*! TWIE Master Interrupt vector. */
ISR(TWIE_TWIM_vect)
{
 380:	1f 92       	push	r1
 382:	0f 92       	push	r0
 384:	0f b6       	in	r0, 0x3f	; 63
 386:	0f 92       	push	r0
 388:	11 24       	eor	r1, r1
 38a:	2f 93       	push	r18
 38c:	3f 93       	push	r19
 38e:	4f 93       	push	r20
 390:	5f 93       	push	r21
 392:	6f 93       	push	r22
 394:	7f 93       	push	r23
 396:	8f 93       	push	r24
 398:	9f 93       	push	r25
 39a:	af 93       	push	r26
 39c:	bf 93       	push	r27
 39e:	ef 93       	push	r30
 3a0:	ff 93       	push	r31
	TWI_MasterInterruptHandler(&twiMaster);
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	90 e2       	ldi	r25, 0x20	; 32
 3a6:	0e 94 50 04 	call	0x8a0	; 0x8a0 <TWI_MasterInterruptHandler>
}
 3aa:	ff 91       	pop	r31
 3ac:	ef 91       	pop	r30
 3ae:	bf 91       	pop	r27
 3b0:	af 91       	pop	r26
 3b2:	9f 91       	pop	r25
 3b4:	8f 91       	pop	r24
 3b6:	7f 91       	pop	r23
 3b8:	6f 91       	pop	r22
 3ba:	5f 91       	pop	r21
 3bc:	4f 91       	pop	r20
 3be:	3f 91       	pop	r19
 3c0:	2f 91       	pop	r18
 3c2:	0f 90       	pop	r0
 3c4:	0f be       	out	0x3f, r0	; 63
 3c6:	0f 90       	pop	r0
 3c8:	1f 90       	pop	r1
 3ca:	18 95       	reti

000003cc <LIS3DH_SetODR>:
    return MEMS_ERROR;
  
  *buff = (i8_t)( valueH );
  
  return MEMS_SUCCESS;  
}
 3cc:	1f 93       	push	r17
 3ce:	cf 93       	push	r28
 3d0:	df 93       	push	r29
 3d2:	1f 92       	push	r1
 3d4:	cd b7       	in	r28, 0x3d	; 61
 3d6:	de b7       	in	r29, 0x3e	; 62
 3d8:	18 2f       	mov	r17, r24
 3da:	be 01       	movw	r22, r28
 3dc:	6f 5f       	subi	r22, 0xFF	; 255
 3de:	7f 4f       	sbci	r23, 0xFF	; 255
 3e0:	80 e2       	ldi	r24, 0x20	; 32
 3e2:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LIS3DH_ReadReg>
 3e6:	88 23       	and	r24, r24
 3e8:	81 f0       	breq	.+32     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3ea:	69 81       	ldd	r22, Y+1	; 0x01
 3ec:	6f 70       	andi	r22, 0x0F	; 15
 3ee:	20 e1       	ldi	r18, 0x10	; 16
 3f0:	12 9f       	mul	r17, r18
 3f2:	c0 01       	movw	r24, r0
 3f4:	11 24       	eor	r1, r1
 3f6:	68 2b       	or	r22, r24
 3f8:	69 83       	std	Y+1, r22	; 0x01
 3fa:	80 e2       	ldi	r24, 0x20	; 32
 3fc:	0e 94 76 01 	call	0x2ec	; 0x2ec <LIS3DH_WriteReg>
 400:	91 e0       	ldi	r25, 0x01	; 1
 402:	81 11       	cpse	r24, r1
 404:	03 c0       	rjmp	.+6      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	01 c0       	rjmp	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	89 2f       	mov	r24, r25
 40e:	0f 90       	pop	r0
 410:	df 91       	pop	r29
 412:	cf 91       	pop	r28
 414:	1f 91       	pop	r17
 416:	08 95       	ret

00000418 <LIS3DH_SetMode>:
* Description    : Sets LIS3DH Operating Mode
* Input          : Modality (LIS3DH_NORMAL, LIS3DH_LOW_POWER, LIS3DH_POWER_DOWN)
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetMode(LIS3DH_Mode_t md) {
 418:	1f 93       	push	r17
 41a:	cf 93       	push	r28
 41c:	df 93       	push	r29
 41e:	00 d0       	rcall	.+0      	; 0x420 <LIS3DH_SetMode+0x8>
 420:	cd b7       	in	r28, 0x3d	; 61
 422:	de b7       	in	r29, 0x3e	; 62
 424:	18 2f       	mov	r17, r24
  u8_t value;
  u8_t value2;
  static   u8_t ODR_old_value;
  
  if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG1, &value) )
 426:	be 01       	movw	r22, r28
 428:	6f 5f       	subi	r22, 0xFF	; 255
 42a:	7f 4f       	sbci	r23, 0xFF	; 255
 42c:	80 e2       	ldi	r24, 0x20	; 32
 42e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LIS3DH_ReadReg>
 432:	88 23       	and	r24, r24
 434:	c9 f1       	breq	.+114    	; 0x4a8 <LIS3DH_SetMode+0x90>
    return MEMS_ERROR;
  
  if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG4, &value2) )
 436:	be 01       	movw	r22, r28
 438:	6e 5f       	subi	r22, 0xFE	; 254
 43a:	7f 4f       	sbci	r23, 0xFF	; 255
 43c:	83 e2       	ldi	r24, 0x23	; 35
 43e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LIS3DH_ReadReg>
 442:	88 23       	and	r24, r24
 444:	99 f1       	breq	.+102    	; 0x4ac <LIS3DH_SetMode+0x94>
    return MEMS_ERROR;
  
  if((value & 0xF0)==0) 
 446:	89 81       	ldd	r24, Y+1	; 0x01
 448:	98 2f       	mov	r25, r24
 44a:	90 7f       	andi	r25, 0xF0	; 240
 44c:	29 f4       	brne	.+10     	; 0x458 <LIS3DH_SetMode+0x40>
    value = value | (ODR_old_value & 0xF0); //if it comes from POWERDOWN  
 44e:	90 91 00 20 	lds	r25, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 452:	90 7f       	andi	r25, 0xF0	; 240
 454:	89 2b       	or	r24, r25
 456:	89 83       	std	Y+1, r24	; 0x01
  
  switch(md) {
 458:	11 30       	cpi	r17, 0x01	; 1
 45a:	89 f0       	breq	.+34     	; 0x47e <LIS3DH_SetMode+0x66>
 45c:	18 f0       	brcs	.+6      	; 0x464 <LIS3DH_SetMode+0x4c>
 45e:	12 30       	cpi	r17, 0x02	; 2
 460:	39 f0       	breq	.+14     	; 0x470 <LIS3DH_SetMode+0x58>
 462:	26 c0       	rjmp	.+76     	; 0x4b0 <LIS3DH_SetMode+0x98>
    
  case LIS3DH_POWER_DOWN:
    ODR_old_value = value;
 464:	89 81       	ldd	r24, Y+1	; 0x01
 466:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
    value &= 0x0F;
 46a:	8f 70       	andi	r24, 0x0F	; 15
 46c:	89 83       	std	Y+1, r24	; 0x01
    break;
 46e:	0d c0       	rjmp	.+26     	; 0x48a <LIS3DH_SetMode+0x72>
    
  case LIS3DH_NORMAL:
    value &= 0xF7;
 470:	89 81       	ldd	r24, Y+1	; 0x01
 472:	87 7f       	andi	r24, 0xF7	; 247
 474:	89 83       	std	Y+1, r24	; 0x01
    value |= (MEMS_RESET<<LIS3DH_LPEN);
    value2 &= 0xF7;
    value2 |= (MEMS_SET<<LIS3DH_HR);   //set HighResolution_BIT
 476:	8a 81       	ldd	r24, Y+2	; 0x02
 478:	88 60       	ori	r24, 0x08	; 8
 47a:	8a 83       	std	Y+2, r24	; 0x02
    break;
 47c:	06 c0       	rjmp	.+12     	; 0x48a <LIS3DH_SetMode+0x72>
    
  case LIS3DH_LOW_POWER:		
    value &= 0xF7;
    value |=  (MEMS_SET<<LIS3DH_LPEN);
 47e:	89 81       	ldd	r24, Y+1	; 0x01
 480:	88 60       	ori	r24, 0x08	; 8
 482:	89 83       	std	Y+1, r24	; 0x01
    value2 &= 0xF7;
 484:	8a 81       	ldd	r24, Y+2	; 0x02
 486:	87 7f       	andi	r24, 0xF7	; 247
 488:	8a 83       	std	Y+2, r24	; 0x02
    
  default:
    return MEMS_ERROR;
  }
  
  if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG1, value) )
 48a:	69 81       	ldd	r22, Y+1	; 0x01
 48c:	80 e2       	ldi	r24, 0x20	; 32
 48e:	0e 94 76 01 	call	0x2ec	; 0x2ec <LIS3DH_WriteReg>
 492:	88 23       	and	r24, r24
 494:	79 f0       	breq	.+30     	; 0x4b4 <LIS3DH_SetMode+0x9c>
    return MEMS_ERROR;
  
  if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG4, value2) )
 496:	6a 81       	ldd	r22, Y+2	; 0x02
 498:	83 e2       	ldi	r24, 0x23	; 35
 49a:	0e 94 76 01 	call	0x2ec	; 0x2ec <LIS3DH_WriteReg>
  u8_t value;
  u8_t value2;
  static   u8_t ODR_old_value;
  
  if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG1, &value) )
    return MEMS_ERROR;
 49e:	91 e0       	ldi	r25, 0x01	; 1
 4a0:	81 11       	cpse	r24, r1
 4a2:	09 c0       	rjmp	.+18     	; 0x4b6 <LIS3DH_SetMode+0x9e>
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	07 c0       	rjmp	.+14     	; 0x4b6 <LIS3DH_SetMode+0x9e>
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	05 c0       	rjmp	.+10     	; 0x4b6 <LIS3DH_SetMode+0x9e>
  
  if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG4, &value2) )
    return MEMS_ERROR;
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	03 c0       	rjmp	.+6      	; 0x4b6 <LIS3DH_SetMode+0x9e>
    value2 &= 0xF7;
    value2 |= (MEMS_RESET<<LIS3DH_HR); //reset HighResolution_BIT
    break;
    
  default:
    return MEMS_ERROR;
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	01 c0       	rjmp	.+2      	; 0x4b6 <LIS3DH_SetMode+0x9e>
  }
  
  if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG1, value) )
    return MEMS_ERROR;
 4b4:	90 e0       	ldi	r25, 0x00	; 0
  
  if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG4, value2) )
    return MEMS_ERROR;  
  
  return MEMS_SUCCESS;
}
 4b6:	89 2f       	mov	r24, r25
 4b8:	0f 90       	pop	r0
 4ba:	0f 90       	pop	r0
 4bc:	df 91       	pop	r29
 4be:	cf 91       	pop	r28
 4c0:	1f 91       	pop	r17
 4c2:	08 95       	ret

000004c4 <LIS3DH_SetAxis>:
* Input          : LIS3DH_X_ENABLE/DISABLE | LIS3DH_Y_ENABLE/DISABLE | LIS3DH_Z_ENABLE/DISABLE
* Output         : None
* Note           : You MUST use all input variable in the argument, as example
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetAxis(LIS3DH_Axis_t axis) {
 4c4:	1f 93       	push	r17
 4c6:	cf 93       	push	r28
 4c8:	df 93       	push	r29
 4ca:	1f 92       	push	r1
 4cc:	cd b7       	in	r28, 0x3d	; 61
 4ce:	de b7       	in	r29, 0x3e	; 62
 4d0:	18 2f       	mov	r17, r24
  u8_t value;
  
  if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG1, &value) )
 4d2:	be 01       	movw	r22, r28
 4d4:	6f 5f       	subi	r22, 0xFF	; 255
 4d6:	7f 4f       	sbci	r23, 0xFF	; 255
 4d8:	80 e2       	ldi	r24, 0x20	; 32
 4da:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LIS3DH_ReadReg>
 4de:	88 23       	and	r24, r24
 4e0:	69 f0       	breq	.+26     	; 0x4fc <LIS3DH_SetAxis+0x38>
    return MEMS_ERROR;
  value &= 0xF8;
  value |= (0x07 & axis);
 4e2:	69 81       	ldd	r22, Y+1	; 0x01
 4e4:	68 7f       	andi	r22, 0xF8	; 248
 4e6:	17 70       	andi	r17, 0x07	; 7
 4e8:	61 2b       	or	r22, r17
 4ea:	69 83       	std	Y+1, r22	; 0x01
  
  if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG1, value) )
 4ec:	80 e2       	ldi	r24, 0x20	; 32
 4ee:	0e 94 76 01 	call	0x2ec	; 0x2ec <LIS3DH_WriteReg>
*******************************************************************************/
status_t LIS3DH_SetAxis(LIS3DH_Axis_t axis) {
  u8_t value;
  
  if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG1, &value) )
    return MEMS_ERROR;
 4f2:	91 e0       	ldi	r25, 0x01	; 1
 4f4:	81 11       	cpse	r24, r1
 4f6:	03 c0       	rjmp	.+6      	; 0x4fe <LIS3DH_SetAxis+0x3a>
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	01 c0       	rjmp	.+2      	; 0x4fe <LIS3DH_SetAxis+0x3a>
 4fc:	90 e0       	ldi	r25, 0x00	; 0
  
  if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG1, value) )
    return MEMS_ERROR;   
  
  return MEMS_SUCCESS;
}
 4fe:	89 2f       	mov	r24, r25
 500:	0f 90       	pop	r0
 502:	df 91       	pop	r29
 504:	cf 91       	pop	r28
 506:	1f 91       	pop	r17
 508:	08 95       	ret

0000050a <LIS3DH_SetFullScale>:
* Description    : Sets the LIS3DH FullScale
* Input          : LIS3DH_FULLSCALE_2/LIS3DH_FULLSCALE_4/LIS3DH_FULLSCALE_8/LIS3DH_FULLSCALE_16
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetFullScale(LIS3DH_Fullscale_t fs) {
 50a:	1f 93       	push	r17
 50c:	cf 93       	push	r28
 50e:	df 93       	push	r29
 510:	1f 92       	push	r1
 512:	cd b7       	in	r28, 0x3d	; 61
 514:	de b7       	in	r29, 0x3e	; 62
 516:	18 2f       	mov	r17, r24
  u8_t value;
  
  if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG4, &value) )
 518:	be 01       	movw	r22, r28
 51a:	6f 5f       	subi	r22, 0xFF	; 255
 51c:	7f 4f       	sbci	r23, 0xFF	; 255
 51e:	83 e2       	ldi	r24, 0x23	; 35
 520:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LIS3DH_ReadReg>
 524:	88 23       	and	r24, r24
 526:	81 f0       	breq	.+32     	; 0x548 <LIS3DH_SetFullScale+0x3e>
    return MEMS_ERROR;
  
  value &= 0xCF;	
  value |= (fs<<LIS3DH_FS);
 528:	69 81       	ldd	r22, Y+1	; 0x01
 52a:	6f 7c       	andi	r22, 0xCF	; 207
 52c:	20 e1       	ldi	r18, 0x10	; 16
 52e:	12 9f       	mul	r17, r18
 530:	c0 01       	movw	r24, r0
 532:	11 24       	eor	r1, r1
 534:	68 2b       	or	r22, r24
 536:	69 83       	std	Y+1, r22	; 0x01
  
  if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG4, value) )
 538:	83 e2       	ldi	r24, 0x23	; 35
 53a:	0e 94 76 01 	call	0x2ec	; 0x2ec <LIS3DH_WriteReg>
*******************************************************************************/
status_t LIS3DH_SetFullScale(LIS3DH_Fullscale_t fs) {
  u8_t value;
  
  if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG4, &value) )
    return MEMS_ERROR;
 53e:	91 e0       	ldi	r25, 0x01	; 1
 540:	81 11       	cpse	r24, r1
 542:	03 c0       	rjmp	.+6      	; 0x54a <LIS3DH_SetFullScale+0x40>
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	01 c0       	rjmp	.+2      	; 0x54a <LIS3DH_SetFullScale+0x40>
 548:	90 e0       	ldi	r25, 0x00	; 0
  
  if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG4, value) )
    return MEMS_ERROR;
  
  return MEMS_SUCCESS;
}
 54a:	89 2f       	mov	r24, r25
 54c:	0f 90       	pop	r0
 54e:	df 91       	pop	r29
 550:	cf 91       	pop	r28
 552:	1f 91       	pop	r17
 554:	08 95       	ret

00000556 <spi_init>:
	
	delay_us(2000);
}

void rf_clear_int_flags(){
	reg_write(STATUS_,NOP);
 556:	af 92       	push	r10
 558:	cf 92       	push	r12
 55a:	ef 92       	push	r14
 55c:	0f 93       	push	r16
 55e:	e0 e4       	ldi	r30, 0x40	; 64
 560:	f6 e0       	ldi	r31, 0x06	; 6
 562:	82 e1       	ldi	r24, 0x12	; 18
 564:	81 83       	std	Z+1, r24	; 0x01
 566:	82 e0       	ldi	r24, 0x02	; 2
 568:	85 83       	std	Z+5, r24	; 0x05
 56a:	a1 2c       	mov	r10, r1
 56c:	c1 2c       	mov	r12, r1
 56e:	e1 2c       	mov	r14, r1
 570:	00 e0       	ldi	r16, 0x00	; 0
 572:	20 e0       	ldi	r18, 0x00	; 0
 574:	40 e4       	ldi	r20, 0x40	; 64
 576:	56 e0       	ldi	r21, 0x06	; 6
 578:	60 ec       	ldi	r22, 0xC0	; 192
 57a:	78 e0       	ldi	r23, 0x08	; 8
 57c:	8b e1       	ldi	r24, 0x1B	; 27
 57e:	90 e2       	ldi	r25, 0x20	; 32
 580:	0e 94 51 03 	call	0x6a2	; 0x6a2 <SPI_MasterInit>
 584:	0f 91       	pop	r16
 586:	ef 90       	pop	r14
 588:	cf 90       	pop	r12
 58a:	af 90       	pop	r10
 58c:	08 95       	ret

0000058e <reg_write>:
 58e:	0f 93       	push	r16
 590:	1f 93       	push	r17
 592:	cf 93       	push	r28
 594:	df 93       	push	r29
 596:	06 2f       	mov	r16, r22
 598:	c0 e4       	ldi	r28, 0x40	; 64
 59a:	d6 e0       	ldi	r29, 0x06	; 6
 59c:	12 e0       	ldi	r17, 0x02	; 2
 59e:	1e 83       	std	Y+6, r17	; 0x06
 5a0:	68 2f       	mov	r22, r24
 5a2:	60 62       	ori	r22, 0x20	; 32
 5a4:	8b e1       	ldi	r24, 0x1B	; 27
 5a6:	90 e2       	ldi	r25, 0x20	; 32
 5a8:	0e 94 7e 03 	call	0x6fc	; 0x6fc <SPI_MasterTransceiveByte>
 5ac:	60 2f       	mov	r22, r16
 5ae:	8b e1       	ldi	r24, 0x1B	; 27
 5b0:	90 e2       	ldi	r25, 0x20	; 32
 5b2:	0e 94 7e 03 	call	0x6fc	; 0x6fc <SPI_MasterTransceiveByte>
 5b6:	1d 83       	std	Y+5, r17	; 0x05
 5b8:	df 91       	pop	r29
 5ba:	cf 91       	pop	r28
 5bc:	1f 91       	pop	r17
 5be:	0f 91       	pop	r16
 5c0:	08 95       	ret

000005c2 <payload_write>:
 5c2:	ef 92       	push	r14
 5c4:	ff 92       	push	r15
 5c6:	0f 93       	push	r16
 5c8:	1f 93       	push	r17
 5ca:	cf 93       	push	r28
 5cc:	df 93       	push	r29
 5ce:	7c 01       	movw	r14, r24
 5d0:	16 2f       	mov	r17, r22
 5d2:	82 e0       	ldi	r24, 0x02	; 2
 5d4:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
 5d8:	60 ea       	ldi	r22, 0xA0	; 160
 5da:	8b e1       	ldi	r24, 0x1B	; 27
 5dc:	90 e2       	ldi	r25, 0x20	; 32
 5de:	0e 94 7e 03 	call	0x6fc	; 0x6fc <SPI_MasterTransceiveByte>
 5e2:	11 23       	and	r17, r17
 5e4:	81 f0       	breq	.+32     	; 0x606 <payload_write+0x44>
 5e6:	e7 01       	movw	r28, r14
 5e8:	11 50       	subi	r17, 0x01	; 1
 5ea:	01 2f       	mov	r16, r17
 5ec:	10 e0       	ldi	r17, 0x00	; 0
 5ee:	0f 5f       	subi	r16, 0xFF	; 255
 5f0:	1f 4f       	sbci	r17, 0xFF	; 255
 5f2:	0e 0d       	add	r16, r14
 5f4:	1f 1d       	adc	r17, r15
 5f6:	69 91       	ld	r22, Y+
 5f8:	8b e1       	ldi	r24, 0x1B	; 27
 5fa:	90 e2       	ldi	r25, 0x20	; 32
 5fc:	0e 94 7e 03 	call	0x6fc	; 0x6fc <SPI_MasterTransceiveByte>
 600:	c0 17       	cp	r28, r16
 602:	d1 07       	cpc	r29, r17
 604:	c1 f7       	brne	.-16     	; 0x5f6 <payload_write+0x34>
 606:	82 e0       	ldi	r24, 0x02	; 2
 608:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
 60c:	df 91       	pop	r29
 60e:	cf 91       	pop	r28
 610:	1f 91       	pop	r17
 612:	0f 91       	pop	r16
 614:	ff 90       	pop	r15
 616:	ef 90       	pop	r14
 618:	08 95       	ret

0000061a <rf_init_as_tx>:
 61a:	8b e7       	ldi	r24, 0x7B	; 123
 61c:	95 e1       	ldi	r25, 0x15	; 21
 61e:	01 97       	sbiw	r24, 0x01	; 1
 620:	f1 f7       	brne	.-4      	; 0x61e <rf_init_as_tx+0x4>
 622:	00 c0       	rjmp	.+0      	; 0x624 <rf_init_as_tx+0xa>
 624:	00 00       	nop
 626:	0e 94 ab 02 	call	0x556	; 0x556 <spi_init>
 62a:	e0 e4       	ldi	r30, 0x40	; 64
 62c:	f6 e0       	ldi	r31, 0x06	; 6
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	81 83       	std	Z+1, r24	; 0x01
 632:	86 83       	std	Z+6, r24	; 0x06
 634:	6a e2       	ldi	r22, 0x2A	; 42
 636:	80 e0       	ldi	r24, 0x00	; 0
 638:	0e 94 c7 02 	call	0x58e	; 0x58e <reg_write>
 63c:	60 e0       	ldi	r22, 0x00	; 0
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	0e 94 c7 02 	call	0x58e	; 0x58e <reg_write>
 644:	68 e0       	ldi	r22, 0x08	; 8
 646:	86 e0       	ldi	r24, 0x06	; 6
 648:	0e 94 c7 02 	call	0x58e	; 0x58e <reg_write>
 64c:	63 e1       	ldi	r22, 0x13	; 19
 64e:	85 e0       	ldi	r24, 0x05	; 5
 650:	0e 94 c7 02 	call	0x58e	; 0x58e <reg_write>
 654:	87 ee       	ldi	r24, 0xE7	; 231
 656:	93 e0       	ldi	r25, 0x03	; 3
 658:	01 97       	sbiw	r24, 0x01	; 1
 65a:	f1 f7       	brne	.-4      	; 0x658 <rf_init_as_tx+0x3e>
 65c:	00 c0       	rjmp	.+0      	; 0x65e <rf_init_as_tx+0x44>
 65e:	00 00       	nop
 660:	08 95       	ret

00000662 <rf_send_byte>:
}

void rf_send_byte(unsigned char ucByte) {
 662:	ff 92       	push	r15
 664:	0f 93       	push	r16
 666:	1f 93       	push	r17
 668:	cf 93       	push	r28
 66a:	df 93       	push	r29
 66c:	1f 92       	push	r1
 66e:	cd b7       	in	r28, 0x3d	; 61
 670:	de b7       	in	r29, 0x3e	; 62
 672:	89 83       	std	Y+1, r24	; 0x01
	}
};

void set_CE(unsigned char uset_CState){
	if (uset_CState) {
		PORT_SetPins( &RF_PORT,RF_CE_bm);
 674:	00 e4       	ldi	r16, 0x40	; 64
 676:	16 e0       	ldi	r17, 0x06	; 6
 678:	ff 24       	eor	r15, r15
 67a:	f3 94       	inc	r15
 67c:	f8 01       	movw	r30, r16
 67e:	f5 82       	std	Z+5, r15	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 680:	fa e0       	ldi	r31, 0x0A	; 10
 682:	fa 95       	dec	r31
 684:	f1 f7       	brne	.-4      	; 0x682 <rf_send_byte+0x20>
}

void rf_send_byte(unsigned char ucByte) {
	set_CE(1);
	delay_us(15);
	payload_write(&ucByte, 1);
 686:	61 e0       	ldi	r22, 0x01	; 1
 688:	ce 01       	movw	r24, r28
 68a:	01 96       	adiw	r24, 0x01	; 1
 68c:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <payload_write>
void set_CE(unsigned char uset_CState){
	if (uset_CState) {
		PORT_SetPins( &RF_PORT,RF_CE_bm);
	}
	else {
		PORT_ClearPins( &RF_PORT,RF_CE_bm);
 690:	f8 01       	movw	r30, r16
 692:	f6 82       	std	Z+6, r15	; 0x06
void rf_send_byte(unsigned char ucByte) {
	set_CE(1);
	delay_us(15);
	payload_write(&ucByte, 1);
	set_CE(0);
}
 694:	0f 90       	pop	r0
 696:	df 91       	pop	r29
 698:	cf 91       	pop	r28
 69a:	1f 91       	pop	r17
 69c:	0f 91       	pop	r16
 69e:	ff 90       	pop	r15
 6a0:	08 95       	ret

000006a2 <SPI_MasterInit>:
	data = spi->dataPacket->transmitData[0];
	spi->module->DATA = data;

	/* Successs */
	return (SPI_OK);
}
 6a2:	af 92       	push	r10
 6a4:	cf 92       	push	r12
 6a6:	ef 92       	push	r14
 6a8:	0f 93       	push	r16
 6aa:	fc 01       	movw	r30, r24
 6ac:	60 83       	st	Z, r22
 6ae:	71 83       	std	Z+1, r23	; 0x01
 6b0:	42 83       	std	Z+2, r20	; 0x02
 6b2:	53 83       	std	Z+3, r21	; 0x03
 6b4:	14 82       	std	Z+4, r1	; 0x04
 6b6:	c1 10       	cpse	r12, r1
 6b8:	02 c0       	rjmp	.+4      	; 0x6be <SPI_MasterInit+0x1c>
 6ba:	80 e0       	ldi	r24, 0x00	; 0
 6bc:	01 c0       	rjmp	.+2      	; 0x6c0 <SPI_MasterInit+0x1e>
 6be:	80 e8       	ldi	r24, 0x80	; 128
 6c0:	9a 2d       	mov	r25, r10
 6c2:	90 64       	ori	r25, 0x40	; 64
 6c4:	a9 2e       	mov	r10, r25
 6c6:	a8 2a       	or	r10, r24
 6c8:	21 11       	cpse	r18, r1
 6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <SPI_MasterInit+0x2e>
 6cc:	80 e0       	ldi	r24, 0x00	; 0
 6ce:	01 c0       	rjmp	.+2      	; 0x6d2 <SPI_MasterInit+0x30>
 6d0:	80 e2       	ldi	r24, 0x20	; 32
 6d2:	a8 2a       	or	r10, r24
 6d4:	00 61       	ori	r16, 0x10	; 16
 6d6:	0a 29       	or	r16, r10
 6d8:	db 01       	movw	r26, r22
 6da:	0c 93       	st	X, r16
 6dc:	a0 81       	ld	r26, Z
 6de:	b1 81       	ldd	r27, Z+1	; 0x01
 6e0:	11 96       	adiw	r26, 0x01	; 1
 6e2:	ec 92       	st	X, r14
 6e4:	15 82       	std	Z+5, r1	; 0x05
 6e6:	16 82       	std	Z+6, r1	; 0x06
 6e8:	02 80       	ldd	r0, Z+2	; 0x02
 6ea:	f3 81       	ldd	r31, Z+3	; 0x03
 6ec:	e0 2d       	mov	r30, r0
 6ee:	80 ea       	ldi	r24, 0xA0	; 160
 6f0:	81 83       	std	Z+1, r24	; 0x01
 6f2:	0f 91       	pop	r16
 6f4:	ef 90       	pop	r14
 6f6:	cf 90       	pop	r12
 6f8:	af 90       	pop	r10
 6fa:	08 95       	ret

000006fc <SPI_MasterTransceiveByte>:
 *  \return           Data received from slave.
 */
uint8_t SPI_MasterTransceiveByte(SPI_Master_t *spi, uint8_t TXdata)
{
	/* Send pattern. */
	spi->module->DATA = TXdata;
 6fc:	dc 01       	movw	r26, r24
 6fe:	ed 91       	ld	r30, X+
 700:	fc 91       	ld	r31, X
 702:	11 97       	sbiw	r26, 0x01	; 1
 704:	63 83       	std	Z+3, r22	; 0x03

	/* Wait for transmission complete. */
	while(!(spi->module->STATUS & SPI_IF_bm)) {}
 706:	ed 91       	ld	r30, X+
 708:	fc 91       	ld	r31, X
 70a:	82 81       	ldd	r24, Z+2	; 0x02
 70c:	88 23       	and	r24, r24
 70e:	ec f7       	brge	.-6      	; 0x70a <SPI_MasterTransceiveByte+0xe>
	/* Read received data. */
	uint8_t result = spi->module->DATA;
 710:	83 81       	ldd	r24, Z+3	; 0x03

	return(result);
}
 712:	08 95       	ret

00000714 <TWI_MasterInit>:
                    uint8_t address,
                    uint8_t bytesToRead)
{
	bool twi_status = TWI_MasterWriteRead(twi, address, 0, 0, bytesToRead);
	return twi_status;
}
 714:	fc 01       	movw	r30, r24
 716:	60 83       	st	Z, r22
 718:	71 83       	std	Z+1, r23	; 0x01
 71a:	48 63       	ori	r20, 0x38	; 56
 71c:	db 01       	movw	r26, r22
 71e:	11 96       	adiw	r26, 0x01	; 1
 720:	4c 93       	st	X, r20
 722:	a0 81       	ld	r26, Z
 724:	b1 81       	ldd	r27, Z+1	; 0x01
 726:	15 96       	adiw	r26, 0x05	; 5
 728:	2c 93       	st	X, r18
 72a:	01 90       	ld	r0, Z+
 72c:	f0 81       	ld	r31, Z
 72e:	e0 2d       	mov	r30, r0
 730:	81 e0       	ldi	r24, 0x01	; 1
 732:	84 83       	std	Z+4, r24	; 0x04
 734:	08 95       	ret

00000736 <TWI_MasterWriteRead>:
 736:	0f 93       	push	r16
 738:	cf 93       	push	r28
 73a:	df 93       	push	r29
 73c:	fc 01       	movw	r30, r24
 73e:	29 30       	cpi	r18, 0x09	; 9
 740:	98 f5       	brcc	.+102    	; 0x7a8 <TWI_MasterWriteRead+0x72>
 742:	09 30       	cpi	r16, 0x09	; 9
 744:	98 f5       	brcc	.+102    	; 0x7ac <TWI_MasterWriteRead+0x76>
 746:	87 89       	ldd	r24, Z+23	; 0x17
 748:	81 11       	cpse	r24, r1
 74a:	32 c0       	rjmp	.+100    	; 0x7b0 <TWI_MasterWriteRead+0x7a>
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	87 8b       	std	Z+23, r24	; 0x17
 750:	10 8e       	std	Z+24, r1	; 0x18
 752:	66 0f       	add	r22, r22
 754:	62 83       	std	Z+2, r22	; 0x02
 756:	22 23       	and	r18, r18
 758:	69 f0       	breq	.+26     	; 0x774 <TWI_MasterWriteRead+0x3e>
 75a:	a4 2f       	mov	r26, r20
 75c:	b5 2f       	mov	r27, r21
 75e:	40 e0       	ldi	r20, 0x00	; 0
 760:	50 e0       	ldi	r21, 0x00	; 0
 762:	8d 91       	ld	r24, X+
 764:	ef 01       	movw	r28, r30
 766:	c4 0f       	add	r28, r20
 768:	d5 1f       	adc	r29, r21
 76a:	8b 83       	std	Y+3, r24	; 0x03
 76c:	4f 5f       	subi	r20, 0xFF	; 255
 76e:	5f 4f       	sbci	r21, 0xFF	; 255
 770:	42 17       	cp	r20, r18
 772:	b8 f3       	brcs	.-18     	; 0x762 <TWI_MasterWriteRead+0x2c>
 774:	23 8b       	std	Z+19, r18	; 0x13
 776:	04 8b       	std	Z+20, r16	; 0x14
 778:	15 8a       	std	Z+21, r1	; 0x15
 77a:	16 8a       	std	Z+22, r1	; 0x16
 77c:	83 89       	ldd	r24, Z+19	; 0x13
 77e:	88 23       	and	r24, r24
 780:	41 f0       	breq	.+16     	; 0x792 <TWI_MasterWriteRead+0x5c>
 782:	82 81       	ldd	r24, Z+2	; 0x02
 784:	8e 7f       	andi	r24, 0xFE	; 254
 786:	01 90       	ld	r0, Z+
 788:	f0 81       	ld	r31, Z
 78a:	e0 2d       	mov	r30, r0
 78c:	86 83       	std	Z+6, r24	; 0x06
 78e:	81 e0       	ldi	r24, 0x01	; 1
 790:	12 c0       	rjmp	.+36     	; 0x7b6 <TWI_MasterWriteRead+0x80>
 792:	84 89       	ldd	r24, Z+20	; 0x14
 794:	88 23       	and	r24, r24
 796:	71 f0       	breq	.+28     	; 0x7b4 <TWI_MasterWriteRead+0x7e>
 798:	82 81       	ldd	r24, Z+2	; 0x02
 79a:	81 60       	ori	r24, 0x01	; 1
 79c:	01 90       	ld	r0, Z+
 79e:	f0 81       	ld	r31, Z
 7a0:	e0 2d       	mov	r30, r0
 7a2:	86 83       	std	Z+6, r24	; 0x06
 7a4:	81 e0       	ldi	r24, 0x01	; 1
 7a6:	07 c0       	rjmp	.+14     	; 0x7b6 <TWI_MasterWriteRead+0x80>
 7a8:	80 e0       	ldi	r24, 0x00	; 0
 7aa:	05 c0       	rjmp	.+10     	; 0x7b6 <TWI_MasterWriteRead+0x80>
 7ac:	80 e0       	ldi	r24, 0x00	; 0
 7ae:	03 c0       	rjmp	.+6      	; 0x7b6 <TWI_MasterWriteRead+0x80>
 7b0:	80 e0       	ldi	r24, 0x00	; 0
 7b2:	01 c0       	rjmp	.+2      	; 0x7b6 <TWI_MasterWriteRead+0x80>
 7b4:	81 e0       	ldi	r24, 0x01	; 1
 7b6:	df 91       	pop	r29
 7b8:	cf 91       	pop	r28
 7ba:	0f 91       	pop	r16
 7bc:	08 95       	ret

000007be <TWI_MasterArbitrationLostBusErrorHandler>:
 *  Handles TWI responses to lost arbitration and bus error.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi)
{
 7be:	fc 01       	movw	r30, r24
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
 7c0:	a0 81       	ld	r26, Z
 7c2:	b1 81       	ldd	r27, Z+1	; 0x01
 7c4:	14 96       	adiw	r26, 0x04	; 4
 7c6:	9c 91       	ld	r25, X
 7c8:	14 97       	sbiw	r26, 0x04	; 4

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
 7ca:	92 ff       	sbrs	r25, 2
 7cc:	03 c0       	rjmp	.+6      	; 0x7d4 <TWI_MasterArbitrationLostBusErrorHandler+0x16>
		twi->result = TWIM_RESULT_BUS_ERROR;
 7ce:	84 e0       	ldi	r24, 0x04	; 4
 7d0:	80 8f       	std	Z+24, r24	; 0x18
 7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <TWI_MasterArbitrationLostBusErrorHandler+0x1a>
	}
	/* If arbitration lost. */
	else {
		twi->result = TWIM_RESULT_ARBITRATION_LOST;
 7d4:	83 e0       	ldi	r24, 0x03	; 3
 7d6:	80 8f       	std	Z+24, r24	; 0x18
	}

	/* Clear interrupt flag. */
	twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
 7d8:	98 60       	ori	r25, 0x08	; 8
 7da:	14 96       	adiw	r26, 0x04	; 4
 7dc:	9c 93       	st	X, r25

	twi->status = TWIM_STATUS_READY;
 7de:	17 8a       	std	Z+23, r1	; 0x17
 7e0:	08 95       	ret

000007e2 <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi)
{
 7e2:	cf 93       	push	r28
 7e4:	df 93       	push	r29
 7e6:	fc 01       	movw	r30, r24
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite  = twi->bytesToWrite;
 7e8:	93 89       	ldd	r25, Z+19	; 0x13
	uint8_t bytesToRead   = twi->bytesToRead;
 7ea:	24 89       	ldd	r18, Z+20	; 0x14

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
 7ec:	a0 81       	ld	r26, Z
 7ee:	b1 81       	ldd	r27, Z+1	; 0x01
 7f0:	14 96       	adiw	r26, 0x04	; 4
 7f2:	8c 91       	ld	r24, X
 7f4:	14 97       	sbiw	r26, 0x04	; 4
 7f6:	84 ff       	sbrs	r24, 4
 7f8:	07 c0       	rjmp	.+14     	; 0x808 <TWI_MasterWriteHandler+0x26>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 7fa:	83 e0       	ldi	r24, 0x03	; 3
 7fc:	13 96       	adiw	r26, 0x03	; 3
 7fe:	8c 93       	st	X, r24
		twi->result = TWIM_RESULT_NACK_RECEIVED;
 800:	85 e0       	ldi	r24, 0x05	; 5
 802:	80 8f       	std	Z+24, r24	; 0x18
		twi->status = TWIM_STATUS_READY;
 804:	17 8a       	std	Z+23, r1	; 0x17
 806:	1c c0       	rjmp	.+56     	; 0x840 <TWI_MasterWriteHandler+0x5e>
	}

	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
 808:	85 89       	ldd	r24, Z+21	; 0x15
 80a:	89 17       	cp	r24, r25
 80c:	58 f4       	brcc	.+22     	; 0x824 <TWI_MasterWriteHandler+0x42>
		uint8_t data = twi->writeData[twi->bytesWritten];
 80e:	85 89       	ldd	r24, Z+21	; 0x15
 810:	ef 01       	movw	r28, r30
 812:	c8 0f       	add	r28, r24
 814:	d1 1d       	adc	r29, r1
 816:	8b 81       	ldd	r24, Y+3	; 0x03
		twi->interface->MASTER.DATA = data;
 818:	17 96       	adiw	r26, 0x07	; 7
 81a:	8c 93       	st	X, r24
		++twi->bytesWritten;
 81c:	85 89       	ldd	r24, Z+21	; 0x15
 81e:	8f 5f       	subi	r24, 0xFF	; 255
 820:	85 8b       	std	Z+21, r24	; 0x15
 822:	0e c0       	rjmp	.+28     	; 0x840 <TWI_MasterWriteHandler+0x5e>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
 824:	86 89       	ldd	r24, Z+22	; 0x16
 826:	82 17       	cp	r24, r18
 828:	28 f4       	brcc	.+10     	; 0x834 <TWI_MasterWriteHandler+0x52>
		uint8_t readAddress = twi->address | 0x01;
 82a:	82 81       	ldd	r24, Z+2	; 0x02
 82c:	81 60       	ori	r24, 0x01	; 1
		twi->interface->MASTER.ADDR = readAddress;
 82e:	16 96       	adiw	r26, 0x06	; 6
 830:	8c 93       	st	X, r24
 832:	06 c0       	rjmp	.+12     	; 0x840 <TWI_MasterWriteHandler+0x5e>
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 834:	83 e0       	ldi	r24, 0x03	; 3
 836:	13 96       	adiw	r26, 0x03	; 3
 838:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
 83a:	81 e0       	ldi	r24, 0x01	; 1
 83c:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
 83e:	17 8a       	std	Z+23, r1	; 0x17
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_OK);
	}
}
 840:	df 91       	pop	r29
 842:	cf 91       	pop	r28
 844:	08 95       	ret

00000846 <TWI_MasterReadHandler>:
 *  reading bytes from the TWI slave.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi)
{
 846:	fc 01       	movw	r30, r24
	/* Fetch data if bytes to be read. */
	if (twi->bytesRead < TWIM_READ_BUFFER_SIZE) {
 848:	86 89       	ldd	r24, Z+22	; 0x16
 84a:	88 30       	cpi	r24, 0x08	; 8
 84c:	70 f4       	brcc	.+28     	; 0x86a <TWI_MasterReadHandler+0x24>
		uint8_t data = twi->interface->MASTER.DATA;
 84e:	a0 81       	ld	r26, Z
 850:	b1 81       	ldd	r27, Z+1	; 0x01
 852:	17 96       	adiw	r26, 0x07	; 7
 854:	8c 91       	ld	r24, X
		twi->readData[twi->bytesRead] = data;
 856:	96 89       	ldd	r25, Z+22	; 0x16
 858:	df 01       	movw	r26, r30
 85a:	a9 0f       	add	r26, r25
 85c:	b1 1d       	adc	r27, r1
 85e:	1b 96       	adiw	r26, 0x0b	; 11
 860:	8c 93       	st	X, r24
		twi->bytesRead++;
 862:	86 89       	ldd	r24, Z+22	; 0x16
 864:	8f 5f       	subi	r24, 0xFF	; 255
 866:	86 8b       	std	Z+22, r24	; 0x16
 868:	08 c0       	rjmp	.+16     	; 0x87a <TWI_MasterReadHandler+0x34>
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 86a:	a0 81       	ld	r26, Z
 86c:	b1 81       	ldd	r27, Z+1	; 0x01
 86e:	83 e0       	ldi	r24, 0x03	; 3
 870:	13 96       	adiw	r26, 0x03	; 3
 872:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
 874:	82 e0       	ldi	r24, 0x02	; 2
 876:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
 878:	17 8a       	std	Z+23, r1	; 0x17
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_BUFFER_OVERFLOW);
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;
 87a:	94 89       	ldd	r25, Z+20	; 0x14

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
 87c:	86 89       	ldd	r24, Z+22	; 0x16
 87e:	89 17       	cp	r24, r25
 880:	30 f4       	brcc	.+12     	; 0x88e <TWI_MasterReadHandler+0x48>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
 882:	01 90       	ld	r0, Z+
 884:	f0 81       	ld	r31, Z
 886:	e0 2d       	mov	r30, r0
 888:	82 e0       	ldi	r24, 0x02	; 2
 88a:	83 83       	std	Z+3, r24	; 0x03
 88c:	08 95       	ret
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
 88e:	a0 81       	ld	r26, Z
 890:	b1 81       	ldd	r27, Z+1	; 0x01
 892:	87 e0       	ldi	r24, 0x07	; 7
 894:	13 96       	adiw	r26, 0x03	; 3
 896:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
 898:	81 e0       	ldi	r24, 0x01	; 1
 89a:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
 89c:	17 8a       	std	Z+23, r1	; 0x17
 89e:	08 95       	ret

000008a0 <TWI_MasterInterruptHandler>:
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
 8a0:	dc 01       	movw	r26, r24
 8a2:	ed 91       	ld	r30, X+
 8a4:	fc 91       	ld	r31, X
 8a6:	24 81       	ldd	r18, Z+4	; 0x04

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
 8a8:	32 2f       	mov	r19, r18
 8aa:	3c 70       	andi	r19, 0x0C	; 12
 8ac:	19 f0       	breq	.+6      	; 0x8b4 <TWI_MasterInterruptHandler+0x14>
	    (currentStatus & TWI_MASTER_BUSERR_bm)) {

		TWI_MasterArbitrationLostBusErrorHandler(twi);
 8ae:	0e 94 df 03 	call	0x7be	; 0x7be <TWI_MasterArbitrationLostBusErrorHandler>
 8b2:	08 95       	ret
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
 8b4:	26 ff       	sbrs	r18, 6
 8b6:	03 c0       	rjmp	.+6      	; 0x8be <TWI_MasterInterruptHandler+0x1e>
		TWI_MasterWriteHandler(twi);
 8b8:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <TWI_MasterWriteHandler>
 8bc:	08 95       	ret
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
 8be:	22 23       	and	r18, r18
 8c0:	1c f4       	brge	.+6      	; 0x8c8 <TWI_MasterInterruptHandler+0x28>
		TWI_MasterReadHandler(twi);
 8c2:	0e 94 23 04 	call	0x846	; 0x846 <TWI_MasterReadHandler>
 8c6:	08 95       	ret
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
 8c8:	26 e0       	ldi	r18, 0x06	; 6
 8ca:	fc 01       	movw	r30, r24
 8cc:	20 8f       	std	Z+24, r18	; 0x18
	twi->status = TWIM_STATUS_READY;
 8ce:	17 8a       	std	Z+23, r1	; 0x17
 8d0:	08 95       	ret

000008d2 <_exit>:
 8d2:	f8 94       	cli

000008d4 <__stop_program>:
 8d4:	ff cf       	rjmp	.-2      	; 0x8d4 <__stop_program>
