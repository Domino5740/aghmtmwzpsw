
RF.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00000648  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  00802000  00802000  00000648  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000678  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  000006b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004ec6  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002f49  00000000  00000000  00005756  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012a4  00000000  00000000  0000869f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c4  00000000  00000000  00009944  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002979  00000000  00000000  00009e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016a6  00000000  00000000  0000c781  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  0000de27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
   8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
   c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  10:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  14:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  18:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  1c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  20:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  24:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  28:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  2c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  30:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  34:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  38:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  3c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  40:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  44:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  48:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  4c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  50:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  54:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  58:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  5c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  60:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  64:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  68:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  6c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  70:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  74:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  78:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  7c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  80:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  84:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  88:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  8c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  90:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  94:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  98:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  9c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  a0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  a4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  a8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  ac:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  b0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  b4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__vector_46>
  bc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  c0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  c4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  c8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  cc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  d0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  d4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  d8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  dc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  e0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  e4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  e8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  ec:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  f0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  f4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  f8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  fc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 100:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 104:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 108:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 10c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 110:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 114:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 118:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 11c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 120:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 124:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 128:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 12c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 130:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 134:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 138:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 13c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 140:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 144:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 148:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 14c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 150:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 154:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 158:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 15c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 160:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 164:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 168:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 16c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 170:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 174:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 178:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 17c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 180:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 184:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 188:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 18c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 190:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 194:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 198:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 19c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1a0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1a4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1a8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1ac:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1b0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1b4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1b8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1bc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1c0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1c4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1c8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1cc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1d0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1d4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1d8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1dc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1e0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1e4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1e8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1ec:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1f0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1f4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1f8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e2       	ldi	r29, 0x2F	; 47
 206:	de bf       	out	0x3e, r29	; 62

00000208 <__do_clear_bss>:
 208:	20 e2       	ldi	r18, 0x20	; 32
 20a:	a0 e0       	ldi	r26, 0x00	; 0
 20c:	b0 e2       	ldi	r27, 0x20	; 32
 20e:	01 c0       	rjmp	.+2      	; 0x212 <.do_clear_bss_start>

00000210 <.do_clear_bss_loop>:
 210:	1d 92       	st	X+, r1

00000212 <.do_clear_bss_start>:
 212:	a2 32       	cpi	r26, 0x22	; 34
 214:	b2 07       	cpc	r27, r18
 216:	e1 f7       	brne	.-8      	; 0x210 <.do_clear_bss_loop>
 218:	0e 94 12 01 	call	0x224	; 0x224 <main>
 21c:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <_exit>

00000220 <__bad_interrupt>:
 220:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000224 <main>:
#include "modules/rf.h"
#include "modules/avr_compiler.h"


int main (void) {
	led_init();
 224:	0e 94 4a 01 	call	0x294	; 0x294 <led_init>
	rf_init_as_tx();
 228:	0e 94 db 01 	call	0x3b6	; 0x3b6 <rf_init_as_tx>
	
	while(1) {
		
		static unsigned char ucMsgCtr = 0;
		
		rf_send_byte(ucMsgCtr);
 22c:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 230:	0e 94 ff 01 	call	0x3fe	; 0x3fe <rf_send_byte>
		rf_wait_until_data_sent();
 234:	0e 94 1f 02 	call	0x43e	; 0x43e <rf_wait_until_data_sent>
		led_toggle();
 238:	0e 94 4e 01 	call	0x29c	; 0x29c <led_toggle>
		ucMsgCtr -= 7;
 23c:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 240:	87 50       	subi	r24, 0x07	; 7
 242:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__DATA_REGION_ORIGIN__>
 246:	f2 cf       	rjmp	.-28     	; 0x22c <main+0x8>

00000248 <__vector_46>:
	return acc+128; 
}

/*! TWIE Master Interrupt vector. */
ISR(TWIE_TWIM_vect)
{
 248:	1f 92       	push	r1
 24a:	0f 92       	push	r0
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	0f 92       	push	r0
 250:	11 24       	eor	r1, r1
 252:	2f 93       	push	r18
 254:	3f 93       	push	r19
 256:	4f 93       	push	r20
 258:	5f 93       	push	r21
 25a:	6f 93       	push	r22
 25c:	7f 93       	push	r23
 25e:	8f 93       	push	r24
 260:	9f 93       	push	r25
 262:	af 93       	push	r26
 264:	bf 93       	push	r27
 266:	ef 93       	push	r30
 268:	ff 93       	push	r31
	TWI_MasterInterruptHandler(&twiMaster);
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e2       	ldi	r25, 0x20	; 32
 26e:	0e 94 cf 02 	call	0x59e	; 0x59e <TWI_MasterInterruptHandler>
}
 272:	ff 91       	pop	r31
 274:	ef 91       	pop	r30
 276:	bf 91       	pop	r27
 278:	af 91       	pop	r26
 27a:	9f 91       	pop	r25
 27c:	8f 91       	pop	r24
 27e:	7f 91       	pop	r23
 280:	6f 91       	pop	r22
 282:	5f 91       	pop	r21
 284:	4f 91       	pop	r20
 286:	3f 91       	pop	r19
 288:	2f 91       	pop	r18
 28a:	0f 90       	pop	r0
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	0f 90       	pop	r0
 290:	1f 90       	pop	r1
 292:	18 95       	reti

00000294 <led_init>:

#define LED_PORT PORTD
#define LED_bm	(1<<4)

void led_init(void){
	PORT_SetPinsAsOutput( &LED_PORT,LED_bm);
 294:	80 e1       	ldi	r24, 0x10	; 16
 296:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x700661>
 29a:	08 95       	ret

0000029c <led_toggle>:
}

void led_toggle(void){
	PORT_TogglePins(&LED_PORT,LED_bm);
 29c:	80 e1       	ldi	r24, 0x10	; 16
 29e:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <__TEXT_REGION_LENGTH__+0x700667>
 2a2:	08 95       	ret

000002a4 <spi_init>:
	
	delay_us(2000);
}

void rf_clear_int_flags(){
	reg_write(STATUS_,NOP);
 2a4:	af 92       	push	r10
 2a6:	cf 92       	push	r12
 2a8:	ef 92       	push	r14
 2aa:	0f 93       	push	r16
 2ac:	e0 e4       	ldi	r30, 0x40	; 64
 2ae:	f6 e0       	ldi	r31, 0x06	; 6
 2b0:	82 e1       	ldi	r24, 0x12	; 18
 2b2:	81 83       	std	Z+1, r24	; 0x01
 2b4:	82 e0       	ldi	r24, 0x02	; 2
 2b6:	85 83       	std	Z+5, r24	; 0x05
 2b8:	a1 2c       	mov	r10, r1
 2ba:	c1 2c       	mov	r12, r1
 2bc:	e1 2c       	mov	r14, r1
 2be:	00 e0       	ldi	r16, 0x00	; 0
 2c0:	20 e0       	ldi	r18, 0x00	; 0
 2c2:	40 e4       	ldi	r20, 0x40	; 64
 2c4:	56 e0       	ldi	r21, 0x06	; 6
 2c6:	60 ec       	ldi	r22, 0xC0	; 192
 2c8:	78 e0       	ldi	r23, 0x08	; 8
 2ca:	8b e1       	ldi	r24, 0x1B	; 27
 2cc:	90 e2       	ldi	r25, 0x20	; 32
 2ce:	0e 94 25 02 	call	0x44a	; 0x44a <SPI_MasterInit>
 2d2:	0f 91       	pop	r16
 2d4:	ef 90       	pop	r14
 2d6:	cf 90       	pop	r12
 2d8:	af 90       	pop	r10
 2da:	08 95       	ret

000002dc <reg_write>:
 2dc:	0f 93       	push	r16
 2de:	1f 93       	push	r17
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	06 2f       	mov	r16, r22
 2e6:	c0 e4       	ldi	r28, 0x40	; 64
 2e8:	d6 e0       	ldi	r29, 0x06	; 6
 2ea:	12 e0       	ldi	r17, 0x02	; 2
 2ec:	1e 83       	std	Y+6, r17	; 0x06
 2ee:	68 2f       	mov	r22, r24
 2f0:	60 62       	ori	r22, 0x20	; 32
 2f2:	8b e1       	ldi	r24, 0x1B	; 27
 2f4:	90 e2       	ldi	r25, 0x20	; 32
 2f6:	0e 94 52 02 	call	0x4a4	; 0x4a4 <SPI_MasterTransceiveByte>
 2fa:	60 2f       	mov	r22, r16
 2fc:	8b e1       	ldi	r24, 0x1B	; 27
 2fe:	90 e2       	ldi	r25, 0x20	; 32
 300:	0e 94 52 02 	call	0x4a4	; 0x4a4 <SPI_MasterTransceiveByte>
 304:	1d 83       	std	Y+5, r17	; 0x05
 306:	df 91       	pop	r29
 308:	cf 91       	pop	r28
 30a:	1f 91       	pop	r17
 30c:	0f 91       	pop	r16
 30e:	08 95       	ret

00000310 <payload_write>:
 310:	ef 92       	push	r14
 312:	ff 92       	push	r15
 314:	0f 93       	push	r16
 316:	1f 93       	push	r17
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	7c 01       	movw	r14, r24
 31e:	16 2f       	mov	r17, r22
 320:	82 e0       	ldi	r24, 0x02	; 2
 322:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
 326:	60 ea       	ldi	r22, 0xA0	; 160
 328:	8b e1       	ldi	r24, 0x1B	; 27
 32a:	90 e2       	ldi	r25, 0x20	; 32
 32c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <SPI_MasterTransceiveByte>
 330:	11 23       	and	r17, r17
 332:	81 f0       	breq	.+32     	; 0x354 <payload_write+0x44>
 334:	e7 01       	movw	r28, r14
 336:	11 50       	subi	r17, 0x01	; 1
 338:	01 2f       	mov	r16, r17
 33a:	10 e0       	ldi	r17, 0x00	; 0
 33c:	0f 5f       	subi	r16, 0xFF	; 255
 33e:	1f 4f       	sbci	r17, 0xFF	; 255
 340:	0e 0d       	add	r16, r14
 342:	1f 1d       	adc	r17, r15
 344:	69 91       	ld	r22, Y+
 346:	8b e1       	ldi	r24, 0x1B	; 27
 348:	90 e2       	ldi	r25, 0x20	; 32
 34a:	0e 94 52 02 	call	0x4a4	; 0x4a4 <SPI_MasterTransceiveByte>
 34e:	c0 17       	cp	r28, r16
 350:	d1 07       	cpc	r29, r17
 352:	c1 f7       	brne	.-16     	; 0x344 <payload_write+0x34>
 354:	82 e0       	ldi	r24, 0x02	; 2
 356:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	1f 91       	pop	r17
 360:	0f 91       	pop	r16
 362:	ff 90       	pop	r15
 364:	ef 90       	pop	r14
 366:	08 95       	ret

00000368 <status_bit_test>:
 368:	ff 92       	push	r15
 36a:	0f 93       	push	r16
 36c:	1f 93       	push	r17
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	c1 e0       	ldi	r28, 0x01	; 1
 374:	d0 e0       	ldi	r29, 0x00	; 0
 376:	02 c0       	rjmp	.+4      	; 0x37c <status_bit_test+0x14>
 378:	cc 0f       	add	r28, r28
 37a:	dd 1f       	adc	r29, r29
 37c:	8a 95       	dec	r24
 37e:	e2 f7       	brpl	.-8      	; 0x378 <status_bit_test+0x10>
 380:	00 e4       	ldi	r16, 0x40	; 64
 382:	16 e0       	ldi	r17, 0x06	; 6
 384:	68 94       	set
 386:	ff 24       	eor	r15, r15
 388:	f1 f8       	bld	r15, 1
 38a:	f8 01       	movw	r30, r16
 38c:	f6 82       	std	Z+6, r15	; 0x06
 38e:	6f ef       	ldi	r22, 0xFF	; 255
 390:	8b e1       	ldi	r24, 0x1B	; 27
 392:	90 e2       	ldi	r25, 0x20	; 32
 394:	0e 94 52 02 	call	0x4a4	; 0x4a4 <SPI_MasterTransceiveByte>
 398:	f8 01       	movw	r30, r16
 39a:	f5 82       	std	Z+5, r15	; 0x05
 39c:	8c 23       	and	r24, r28
 39e:	29 f0       	breq	.+10     	; 0x3aa <status_bit_test+0x42>
 3a0:	6c 2f       	mov	r22, r28
 3a2:	87 e0       	ldi	r24, 0x07	; 7
 3a4:	0e 94 6e 01 	call	0x2dc	; 0x2dc <reg_write>
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	1f 91       	pop	r17
 3b0:	0f 91       	pop	r16
 3b2:	ff 90       	pop	r15
 3b4:	08 95       	ret

000003b6 <rf_init_as_tx>:
 3b6:	8b e7       	ldi	r24, 0x7B	; 123
 3b8:	95 e1       	ldi	r25, 0x15	; 21
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <rf_init_as_tx+0x4>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <rf_init_as_tx+0xa>
 3c0:	00 00       	nop
 3c2:	0e 94 52 01 	call	0x2a4	; 0x2a4 <spi_init>
 3c6:	e0 e4       	ldi	r30, 0x40	; 64
 3c8:	f6 e0       	ldi	r31, 0x06	; 6
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	81 83       	std	Z+1, r24	; 0x01
 3ce:	86 83       	std	Z+6, r24	; 0x06
 3d0:	6a e2       	ldi	r22, 0x2A	; 42
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	0e 94 6e 01 	call	0x2dc	; 0x2dc <reg_write>
 3d8:	60 e0       	ldi	r22, 0x00	; 0
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	0e 94 6e 01 	call	0x2dc	; 0x2dc <reg_write>
 3e0:	68 e0       	ldi	r22, 0x08	; 8
 3e2:	86 e0       	ldi	r24, 0x06	; 6
 3e4:	0e 94 6e 01 	call	0x2dc	; 0x2dc <reg_write>
 3e8:	63 e1       	ldi	r22, 0x13	; 19
 3ea:	85 e0       	ldi	r24, 0x05	; 5
 3ec:	0e 94 6e 01 	call	0x2dc	; 0x2dc <reg_write>
 3f0:	87 ee       	ldi	r24, 0xE7	; 231
 3f2:	93 e0       	ldi	r25, 0x03	; 3
 3f4:	01 97       	sbiw	r24, 0x01	; 1
 3f6:	f1 f7       	brne	.-4      	; 0x3f4 <rf_init_as_tx+0x3e>
 3f8:	00 c0       	rjmp	.+0      	; 0x3fa <rf_init_as_tx+0x44>
 3fa:	00 00       	nop
 3fc:	08 95       	ret

000003fe <rf_send_byte>:
}

void rf_send_byte(unsigned char ucByte) {
 3fe:	ff 92       	push	r15
 400:	0f 93       	push	r16
 402:	1f 93       	push	r17
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
 408:	1f 92       	push	r1
 40a:	cd b7       	in	r28, 0x3d	; 61
 40c:	de b7       	in	r29, 0x3e	; 62
 40e:	89 83       	std	Y+1, r24	; 0x01
	}
};

void set_CE(unsigned char uset_CState){
	if (uset_CState) {
		PORT_SetPins( &RF_PORT,RF_CE_bm);
 410:	00 e4       	ldi	r16, 0x40	; 64
 412:	16 e0       	ldi	r17, 0x06	; 6
 414:	ff 24       	eor	r15, r15
 416:	f3 94       	inc	r15
 418:	f8 01       	movw	r30, r16
 41a:	f5 82       	std	Z+5, r15	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 41c:	fa e0       	ldi	r31, 0x0A	; 10
 41e:	fa 95       	dec	r31
 420:	f1 f7       	brne	.-4      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
}

void rf_send_byte(unsigned char ucByte) {
	set_CE(1);
	delay_us(15);
	payload_write(&ucByte, 1);
 422:	61 e0       	ldi	r22, 0x01	; 1
 424:	ce 01       	movw	r24, r28
 426:	01 96       	adiw	r24, 0x01	; 1
 428:	0e 94 88 01 	call	0x310	; 0x310 <payload_write>
void set_CE(unsigned char uset_CState){
	if (uset_CState) {
		PORT_SetPins( &RF_PORT,RF_CE_bm);
	}
	else {
		PORT_ClearPins( &RF_PORT,RF_CE_bm);
 42c:	f8 01       	movw	r30, r16
 42e:	f6 82       	std	Z+6, r15	; 0x06
void rf_send_byte(unsigned char ucByte) {
	set_CE(1);
	delay_us(15);
	payload_write(&ucByte, 1);
	set_CE(0);
}
 430:	0f 90       	pop	r0
 432:	df 91       	pop	r29
 434:	cf 91       	pop	r28
 436:	1f 91       	pop	r17
 438:	0f 91       	pop	r16
 43a:	ff 90       	pop	r15
 43c:	08 95       	ret

0000043e <rf_wait_until_data_sent>:

void rf_wait_until_data_sent(void) {
	while(status_bit_test(TX_DS) == 0) {};
 43e:	85 e0       	ldi	r24, 0x05	; 5
 440:	0e 94 b4 01 	call	0x368	; 0x368 <status_bit_test>
 444:	88 23       	and	r24, r24
 446:	d9 f3       	breq	.-10     	; 0x43e <rf_wait_until_data_sent>
}
 448:	08 95       	ret

0000044a <SPI_MasterInit>:
	data = spi->dataPacket->transmitData[0];
	spi->module->DATA = data;

	/* Successs */
	return (SPI_OK);
}
 44a:	af 92       	push	r10
 44c:	cf 92       	push	r12
 44e:	ef 92       	push	r14
 450:	0f 93       	push	r16
 452:	fc 01       	movw	r30, r24
 454:	60 83       	st	Z, r22
 456:	71 83       	std	Z+1, r23	; 0x01
 458:	42 83       	std	Z+2, r20	; 0x02
 45a:	53 83       	std	Z+3, r21	; 0x03
 45c:	14 82       	std	Z+4, r1	; 0x04
 45e:	c1 10       	cpse	r12, r1
 460:	02 c0       	rjmp	.+4      	; 0x466 <SPI_MasterInit+0x1c>
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	01 c0       	rjmp	.+2      	; 0x468 <SPI_MasterInit+0x1e>
 466:	80 e8       	ldi	r24, 0x80	; 128
 468:	9a 2d       	mov	r25, r10
 46a:	90 64       	ori	r25, 0x40	; 64
 46c:	a9 2e       	mov	r10, r25
 46e:	a8 2a       	or	r10, r24
 470:	21 11       	cpse	r18, r1
 472:	02 c0       	rjmp	.+4      	; 0x478 <SPI_MasterInit+0x2e>
 474:	80 e0       	ldi	r24, 0x00	; 0
 476:	01 c0       	rjmp	.+2      	; 0x47a <SPI_MasterInit+0x30>
 478:	80 e2       	ldi	r24, 0x20	; 32
 47a:	a8 2a       	or	r10, r24
 47c:	00 61       	ori	r16, 0x10	; 16
 47e:	0a 29       	or	r16, r10
 480:	db 01       	movw	r26, r22
 482:	0c 93       	st	X, r16
 484:	a0 81       	ld	r26, Z
 486:	b1 81       	ldd	r27, Z+1	; 0x01
 488:	11 96       	adiw	r26, 0x01	; 1
 48a:	ec 92       	st	X, r14
 48c:	15 82       	std	Z+5, r1	; 0x05
 48e:	16 82       	std	Z+6, r1	; 0x06
 490:	02 80       	ldd	r0, Z+2	; 0x02
 492:	f3 81       	ldd	r31, Z+3	; 0x03
 494:	e0 2d       	mov	r30, r0
 496:	80 ea       	ldi	r24, 0xA0	; 160
 498:	81 83       	std	Z+1, r24	; 0x01
 49a:	0f 91       	pop	r16
 49c:	ef 90       	pop	r14
 49e:	cf 90       	pop	r12
 4a0:	af 90       	pop	r10
 4a2:	08 95       	ret

000004a4 <SPI_MasterTransceiveByte>:
 *  \return           Data received from slave.
 */
uint8_t SPI_MasterTransceiveByte(SPI_Master_t *spi, uint8_t TXdata)
{
	/* Send pattern. */
	spi->module->DATA = TXdata;
 4a4:	dc 01       	movw	r26, r24
 4a6:	ed 91       	ld	r30, X+
 4a8:	fc 91       	ld	r31, X
 4aa:	11 97       	sbiw	r26, 0x01	; 1
 4ac:	63 83       	std	Z+3, r22	; 0x03

	/* Wait for transmission complete. */
	while(!(spi->module->STATUS & SPI_IF_bm)) {}
 4ae:	ed 91       	ld	r30, X+
 4b0:	fc 91       	ld	r31, X
 4b2:	82 81       	ldd	r24, Z+2	; 0x02
 4b4:	88 23       	and	r24, r24
 4b6:	ec f7       	brge	.-6      	; 0x4b2 <SPI_MasterTransceiveByte+0xe>
	/* Read received data. */
	uint8_t result = spi->module->DATA;
 4b8:	83 81       	ldd	r24, Z+3	; 0x03

	return(result);
}
 4ba:	08 95       	ret

000004bc <TWI_MasterArbitrationLostBusErrorHandler>:
 *  Handles TWI responses to lost arbitration and bus error.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi)
{
 4bc:	fc 01       	movw	r30, r24
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
 4be:	a0 81       	ld	r26, Z
 4c0:	b1 81       	ldd	r27, Z+1	; 0x01
 4c2:	14 96       	adiw	r26, 0x04	; 4
 4c4:	9c 91       	ld	r25, X
 4c6:	14 97       	sbiw	r26, 0x04	; 4

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
 4c8:	92 ff       	sbrs	r25, 2
 4ca:	03 c0       	rjmp	.+6      	; 0x4d2 <TWI_MasterArbitrationLostBusErrorHandler+0x16>
		twi->result = TWIM_RESULT_BUS_ERROR;
 4cc:	84 e0       	ldi	r24, 0x04	; 4
 4ce:	80 8f       	std	Z+24, r24	; 0x18
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <TWI_MasterArbitrationLostBusErrorHandler+0x1a>
	}
	/* If arbitration lost. */
	else {
		twi->result = TWIM_RESULT_ARBITRATION_LOST;
 4d2:	83 e0       	ldi	r24, 0x03	; 3
 4d4:	80 8f       	std	Z+24, r24	; 0x18
	}

	/* Clear interrupt flag. */
	twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
 4d6:	98 60       	ori	r25, 0x08	; 8
 4d8:	14 96       	adiw	r26, 0x04	; 4
 4da:	9c 93       	st	X, r25

	twi->status = TWIM_STATUS_READY;
 4dc:	17 8a       	std	Z+23, r1	; 0x17
 4de:	08 95       	ret

000004e0 <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi)
{
 4e0:	cf 93       	push	r28
 4e2:	df 93       	push	r29
 4e4:	fc 01       	movw	r30, r24
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite  = twi->bytesToWrite;
 4e6:	93 89       	ldd	r25, Z+19	; 0x13
	uint8_t bytesToRead   = twi->bytesToRead;
 4e8:	24 89       	ldd	r18, Z+20	; 0x14

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
 4ea:	a0 81       	ld	r26, Z
 4ec:	b1 81       	ldd	r27, Z+1	; 0x01
 4ee:	14 96       	adiw	r26, 0x04	; 4
 4f0:	8c 91       	ld	r24, X
 4f2:	14 97       	sbiw	r26, 0x04	; 4
 4f4:	84 ff       	sbrs	r24, 4
 4f6:	07 c0       	rjmp	.+14     	; 0x506 <TWI_MasterWriteHandler+0x26>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 4f8:	83 e0       	ldi	r24, 0x03	; 3
 4fa:	13 96       	adiw	r26, 0x03	; 3
 4fc:	8c 93       	st	X, r24
		twi->result = TWIM_RESULT_NACK_RECEIVED;
 4fe:	85 e0       	ldi	r24, 0x05	; 5
 500:	80 8f       	std	Z+24, r24	; 0x18
		twi->status = TWIM_STATUS_READY;
 502:	17 8a       	std	Z+23, r1	; 0x17
 504:	1c c0       	rjmp	.+56     	; 0x53e <TWI_MasterWriteHandler+0x5e>
	}

	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
 506:	85 89       	ldd	r24, Z+21	; 0x15
 508:	89 17       	cp	r24, r25
 50a:	58 f4       	brcc	.+22     	; 0x522 <TWI_MasterWriteHandler+0x42>
		uint8_t data = twi->writeData[twi->bytesWritten];
 50c:	85 89       	ldd	r24, Z+21	; 0x15
 50e:	ef 01       	movw	r28, r30
 510:	c8 0f       	add	r28, r24
 512:	d1 1d       	adc	r29, r1
 514:	8b 81       	ldd	r24, Y+3	; 0x03
		twi->interface->MASTER.DATA = data;
 516:	17 96       	adiw	r26, 0x07	; 7
 518:	8c 93       	st	X, r24
		++twi->bytesWritten;
 51a:	85 89       	ldd	r24, Z+21	; 0x15
 51c:	8f 5f       	subi	r24, 0xFF	; 255
 51e:	85 8b       	std	Z+21, r24	; 0x15
 520:	0e c0       	rjmp	.+28     	; 0x53e <TWI_MasterWriteHandler+0x5e>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
 522:	86 89       	ldd	r24, Z+22	; 0x16
 524:	82 17       	cp	r24, r18
 526:	28 f4       	brcc	.+10     	; 0x532 <TWI_MasterWriteHandler+0x52>
		uint8_t readAddress = twi->address | 0x01;
 528:	82 81       	ldd	r24, Z+2	; 0x02
 52a:	81 60       	ori	r24, 0x01	; 1
		twi->interface->MASTER.ADDR = readAddress;
 52c:	16 96       	adiw	r26, 0x06	; 6
 52e:	8c 93       	st	X, r24
 530:	06 c0       	rjmp	.+12     	; 0x53e <TWI_MasterWriteHandler+0x5e>
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 532:	83 e0       	ldi	r24, 0x03	; 3
 534:	13 96       	adiw	r26, 0x03	; 3
 536:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
 53c:	17 8a       	std	Z+23, r1	; 0x17
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_OK);
	}
}
 53e:	df 91       	pop	r29
 540:	cf 91       	pop	r28
 542:	08 95       	ret

00000544 <TWI_MasterReadHandler>:
 *  reading bytes from the TWI slave.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi)
{
 544:	fc 01       	movw	r30, r24
	/* Fetch data if bytes to be read. */
	if (twi->bytesRead < TWIM_READ_BUFFER_SIZE) {
 546:	86 89       	ldd	r24, Z+22	; 0x16
 548:	88 30       	cpi	r24, 0x08	; 8
 54a:	70 f4       	brcc	.+28     	; 0x568 <TWI_MasterReadHandler+0x24>
		uint8_t data = twi->interface->MASTER.DATA;
 54c:	a0 81       	ld	r26, Z
 54e:	b1 81       	ldd	r27, Z+1	; 0x01
 550:	17 96       	adiw	r26, 0x07	; 7
 552:	8c 91       	ld	r24, X
		twi->readData[twi->bytesRead] = data;
 554:	96 89       	ldd	r25, Z+22	; 0x16
 556:	df 01       	movw	r26, r30
 558:	a9 0f       	add	r26, r25
 55a:	b1 1d       	adc	r27, r1
 55c:	1b 96       	adiw	r26, 0x0b	; 11
 55e:	8c 93       	st	X, r24
		twi->bytesRead++;
 560:	86 89       	ldd	r24, Z+22	; 0x16
 562:	8f 5f       	subi	r24, 0xFF	; 255
 564:	86 8b       	std	Z+22, r24	; 0x16
 566:	08 c0       	rjmp	.+16     	; 0x578 <TWI_MasterReadHandler+0x34>
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 568:	a0 81       	ld	r26, Z
 56a:	b1 81       	ldd	r27, Z+1	; 0x01
 56c:	83 e0       	ldi	r24, 0x03	; 3
 56e:	13 96       	adiw	r26, 0x03	; 3
 570:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
 572:	82 e0       	ldi	r24, 0x02	; 2
 574:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
 576:	17 8a       	std	Z+23, r1	; 0x17
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_BUFFER_OVERFLOW);
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;
 578:	94 89       	ldd	r25, Z+20	; 0x14

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
 57a:	86 89       	ldd	r24, Z+22	; 0x16
 57c:	89 17       	cp	r24, r25
 57e:	30 f4       	brcc	.+12     	; 0x58c <TWI_MasterReadHandler+0x48>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
 580:	01 90       	ld	r0, Z+
 582:	f0 81       	ld	r31, Z
 584:	e0 2d       	mov	r30, r0
 586:	82 e0       	ldi	r24, 0x02	; 2
 588:	83 83       	std	Z+3, r24	; 0x03
 58a:	08 95       	ret
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
 58c:	a0 81       	ld	r26, Z
 58e:	b1 81       	ldd	r27, Z+1	; 0x01
 590:	87 e0       	ldi	r24, 0x07	; 7
 592:	13 96       	adiw	r26, 0x03	; 3
 594:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
 59a:	17 8a       	std	Z+23, r1	; 0x17
 59c:	08 95       	ret

0000059e <TWI_MasterInterruptHandler>:
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
 59e:	dc 01       	movw	r26, r24
 5a0:	ed 91       	ld	r30, X+
 5a2:	fc 91       	ld	r31, X
 5a4:	24 81       	ldd	r18, Z+4	; 0x04

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
 5a6:	32 2f       	mov	r19, r18
 5a8:	3c 70       	andi	r19, 0x0C	; 12
 5aa:	19 f0       	breq	.+6      	; 0x5b2 <TWI_MasterInterruptHandler+0x14>
	    (currentStatus & TWI_MASTER_BUSERR_bm)) {

		TWI_MasterArbitrationLostBusErrorHandler(twi);
 5ac:	0e 94 5e 02 	call	0x4bc	; 0x4bc <TWI_MasterArbitrationLostBusErrorHandler>
 5b0:	08 95       	ret
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
 5b2:	26 ff       	sbrs	r18, 6
 5b4:	03 c0       	rjmp	.+6      	; 0x5bc <TWI_MasterInterruptHandler+0x1e>
		TWI_MasterWriteHandler(twi);
 5b6:	0e 94 70 02 	call	0x4e0	; 0x4e0 <TWI_MasterWriteHandler>
 5ba:	08 95       	ret
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
 5bc:	22 23       	and	r18, r18
 5be:	1c f4       	brge	.+6      	; 0x5c6 <TWI_MasterInterruptHandler+0x28>
		TWI_MasterReadHandler(twi);
 5c0:	0e 94 a2 02 	call	0x544	; 0x544 <TWI_MasterReadHandler>
 5c4:	08 95       	ret
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
 5c6:	26 e0       	ldi	r18, 0x06	; 6
 5c8:	fc 01       	movw	r30, r24
 5ca:	20 8f       	std	Z+24, r18	; 0x18
	twi->status = TWIM_STATUS_READY;
 5cc:	17 8a       	std	Z+23, r1	; 0x17
 5ce:	08 95       	ret

000005d0 <_exit>:
 5d0:	f8 94       	cli

000005d2 <__stop_program>:
 5d2:	ff cf       	rjmp	.-2      	; 0x5d2 <__stop_program>
