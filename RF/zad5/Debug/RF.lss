
RF.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000041a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  0000048e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00802000  00802000  0000048e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000048e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003e71  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002be2  00000000  00000000  00004481  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bee  00000000  00000000  00007063  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a4  00000000  00000000  00007c54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000269f  00000000  00000000  00007ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000966  00000000  00000000  0000a597  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  0000aefd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
   8:	0c 94 12 01 	jmp	0x224	; 0x224 <__vector_2>
   c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  10:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  14:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  18:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  1c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  20:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  24:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  28:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  2c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  30:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  34:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  38:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  3c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  40:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  44:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  48:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  4c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  50:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  54:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  58:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  5c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  60:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  64:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  68:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  6c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  70:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  74:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  78:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  7c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  80:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  84:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  88:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  8c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  90:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  94:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  98:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  9c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  a0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  a4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  a8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  ac:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  b0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  b4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  b8:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__vector_46>
  bc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  c0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  c4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  c8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  cc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  d0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  d4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  d8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  dc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  e0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  e4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  e8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  ec:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  f0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  f4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  f8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
  fc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 100:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 104:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 108:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 10c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 110:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 114:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 118:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 11c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 120:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 124:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 128:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 12c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 130:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 134:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 138:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 13c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 140:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 144:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 148:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 14c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 150:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 154:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 158:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 15c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 160:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 164:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 168:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 16c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 170:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 174:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 178:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 17c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 180:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 184:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 188:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 18c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 190:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 194:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 198:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 19c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1a0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1a4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1a8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1ac:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1b0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1b4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1b8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1bc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1c0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1c4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1c8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1cc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1d0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1d4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1d8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1dc:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1e0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1e4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1e8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1ec:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1f0:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1f4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
 1f8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e2       	ldi	r29, 0x2F	; 47
 206:	de bf       	out	0x3e, r29	; 62

00000208 <__do_clear_bss>:
 208:	20 e2       	ldi	r18, 0x20	; 32
 20a:	a0 e0       	ldi	r26, 0x00	; 0
 20c:	b0 e2       	ldi	r27, 0x20	; 32
 20e:	01 c0       	rjmp	.+2      	; 0x212 <.do_clear_bss_start>

00000210 <.do_clear_bss_loop>:
 210:	1d 92       	st	X+, r1

00000212 <.do_clear_bss_start>:
 212:	aa 31       	cpi	r26, 0x1A	; 26
 214:	b2 07       	cpc	r27, r18
 216:	e1 f7       	brne	.-8      	; 0x210 <.do_clear_bss_loop>
 218:	0e 94 36 01 	call	0x26c	; 0x26c <main>
 21c:	0c 94 0b 02 	jmp	0x416	; 0x416 <_exit>

00000220 <__bad_interrupt>:
 220:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000224 <__vector_2>:
#include "modules/avr_compiler.h"
#include <avr/sleep.h>

#define PORTC3__bm 1 << 3

ISR(PORTC_INT0_vect) { // interrupt service routine
 224:	1f 92       	push	r1
 226:	0f 92       	push	r0
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	0f 92       	push	r0
 22c:	11 24       	eor	r1, r1
 22e:	2f 93       	push	r18
 230:	3f 93       	push	r19
 232:	4f 93       	push	r20
 234:	5f 93       	push	r21
 236:	6f 93       	push	r22
 238:	7f 93       	push	r23
 23a:	8f 93       	push	r24
 23c:	9f 93       	push	r25
 23e:	af 93       	push	r26
 240:	bf 93       	push	r27
 242:	ef 93       	push	r30
 244:	ff 93       	push	r31
	led_toggle();
 246:	0e 94 7d 01 	call	0x2fa	; 0x2fa <led_toggle>
};
 24a:	ff 91       	pop	r31
 24c:	ef 91       	pop	r30
 24e:	bf 91       	pop	r27
 250:	af 91       	pop	r26
 252:	9f 91       	pop	r25
 254:	8f 91       	pop	r24
 256:	7f 91       	pop	r23
 258:	6f 91       	pop	r22
 25a:	5f 91       	pop	r21
 25c:	4f 91       	pop	r20
 25e:	3f 91       	pop	r19
 260:	2f 91       	pop	r18
 262:	0f 90       	pop	r0
 264:	0f be       	out	0x3f, r0	; 63
 266:	0f 90       	pop	r0
 268:	1f 90       	pop	r1
 26a:	18 95       	reti

0000026c <main>:
int main (void) {
	led_init();
 26c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <led_init>
	PORTC.DIRCLR = PORTC3__bm;
 270:	e0 e4       	ldi	r30, 0x40	; 64
 272:	f6 e0       	ldi	r31, 0x06	; 6
 274:	88 e0       	ldi	r24, 0x08	; 8
 276:	82 83       	std	Z+2, r24	; 0x02
	PORTC.PIN3CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
 278:	8a e1       	ldi	r24, 0x1A	; 26
 27a:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.INT0MASK |= PORTC3__bm;
 27c:	82 85       	ldd	r24, Z+10	; 0x0a
 27e:	88 60       	ori	r24, 0x08	; 8
 280:	82 87       	std	Z+10, r24	; 0x0a
	PORTC.INTCTRL = PORT_INT0LVL_LO_gc;
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	81 87       	std	Z+9, r24	; 0x09
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
 286:	e0 ea       	ldi	r30, 0xA0	; 160
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	82 81       	ldd	r24, Z+2	; 0x02
 28c:	81 60       	ori	r24, 0x01	; 1
 28e:	82 83       	std	Z+2, r24	; 0x02
	sei(); // global interrupts enabling
 290:	78 94       	sei
	set_sleep_mode(SLEEP_MODE_IDLE);
 292:	e8 e4       	ldi	r30, 0x48	; 72
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	80 81       	ld	r24, Z
 298:	81 7f       	andi	r24, 0xF1	; 241
 29a:	80 83       	st	Z, r24
	sleep_enable();
 29c:	80 81       	ld	r24, Z
 29e:	81 60       	ori	r24, 0x01	; 1
 2a0:	80 83       	st	Z, r24
	while(1) {
		sleep_cpu();
 2a2:	88 95       	sleep
 2a4:	fe cf       	rjmp	.-4      	; 0x2a2 <main+0x36>

000002a6 <__vector_46>:
	return acc+128; 
}

/*! TWIE Master Interrupt vector. */
ISR(TWIE_TWIM_vect)
{
 2a6:	1f 92       	push	r1
 2a8:	0f 92       	push	r0
 2aa:	0f b6       	in	r0, 0x3f	; 63
 2ac:	0f 92       	push	r0
 2ae:	11 24       	eor	r1, r1
 2b0:	2f 93       	push	r18
 2b2:	3f 93       	push	r19
 2b4:	4f 93       	push	r20
 2b6:	5f 93       	push	r21
 2b8:	6f 93       	push	r22
 2ba:	7f 93       	push	r23
 2bc:	8f 93       	push	r24
 2be:	9f 93       	push	r25
 2c0:	af 93       	push	r26
 2c2:	bf 93       	push	r27
 2c4:	ef 93       	push	r30
 2c6:	ff 93       	push	r31
	TWI_MasterInterruptHandler(&twiMaster);
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	90 e2       	ldi	r25, 0x20	; 32
 2cc:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <TWI_MasterInterruptHandler>
}
 2d0:	ff 91       	pop	r31
 2d2:	ef 91       	pop	r30
 2d4:	bf 91       	pop	r27
 2d6:	af 91       	pop	r26
 2d8:	9f 91       	pop	r25
 2da:	8f 91       	pop	r24
 2dc:	7f 91       	pop	r23
 2de:	6f 91       	pop	r22
 2e0:	5f 91       	pop	r21
 2e2:	4f 91       	pop	r20
 2e4:	3f 91       	pop	r19
 2e6:	2f 91       	pop	r18
 2e8:	0f 90       	pop	r0
 2ea:	0f be       	out	0x3f, r0	; 63
 2ec:	0f 90       	pop	r0
 2ee:	1f 90       	pop	r1
 2f0:	18 95       	reti

000002f2 <led_init>:

#define LED_PORT PORTD
#define LED_bm	(1<<4)

void led_init(void){
	PORT_SetPinsAsOutput( &LED_PORT,LED_bm);
 2f2:	80 e1       	ldi	r24, 0x10	; 16
 2f4:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x700661>
 2f8:	08 95       	ret

000002fa <led_toggle>:
}

void led_toggle(void){
	PORT_TogglePins(&LED_PORT,LED_bm);
 2fa:	80 e1       	ldi	r24, 0x10	; 16
 2fc:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <__TEXT_REGION_LENGTH__+0x700667>
 300:	08 95       	ret

00000302 <TWI_MasterArbitrationLostBusErrorHandler>:
 *  Handles TWI responses to lost arbitration and bus error.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi)
{
 302:	fc 01       	movw	r30, r24
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
 304:	a0 81       	ld	r26, Z
 306:	b1 81       	ldd	r27, Z+1	; 0x01
 308:	14 96       	adiw	r26, 0x04	; 4
 30a:	9c 91       	ld	r25, X
 30c:	14 97       	sbiw	r26, 0x04	; 4

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
 30e:	92 ff       	sbrs	r25, 2
 310:	03 c0       	rjmp	.+6      	; 0x318 <TWI_MasterArbitrationLostBusErrorHandler+0x16>
		twi->result = TWIM_RESULT_BUS_ERROR;
 312:	84 e0       	ldi	r24, 0x04	; 4
 314:	80 8f       	std	Z+24, r24	; 0x18
 316:	02 c0       	rjmp	.+4      	; 0x31c <TWI_MasterArbitrationLostBusErrorHandler+0x1a>
	}
	/* If arbitration lost. */
	else {
		twi->result = TWIM_RESULT_ARBITRATION_LOST;
 318:	83 e0       	ldi	r24, 0x03	; 3
 31a:	80 8f       	std	Z+24, r24	; 0x18
	}

	/* Clear interrupt flag. */
	twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
 31c:	98 60       	ori	r25, 0x08	; 8
 31e:	14 96       	adiw	r26, 0x04	; 4
 320:	9c 93       	st	X, r25

	twi->status = TWIM_STATUS_READY;
 322:	17 8a       	std	Z+23, r1	; 0x17
 324:	08 95       	ret

00000326 <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi)
{
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
 32a:	fc 01       	movw	r30, r24
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite  = twi->bytesToWrite;
 32c:	93 89       	ldd	r25, Z+19	; 0x13
	uint8_t bytesToRead   = twi->bytesToRead;
 32e:	24 89       	ldd	r18, Z+20	; 0x14

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
 330:	a0 81       	ld	r26, Z
 332:	b1 81       	ldd	r27, Z+1	; 0x01
 334:	14 96       	adiw	r26, 0x04	; 4
 336:	8c 91       	ld	r24, X
 338:	14 97       	sbiw	r26, 0x04	; 4
 33a:	84 ff       	sbrs	r24, 4
 33c:	07 c0       	rjmp	.+14     	; 0x34c <TWI_MasterWriteHandler+0x26>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 33e:	83 e0       	ldi	r24, 0x03	; 3
 340:	13 96       	adiw	r26, 0x03	; 3
 342:	8c 93       	st	X, r24
		twi->result = TWIM_RESULT_NACK_RECEIVED;
 344:	85 e0       	ldi	r24, 0x05	; 5
 346:	80 8f       	std	Z+24, r24	; 0x18
		twi->status = TWIM_STATUS_READY;
 348:	17 8a       	std	Z+23, r1	; 0x17
 34a:	1c c0       	rjmp	.+56     	; 0x384 <TWI_MasterWriteHandler+0x5e>
	}

	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
 34c:	85 89       	ldd	r24, Z+21	; 0x15
 34e:	89 17       	cp	r24, r25
 350:	58 f4       	brcc	.+22     	; 0x368 <TWI_MasterWriteHandler+0x42>
		uint8_t data = twi->writeData[twi->bytesWritten];
 352:	85 89       	ldd	r24, Z+21	; 0x15
 354:	ef 01       	movw	r28, r30
 356:	c8 0f       	add	r28, r24
 358:	d1 1d       	adc	r29, r1
 35a:	8b 81       	ldd	r24, Y+3	; 0x03
		twi->interface->MASTER.DATA = data;
 35c:	17 96       	adiw	r26, 0x07	; 7
 35e:	8c 93       	st	X, r24
		++twi->bytesWritten;
 360:	85 89       	ldd	r24, Z+21	; 0x15
 362:	8f 5f       	subi	r24, 0xFF	; 255
 364:	85 8b       	std	Z+21, r24	; 0x15
 366:	0e c0       	rjmp	.+28     	; 0x384 <TWI_MasterWriteHandler+0x5e>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
 368:	86 89       	ldd	r24, Z+22	; 0x16
 36a:	82 17       	cp	r24, r18
 36c:	28 f4       	brcc	.+10     	; 0x378 <TWI_MasterWriteHandler+0x52>
		uint8_t readAddress = twi->address | 0x01;
 36e:	82 81       	ldd	r24, Z+2	; 0x02
 370:	81 60       	ori	r24, 0x01	; 1
		twi->interface->MASTER.ADDR = readAddress;
 372:	16 96       	adiw	r26, 0x06	; 6
 374:	8c 93       	st	X, r24
 376:	06 c0       	rjmp	.+12     	; 0x384 <TWI_MasterWriteHandler+0x5e>
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 378:	83 e0       	ldi	r24, 0x03	; 3
 37a:	13 96       	adiw	r26, 0x03	; 3
 37c:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
 382:	17 8a       	std	Z+23, r1	; 0x17
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_OK);
	}
}
 384:	df 91       	pop	r29
 386:	cf 91       	pop	r28
 388:	08 95       	ret

0000038a <TWI_MasterReadHandler>:
 *  reading bytes from the TWI slave.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi)
{
 38a:	fc 01       	movw	r30, r24
	/* Fetch data if bytes to be read. */
	if (twi->bytesRead < TWIM_READ_BUFFER_SIZE) {
 38c:	86 89       	ldd	r24, Z+22	; 0x16
 38e:	88 30       	cpi	r24, 0x08	; 8
 390:	70 f4       	brcc	.+28     	; 0x3ae <TWI_MasterReadHandler+0x24>
		uint8_t data = twi->interface->MASTER.DATA;
 392:	a0 81       	ld	r26, Z
 394:	b1 81       	ldd	r27, Z+1	; 0x01
 396:	17 96       	adiw	r26, 0x07	; 7
 398:	8c 91       	ld	r24, X
		twi->readData[twi->bytesRead] = data;
 39a:	96 89       	ldd	r25, Z+22	; 0x16
 39c:	df 01       	movw	r26, r30
 39e:	a9 0f       	add	r26, r25
 3a0:	b1 1d       	adc	r27, r1
 3a2:	1b 96       	adiw	r26, 0x0b	; 11
 3a4:	8c 93       	st	X, r24
		twi->bytesRead++;
 3a6:	86 89       	ldd	r24, Z+22	; 0x16
 3a8:	8f 5f       	subi	r24, 0xFF	; 255
 3aa:	86 8b       	std	Z+22, r24	; 0x16
 3ac:	08 c0       	rjmp	.+16     	; 0x3be <TWI_MasterReadHandler+0x34>
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
 3ae:	a0 81       	ld	r26, Z
 3b0:	b1 81       	ldd	r27, Z+1	; 0x01
 3b2:	83 e0       	ldi	r24, 0x03	; 3
 3b4:	13 96       	adiw	r26, 0x03	; 3
 3b6:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
 3b8:	82 e0       	ldi	r24, 0x02	; 2
 3ba:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
 3bc:	17 8a       	std	Z+23, r1	; 0x17
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_BUFFER_OVERFLOW);
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;
 3be:	94 89       	ldd	r25, Z+20	; 0x14

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
 3c0:	86 89       	ldd	r24, Z+22	; 0x16
 3c2:	89 17       	cp	r24, r25
 3c4:	30 f4       	brcc	.+12     	; 0x3d2 <TWI_MasterReadHandler+0x48>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
 3c6:	01 90       	ld	r0, Z+
 3c8:	f0 81       	ld	r31, Z
 3ca:	e0 2d       	mov	r30, r0
 3cc:	82 e0       	ldi	r24, 0x02	; 2
 3ce:	83 83       	std	Z+3, r24	; 0x03
 3d0:	08 95       	ret
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
 3d2:	a0 81       	ld	r26, Z
 3d4:	b1 81       	ldd	r27, Z+1	; 0x01
 3d6:	87 e0       	ldi	r24, 0x07	; 7
 3d8:	13 96       	adiw	r26, 0x03	; 3
 3da:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
 3e0:	17 8a       	std	Z+23, r1	; 0x17
 3e2:	08 95       	ret

000003e4 <TWI_MasterInterruptHandler>:
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
 3e4:	dc 01       	movw	r26, r24
 3e6:	ed 91       	ld	r30, X+
 3e8:	fc 91       	ld	r31, X
 3ea:	24 81       	ldd	r18, Z+4	; 0x04

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
 3ec:	32 2f       	mov	r19, r18
 3ee:	3c 70       	andi	r19, 0x0C	; 12
 3f0:	19 f0       	breq	.+6      	; 0x3f8 <TWI_MasterInterruptHandler+0x14>
	    (currentStatus & TWI_MASTER_BUSERR_bm)) {

		TWI_MasterArbitrationLostBusErrorHandler(twi);
 3f2:	0e 94 81 01 	call	0x302	; 0x302 <TWI_MasterArbitrationLostBusErrorHandler>
 3f6:	08 95       	ret
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
 3f8:	26 ff       	sbrs	r18, 6
 3fa:	03 c0       	rjmp	.+6      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		TWI_MasterWriteHandler(twi);
 3fc:	0e 94 93 01 	call	0x326	; 0x326 <TWI_MasterWriteHandler>
 400:	08 95       	ret
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
 402:	22 23       	and	r18, r18
 404:	1c f4       	brge	.+6      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
		TWI_MasterReadHandler(twi);
 406:	0e 94 c5 01 	call	0x38a	; 0x38a <TWI_MasterReadHandler>
 40a:	08 95       	ret
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
 40c:	26 e0       	ldi	r18, 0x06	; 6
 40e:	fc 01       	movw	r30, r24
 410:	20 8f       	std	Z+24, r18	; 0x18
	twi->status = TWIM_STATUS_READY;
 412:	17 8a       	std	Z+23, r1	; 0x17
 414:	08 95       	ret

00000416 <_exit>:
 416:	f8 94       	cli

00000418 <__stop_program>:
 418:	ff cf       	rjmp	.-2      	; 0x418 <__stop_program>
