
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000269e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00802000  0000269e  00002732  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  00802016  00802016  00002748  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002748  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000228  00000000  00000000  000027a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00006c61  00000000  00000000  000029d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001263  00000000  00000000  00009631  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000039ff  00000000  00000000  0000a894  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000694  00000000  00000000  0000e294  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00029cb8  00000000  00000000  0000e928  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002489  00000000  00000000  000385e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000210  00000000  00000000  0003aa70  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000012de  00000000  00000000  0003ac80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	84 c1       	rjmp	.+776    	; 0x30a <__ctors_end>
       2:	00 00       	nop
       4:	a2 c1       	rjmp	.+836    	; 0x34a <__bad_interrupt>
       6:	00 00       	nop
       8:	a0 c1       	rjmp	.+832    	; 0x34a <__bad_interrupt>
       a:	00 00       	nop
       c:	9e c1       	rjmp	.+828    	; 0x34a <__bad_interrupt>
       e:	00 00       	nop
      10:	9c c1       	rjmp	.+824    	; 0x34a <__bad_interrupt>
      12:	00 00       	nop
      14:	9a c1       	rjmp	.+820    	; 0x34a <__bad_interrupt>
      16:	00 00       	nop
      18:	98 c1       	rjmp	.+816    	; 0x34a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	96 c1       	rjmp	.+812    	; 0x34a <__bad_interrupt>
      1e:	00 00       	nop
      20:	94 c1       	rjmp	.+808    	; 0x34a <__bad_interrupt>
      22:	00 00       	nop
      24:	92 c1       	rjmp	.+804    	; 0x34a <__bad_interrupt>
      26:	00 00       	nop
      28:	90 c1       	rjmp	.+800    	; 0x34a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8e c1       	rjmp	.+796    	; 0x34a <__bad_interrupt>
      2e:	00 00       	nop
      30:	8c c1       	rjmp	.+792    	; 0x34a <__bad_interrupt>
      32:	00 00       	nop
      34:	8a c1       	rjmp	.+788    	; 0x34a <__bad_interrupt>
      36:	00 00       	nop
      38:	88 c1       	rjmp	.+784    	; 0x34a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	86 c1       	rjmp	.+780    	; 0x34a <__bad_interrupt>
      3e:	00 00       	nop
      40:	84 c1       	rjmp	.+776    	; 0x34a <__bad_interrupt>
      42:	00 00       	nop
      44:	82 c1       	rjmp	.+772    	; 0x34a <__bad_interrupt>
      46:	00 00       	nop
      48:	80 c1       	rjmp	.+768    	; 0x34a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7e c1       	rjmp	.+764    	; 0x34a <__bad_interrupt>
      4e:	00 00       	nop
      50:	7c c1       	rjmp	.+760    	; 0x34a <__bad_interrupt>
      52:	00 00       	nop
      54:	7a c1       	rjmp	.+756    	; 0x34a <__bad_interrupt>
      56:	00 00       	nop
      58:	78 c1       	rjmp	.+752    	; 0x34a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	76 c1       	rjmp	.+748    	; 0x34a <__bad_interrupt>
      5e:	00 00       	nop
      60:	74 c1       	rjmp	.+744    	; 0x34a <__bad_interrupt>
      62:	00 00       	nop
      64:	72 c1       	rjmp	.+740    	; 0x34a <__bad_interrupt>
      66:	00 00       	nop
      68:	70 c1       	rjmp	.+736    	; 0x34a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6e c1       	rjmp	.+732    	; 0x34a <__bad_interrupt>
      6e:	00 00       	nop
      70:	6c c1       	rjmp	.+728    	; 0x34a <__bad_interrupt>
      72:	00 00       	nop
      74:	6a c1       	rjmp	.+724    	; 0x34a <__bad_interrupt>
      76:	00 00       	nop
      78:	68 c1       	rjmp	.+720    	; 0x34a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	66 c1       	rjmp	.+716    	; 0x34a <__bad_interrupt>
      7e:	00 00       	nop
      80:	64 c1       	rjmp	.+712    	; 0x34a <__bad_interrupt>
      82:	00 00       	nop
      84:	62 c1       	rjmp	.+708    	; 0x34a <__bad_interrupt>
      86:	00 00       	nop
      88:	60 c1       	rjmp	.+704    	; 0x34a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5e c1       	rjmp	.+700    	; 0x34a <__bad_interrupt>
      8e:	00 00       	nop
      90:	5c c1       	rjmp	.+696    	; 0x34a <__bad_interrupt>
      92:	00 00       	nop
      94:	5a c1       	rjmp	.+692    	; 0x34a <__bad_interrupt>
      96:	00 00       	nop
      98:	58 c1       	rjmp	.+688    	; 0x34a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	db c2       	rjmp	.+1462   	; 0x654 <__vector_39>
      9e:	00 00       	nop
      a0:	0b c3       	rjmp	.+1558   	; 0x6b8 <__vector_40>
      a2:	00 00       	nop
      a4:	3b c3       	rjmp	.+1654   	; 0x71c <__vector_41>
      a6:	00 00       	nop
      a8:	6b c3       	rjmp	.+1750   	; 0x780 <__vector_42>
      aa:	00 00       	nop
      ac:	4e c1       	rjmp	.+668    	; 0x34a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4c c1       	rjmp	.+664    	; 0x34a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	4a c1       	rjmp	.+660    	; 0x34a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	48 c1       	rjmp	.+656    	; 0x34a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	46 c1       	rjmp	.+652    	; 0x34a <__bad_interrupt>
      be:	00 00       	nop
      c0:	44 c1       	rjmp	.+648    	; 0x34a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	42 c1       	rjmp	.+644    	; 0x34a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	40 c1       	rjmp	.+640    	; 0x34a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	3e c1       	rjmp	.+636    	; 0x34a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	3c c1       	rjmp	.+632    	; 0x34a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	3a c1       	rjmp	.+628    	; 0x34a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	38 c1       	rjmp	.+624    	; 0x34a <__bad_interrupt>
      da:	00 00       	nop
      dc:	36 c1       	rjmp	.+620    	; 0x34a <__bad_interrupt>
      de:	00 00       	nop
      e0:	34 c1       	rjmp	.+616    	; 0x34a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	32 c1       	rjmp	.+612    	; 0x34a <__bad_interrupt>
      e6:	00 00       	nop
      e8:	30 c1       	rjmp	.+608    	; 0x34a <__bad_interrupt>
      ea:	00 00       	nop
      ec:	2e c1       	rjmp	.+604    	; 0x34a <__bad_interrupt>
      ee:	00 00       	nop
      f0:	2c c1       	rjmp	.+600    	; 0x34a <__bad_interrupt>
      f2:	00 00       	nop
      f4:	2a c1       	rjmp	.+596    	; 0x34a <__bad_interrupt>
      f6:	00 00       	nop
      f8:	28 c1       	rjmp	.+592    	; 0x34a <__bad_interrupt>
      fa:	00 00       	nop
      fc:	26 c1       	rjmp	.+588    	; 0x34a <__bad_interrupt>
      fe:	00 00       	nop
     100:	24 c1       	rjmp	.+584    	; 0x34a <__bad_interrupt>
     102:	00 00       	nop
     104:	22 c1       	rjmp	.+580    	; 0x34a <__bad_interrupt>
     106:	00 00       	nop
     108:	20 c1       	rjmp	.+576    	; 0x34a <__bad_interrupt>
     10a:	00 00       	nop
     10c:	1e c1       	rjmp	.+572    	; 0x34a <__bad_interrupt>
     10e:	00 00       	nop
     110:	1c c1       	rjmp	.+568    	; 0x34a <__bad_interrupt>
     112:	00 00       	nop
     114:	1a c1       	rjmp	.+564    	; 0x34a <__bad_interrupt>
     116:	00 00       	nop
     118:	18 c1       	rjmp	.+560    	; 0x34a <__bad_interrupt>
     11a:	00 00       	nop
     11c:	d3 c1       	rjmp	.+934    	; 0x4c4 <__vector_71>
     11e:	00 00       	nop
     120:	03 c2       	rjmp	.+1030   	; 0x528 <__vector_72>
     122:	00 00       	nop
     124:	33 c2       	rjmp	.+1126   	; 0x58c <__vector_73>
     126:	00 00       	nop
     128:	63 c2       	rjmp	.+1222   	; 0x5f0 <__vector_74>
     12a:	00 00       	nop
     12c:	0e c1       	rjmp	.+540    	; 0x34a <__bad_interrupt>
     12e:	00 00       	nop
     130:	0c c1       	rjmp	.+536    	; 0x34a <__bad_interrupt>
     132:	00 00       	nop
     134:	0a c1       	rjmp	.+532    	; 0x34a <__bad_interrupt>
     136:	00 00       	nop
     138:	08 c1       	rjmp	.+528    	; 0x34a <__bad_interrupt>
     13a:	00 00       	nop
     13c:	06 c1       	rjmp	.+524    	; 0x34a <__bad_interrupt>
     13e:	00 00       	nop
     140:	04 c1       	rjmp	.+520    	; 0x34a <__bad_interrupt>
     142:	00 00       	nop
     144:	02 c1       	rjmp	.+516    	; 0x34a <__bad_interrupt>
     146:	00 00       	nop
     148:	00 c1       	rjmp	.+512    	; 0x34a <__bad_interrupt>
     14a:	00 00       	nop
     14c:	fe c0       	rjmp	.+508    	; 0x34a <__bad_interrupt>
     14e:	00 00       	nop
     150:	fc c0       	rjmp	.+504    	; 0x34a <__bad_interrupt>
     152:	00 00       	nop
     154:	fa c0       	rjmp	.+500    	; 0x34a <__bad_interrupt>
     156:	00 00       	nop
     158:	f8 c0       	rjmp	.+496    	; 0x34a <__bad_interrupt>
     15a:	00 00       	nop
     15c:	f6 c0       	rjmp	.+492    	; 0x34a <__bad_interrupt>
     15e:	00 00       	nop
     160:	f4 c0       	rjmp	.+488    	; 0x34a <__bad_interrupt>
     162:	00 00       	nop
     164:	f2 c0       	rjmp	.+484    	; 0x34a <__bad_interrupt>
     166:	00 00       	nop
     168:	f0 c0       	rjmp	.+480    	; 0x34a <__bad_interrupt>
     16a:	00 00       	nop
     16c:	ee c0       	rjmp	.+476    	; 0x34a <__bad_interrupt>
     16e:	00 00       	nop
     170:	ec c0       	rjmp	.+472    	; 0x34a <__bad_interrupt>
     172:	00 00       	nop
     174:	ea c0       	rjmp	.+468    	; 0x34a <__bad_interrupt>
     176:	00 00       	nop
     178:	e8 c0       	rjmp	.+464    	; 0x34a <__bad_interrupt>
     17a:	00 00       	nop
     17c:	e6 c0       	rjmp	.+460    	; 0x34a <__bad_interrupt>
     17e:	00 00       	nop
     180:	e4 c0       	rjmp	.+456    	; 0x34a <__bad_interrupt>
     182:	00 00       	nop
     184:	e2 c0       	rjmp	.+452    	; 0x34a <__bad_interrupt>
     186:	00 00       	nop
     188:	e0 c0       	rjmp	.+448    	; 0x34a <__bad_interrupt>
     18a:	00 00       	nop
     18c:	de c0       	rjmp	.+444    	; 0x34a <__bad_interrupt>
     18e:	00 00       	nop
     190:	dc c0       	rjmp	.+440    	; 0x34a <__bad_interrupt>
     192:	00 00       	nop
     194:	da c0       	rjmp	.+436    	; 0x34a <__bad_interrupt>
     196:	00 00       	nop
     198:	d8 c0       	rjmp	.+432    	; 0x34a <__bad_interrupt>
     19a:	00 00       	nop
     19c:	d6 c0       	rjmp	.+428    	; 0x34a <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	d4 c0       	rjmp	.+424    	; 0x34a <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	d2 c0       	rjmp	.+420    	; 0x34a <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	d0 c0       	rjmp	.+416    	; 0x34a <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	ce c0       	rjmp	.+412    	; 0x34a <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	cc c0       	rjmp	.+408    	; 0x34a <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	ca c0       	rjmp	.+404    	; 0x34a <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	c8 c0       	rjmp	.+400    	; 0x34a <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	c6 c0       	rjmp	.+396    	; 0x34a <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	c4 c0       	rjmp	.+392    	; 0x34a <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	c2 c0       	rjmp	.+388    	; 0x34a <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	c0 c0       	rjmp	.+384    	; 0x34a <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	be c0       	rjmp	.+380    	; 0x34a <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	bc c0       	rjmp	.+376    	; 0x34a <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	ba c0       	rjmp	.+372    	; 0x34a <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	b8 c0       	rjmp	.+368    	; 0x34a <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	b6 c0       	rjmp	.+364    	; 0x34a <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	b4 c0       	rjmp	.+360    	; 0x34a <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	b2 c0       	rjmp	.+356    	; 0x34a <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	b0 c0       	rjmp	.+352    	; 0x34a <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	ae c0       	rjmp	.+348    	; 0x34a <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	ac c0       	rjmp	.+344    	; 0x34a <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	aa c0       	rjmp	.+340    	; 0x34a <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	a8 c0       	rjmp	.+336    	; 0x34a <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	6e 61       	ori	r22, 0x1E	; 30
     1fe:	6e 00       	.word	0x006e	; ????

00000200 <__c.2159>:
     200:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     210:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     220:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     230:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     240:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     250:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     260:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     270:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     280:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     290:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2a0:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2b0:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2c0:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2d0:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2e0:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2f0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002fe <__c.2299>:
     2fe:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

0000030a <__ctors_end>:
     30a:	11 24       	eor	r1, r1
     30c:	1f be       	out	0x3f, r1	; 63
     30e:	cf ef       	ldi	r28, 0xFF	; 255
     310:	cd bf       	out	0x3d, r28	; 61
     312:	df e5       	ldi	r29, 0x5F	; 95
     314:	de bf       	out	0x3e, r29	; 62
     316:	00 e0       	ldi	r16, 0x00	; 0
     318:	0c bf       	out	0x3c, r16	; 60

0000031a <__do_copy_data>:
     31a:	10 e2       	ldi	r17, 0x20	; 32
     31c:	a0 e0       	ldi	r26, 0x00	; 0
     31e:	b0 e2       	ldi	r27, 0x20	; 32
     320:	ee e9       	ldi	r30, 0x9E	; 158
     322:	f6 e2       	ldi	r31, 0x26	; 38
     324:	00 e0       	ldi	r16, 0x00	; 0
     326:	0b bf       	out	0x3b, r16	; 59
     328:	02 c0       	rjmp	.+4      	; 0x32e <__do_copy_data+0x14>
     32a:	07 90       	elpm	r0, Z+
     32c:	0d 92       	st	X+, r0
     32e:	a6 31       	cpi	r26, 0x16	; 22
     330:	b1 07       	cpc	r27, r17
     332:	d9 f7       	brne	.-10     	; 0x32a <__do_copy_data+0x10>

00000334 <__do_clear_bss>:
     334:	20 e2       	ldi	r18, 0x20	; 32
     336:	a6 e1       	ldi	r26, 0x16	; 22
     338:	b0 e2       	ldi	r27, 0x20	; 32
     33a:	01 c0       	rjmp	.+2      	; 0x33e <.do_clear_bss_start>

0000033c <.do_clear_bss_loop>:
     33c:	1d 92       	st	X+, r1

0000033e <.do_clear_bss_start>:
     33e:	a2 33       	cpi	r26, 0x32	; 50
     340:	b2 07       	cpc	r27, r18
     342:	e1 f7       	brne	.-8      	; 0x33c <.do_clear_bss_loop>
     344:	78 d5       	rcall	.+2800   	; 0xe36 <main>
     346:	0c 94 4d 13 	jmp	0x269a	; 0x269a <_exit>

0000034a <__bad_interrupt>:
     34a:	5a ce       	rjmp	.-844    	; 0x0 <__vectors>

0000034c <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     34c:	8f ef       	ldi	r24, 0xFF	; 255
     34e:	80 93 70 00 	sts	0x0070, r24
     352:	80 93 71 00 	sts	0x0071, r24
     356:	80 93 72 00 	sts	0x0072, r24
     35a:	80 93 73 00 	sts	0x0073, r24
     35e:	80 93 74 00 	sts	0x0074, r24
     362:	80 93 75 00 	sts	0x0075, r24
     366:	80 93 76 00 	sts	0x0076, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     36a:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     36c:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     36e:	e0 e5       	ldi	r30, 0x50	; 80
     370:	f0 e0       	ldi	r31, 0x00	; 0
     372:	90 81       	ld	r25, Z
     374:	92 60       	ori	r25, 0x02	; 2
     376:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     378:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     37a:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     37c:	81 ff       	sbrs	r24, 1
     37e:	fd cf       	rjmp	.-6      	; 0x37a <sysclk_init+0x2e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     380:	61 e0       	ldi	r22, 0x01	; 1
     382:	80 e4       	ldi	r24, 0x40	; 64
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	15 d3       	rcall	.+1578   	; 0x9b2 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     388:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     38a:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     38c:	e0 e5       	ldi	r30, 0x50	; 80
     38e:	f0 e0       	ldi	r31, 0x00	; 0
     390:	90 81       	ld	r25, Z
     392:	9e 7f       	andi	r25, 0xFE	; 254
     394:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     396:	8f bf       	out	0x3f, r24	; 63
     398:	08 95       	ret

0000039a <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     39a:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     39c:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     39e:	e8 2f       	mov	r30, r24
     3a0:	f0 e0       	ldi	r31, 0x00	; 0
     3a2:	e0 59       	subi	r30, 0x90	; 144
     3a4:	ff 4f       	sbci	r31, 0xFF	; 255
     3a6:	60 95       	com	r22
     3a8:	80 81       	ld	r24, Z
     3aa:	68 23       	and	r22, r24
     3ac:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     3ae:	9f bf       	out	0x3f, r25	; 63
     3b0:	08 95       	ret

000003b2 <sysclk_disable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     3b2:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     3b4:	f8 94       	cli

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
     3b6:	e8 2f       	mov	r30, r24
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	e0 59       	subi	r30, 0x90	; 144
     3bc:	ff 4f       	sbci	r31, 0xFF	; 255
     3be:	80 81       	ld	r24, Z
     3c0:	68 2b       	or	r22, r24
     3c2:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     3c4:	9f bf       	out	0x3f, r25	; 63
     3c6:	08 95       	ret

000003c8 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	1f 92       	push	r1
     3ce:	cd b7       	in	r28, 0x3d	; 61
     3d0:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     3d2:	80 91 22 20 	lds	r24, 0x2022
     3d6:	90 91 23 20 	lds	r25, 0x2023
     3da:	e0 91 1e 20 	lds	r30, 0x201E
     3de:	f0 91 1f 20 	lds	r31, 0x201F
     3e2:	be 01       	movw	r22, r28
     3e4:	6f 5f       	subi	r22, 0xFF	; 255
     3e6:	7f 4f       	sbci	r23, 0xFF	; 255
     3e8:	19 95       	eicall
	return c;
     3ea:	89 81       	ldd	r24, Y+1	; 0x01
}
     3ec:	99 27       	eor	r25, r25
     3ee:	87 fd       	sbrc	r24, 7
     3f0:	90 95       	com	r25
     3f2:	0f 90       	pop	r0
     3f4:	df 91       	pop	r29
     3f6:	cf 91       	pop	r28
     3f8:	08 95       	ret

000003fa <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     3fa:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     3fc:	80 91 22 20 	lds	r24, 0x2022
     400:	90 91 23 20 	lds	r25, 0x2023
     404:	e0 91 20 20 	lds	r30, 0x2020
     408:	f0 91 21 20 	lds	r31, 0x2021
     40c:	19 95       	eicall
     40e:	99 23       	and	r25, r25
     410:	1c f4       	brge	.+6      	; 0x418 <_write+0x1e>
		return -1;
     412:	8f ef       	ldi	r24, 0xFF	; 255
     414:	9f ef       	ldi	r25, 0xFF	; 255
     416:	08 95       	ret
	}
	return 1;
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	90 e0       	ldi	r25, 0x00	; 0
}
     41c:	08 95       	ret

0000041e <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     41e:	81 15       	cp	r24, r1
     420:	22 e0       	ldi	r18, 0x02	; 2
     422:	92 07       	cpc	r25, r18
     424:	61 f4       	brne	.+24     	; 0x43e <adc_enable_clock+0x20>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
     426:	80 91 17 20 	lds	r24, 0x2017
     42a:	91 e0       	ldi	r25, 0x01	; 1
     42c:	98 0f       	add	r25, r24
     42e:	90 93 17 20 	sts	0x2017, r25
     432:	81 11       	cpse	r24, r1
     434:	12 c0       	rjmp	.+36     	; 0x45a <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     436:	62 e0       	ldi	r22, 0x02	; 2
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	af cf       	rjmp	.-162    	; 0x39a <sysclk_enable_module>
     43c:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     43e:	80 34       	cpi	r24, 0x40	; 64
     440:	92 40       	sbci	r25, 0x02	; 2
     442:	59 f4       	brne	.+22     	; 0x45a <adc_enable_clock+0x3c>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
     444:	80 91 16 20 	lds	r24, 0x2016
     448:	91 e0       	ldi	r25, 0x01	; 1
     44a:	98 0f       	add	r25, r24
     44c:	90 93 16 20 	sts	0x2016, r25
     450:	81 11       	cpse	r24, r1
     452:	03 c0       	rjmp	.+6      	; 0x45a <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     454:	62 e0       	ldi	r22, 0x02	; 2
     456:	82 e0       	ldi	r24, 0x02	; 2
     458:	a0 cf       	rjmp	.-192    	; 0x39a <sysclk_enable_module>
     45a:	08 95       	ret

0000045c <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
     45c:	81 15       	cp	r24, r1
     45e:	22 e0       	ldi	r18, 0x02	; 2
     460:	92 07       	cpc	r25, r18
     462:	59 f4       	brne	.+22     	; 0x47a <adc_disable_clock+0x1e>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
     464:	80 91 17 20 	lds	r24, 0x2017
     468:	81 50       	subi	r24, 0x01	; 1
     46a:	80 93 17 20 	sts	0x2017, r24
     46e:	81 11       	cpse	r24, r1
     470:	11 c0       	rjmp	.+34     	; 0x494 <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     472:	62 e0       	ldi	r22, 0x02	; 2
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	9d cf       	rjmp	.-198    	; 0x3b2 <sysclk_disable_module>
     478:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
     47a:	80 34       	cpi	r24, 0x40	; 64
     47c:	92 40       	sbci	r25, 0x02	; 2
     47e:	51 f4       	brne	.+20     	; 0x494 <adc_disable_clock+0x38>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
     480:	80 91 16 20 	lds	r24, 0x2016
     484:	81 50       	subi	r24, 0x01	; 1
     486:	80 93 16 20 	sts	0x2016, r24
     48a:	81 11       	cpse	r24, r1
     48c:	03 c0       	rjmp	.+6      	; 0x494 <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     48e:	62 e0       	ldi	r22, 0x02	; 2
     490:	82 e0       	ldi	r24, 0x02	; 2
     492:	8f cf       	rjmp	.-226    	; 0x3b2 <sysclk_disable_module>
     494:	08 95       	ret

00000496 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
     496:	1f 93       	push	r17
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	ec 01       	movw	r28, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     49e:	1f b7       	in	r17, 0x3f	; 63
	cpu_irq_disable();
     4a0:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
     4a2:	bd df       	rcall	.-134    	; 0x41e <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
     4a4:	88 81       	ld	r24, Y
     4a6:	81 60       	ori	r24, 0x01	; 1
     4a8:	88 83       	st	Y, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     4aa:	1f bf       	out	0x3f, r17	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     4ac:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     4ae:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
     4b0:	e9 e1       	ldi	r30, 0x19	; 25
     4b2:	f0 e2       	ldi	r31, 0x20	; 32
     4b4:	90 81       	ld	r25, Z
     4b6:	9f 5f       	subi	r25, 0xFF	; 255
     4b8:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     4ba:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	1f 91       	pop	r17
     4c2:	08 95       	ret

000004c4 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     4c4:	1f 92       	push	r1
     4c6:	0f 92       	push	r0
     4c8:	0f b6       	in	r0, 0x3f	; 63
     4ca:	0f 92       	push	r0
     4cc:	11 24       	eor	r1, r1
     4ce:	0b b6       	in	r0, 0x3b	; 59
     4d0:	0f 92       	push	r0
     4d2:	2f 93       	push	r18
     4d4:	3f 93       	push	r19
     4d6:	4f 93       	push	r20
     4d8:	5f 93       	push	r21
     4da:	6f 93       	push	r22
     4dc:	7f 93       	push	r23
     4de:	8f 93       	push	r24
     4e0:	9f 93       	push	r25
     4e2:	af 93       	push	r26
     4e4:	bf 93       	push	r27
     4e6:	ef 93       	push	r30
     4e8:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f2 e0       	ldi	r31, 0x02	; 2
     4ee:	44 a1       	ldd	r20, Z+36	; 0x24
     4f0:	55 a1       	ldd	r21, Z+37	; 0x25
     4f2:	e0 91 26 20 	lds	r30, 0x2026
     4f6:	f0 91 27 20 	lds	r31, 0x2027
     4fa:	61 e0       	ldi	r22, 0x01	; 1
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	92 e0       	ldi	r25, 0x02	; 2
     500:	19 95       	eicall
}
     502:	ff 91       	pop	r31
     504:	ef 91       	pop	r30
     506:	bf 91       	pop	r27
     508:	af 91       	pop	r26
     50a:	9f 91       	pop	r25
     50c:	8f 91       	pop	r24
     50e:	7f 91       	pop	r23
     510:	6f 91       	pop	r22
     512:	5f 91       	pop	r21
     514:	4f 91       	pop	r20
     516:	3f 91       	pop	r19
     518:	2f 91       	pop	r18
     51a:	0f 90       	pop	r0
     51c:	0b be       	out	0x3b, r0	; 59
     51e:	0f 90       	pop	r0
     520:	0f be       	out	0x3f, r0	; 63
     522:	0f 90       	pop	r0
     524:	1f 90       	pop	r1
     526:	18 95       	reti

00000528 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     528:	1f 92       	push	r1
     52a:	0f 92       	push	r0
     52c:	0f b6       	in	r0, 0x3f	; 63
     52e:	0f 92       	push	r0
     530:	11 24       	eor	r1, r1
     532:	0b b6       	in	r0, 0x3b	; 59
     534:	0f 92       	push	r0
     536:	2f 93       	push	r18
     538:	3f 93       	push	r19
     53a:	4f 93       	push	r20
     53c:	5f 93       	push	r21
     53e:	6f 93       	push	r22
     540:	7f 93       	push	r23
     542:	8f 93       	push	r24
     544:	9f 93       	push	r25
     546:	af 93       	push	r26
     548:	bf 93       	push	r27
     54a:	ef 93       	push	r30
     54c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     54e:	e8 e2       	ldi	r30, 0x28	; 40
     550:	f2 e0       	ldi	r31, 0x02	; 2
     552:	44 81       	ldd	r20, Z+4	; 0x04
     554:	55 81       	ldd	r21, Z+5	; 0x05
     556:	e0 91 26 20 	lds	r30, 0x2026
     55a:	f0 91 27 20 	lds	r31, 0x2027
     55e:	62 e0       	ldi	r22, 0x02	; 2
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	92 e0       	ldi	r25, 0x02	; 2
     564:	19 95       	eicall
}
     566:	ff 91       	pop	r31
     568:	ef 91       	pop	r30
     56a:	bf 91       	pop	r27
     56c:	af 91       	pop	r26
     56e:	9f 91       	pop	r25
     570:	8f 91       	pop	r24
     572:	7f 91       	pop	r23
     574:	6f 91       	pop	r22
     576:	5f 91       	pop	r21
     578:	4f 91       	pop	r20
     57a:	3f 91       	pop	r19
     57c:	2f 91       	pop	r18
     57e:	0f 90       	pop	r0
     580:	0b be       	out	0x3b, r0	; 59
     582:	0f 90       	pop	r0
     584:	0f be       	out	0x3f, r0	; 63
     586:	0f 90       	pop	r0
     588:	1f 90       	pop	r1
     58a:	18 95       	reti

0000058c <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     58c:	1f 92       	push	r1
     58e:	0f 92       	push	r0
     590:	0f b6       	in	r0, 0x3f	; 63
     592:	0f 92       	push	r0
     594:	11 24       	eor	r1, r1
     596:	0b b6       	in	r0, 0x3b	; 59
     598:	0f 92       	push	r0
     59a:	2f 93       	push	r18
     59c:	3f 93       	push	r19
     59e:	4f 93       	push	r20
     5a0:	5f 93       	push	r21
     5a2:	6f 93       	push	r22
     5a4:	7f 93       	push	r23
     5a6:	8f 93       	push	r24
     5a8:	9f 93       	push	r25
     5aa:	af 93       	push	r26
     5ac:	bf 93       	push	r27
     5ae:	ef 93       	push	r30
     5b0:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     5b2:	e0 e3       	ldi	r30, 0x30	; 48
     5b4:	f2 e0       	ldi	r31, 0x02	; 2
     5b6:	44 81       	ldd	r20, Z+4	; 0x04
     5b8:	55 81       	ldd	r21, Z+5	; 0x05
     5ba:	e0 91 26 20 	lds	r30, 0x2026
     5be:	f0 91 27 20 	lds	r31, 0x2027
     5c2:	64 e0       	ldi	r22, 0x04	; 4
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	92 e0       	ldi	r25, 0x02	; 2
     5c8:	19 95       	eicall
}
     5ca:	ff 91       	pop	r31
     5cc:	ef 91       	pop	r30
     5ce:	bf 91       	pop	r27
     5d0:	af 91       	pop	r26
     5d2:	9f 91       	pop	r25
     5d4:	8f 91       	pop	r24
     5d6:	7f 91       	pop	r23
     5d8:	6f 91       	pop	r22
     5da:	5f 91       	pop	r21
     5dc:	4f 91       	pop	r20
     5de:	3f 91       	pop	r19
     5e0:	2f 91       	pop	r18
     5e2:	0f 90       	pop	r0
     5e4:	0b be       	out	0x3b, r0	; 59
     5e6:	0f 90       	pop	r0
     5e8:	0f be       	out	0x3f, r0	; 63
     5ea:	0f 90       	pop	r0
     5ec:	1f 90       	pop	r1
     5ee:	18 95       	reti

000005f0 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     5f0:	1f 92       	push	r1
     5f2:	0f 92       	push	r0
     5f4:	0f b6       	in	r0, 0x3f	; 63
     5f6:	0f 92       	push	r0
     5f8:	11 24       	eor	r1, r1
     5fa:	0b b6       	in	r0, 0x3b	; 59
     5fc:	0f 92       	push	r0
     5fe:	2f 93       	push	r18
     600:	3f 93       	push	r19
     602:	4f 93       	push	r20
     604:	5f 93       	push	r21
     606:	6f 93       	push	r22
     608:	7f 93       	push	r23
     60a:	8f 93       	push	r24
     60c:	9f 93       	push	r25
     60e:	af 93       	push	r26
     610:	bf 93       	push	r27
     612:	ef 93       	push	r30
     614:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     616:	e8 e3       	ldi	r30, 0x38	; 56
     618:	f2 e0       	ldi	r31, 0x02	; 2
     61a:	44 81       	ldd	r20, Z+4	; 0x04
     61c:	55 81       	ldd	r21, Z+5	; 0x05
     61e:	e0 91 26 20 	lds	r30, 0x2026
     622:	f0 91 27 20 	lds	r31, 0x2027
     626:	68 e0       	ldi	r22, 0x08	; 8
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	92 e0       	ldi	r25, 0x02	; 2
     62c:	19 95       	eicall
}
     62e:	ff 91       	pop	r31
     630:	ef 91       	pop	r30
     632:	bf 91       	pop	r27
     634:	af 91       	pop	r26
     636:	9f 91       	pop	r25
     638:	8f 91       	pop	r24
     63a:	7f 91       	pop	r23
     63c:	6f 91       	pop	r22
     63e:	5f 91       	pop	r21
     640:	4f 91       	pop	r20
     642:	3f 91       	pop	r19
     644:	2f 91       	pop	r18
     646:	0f 90       	pop	r0
     648:	0b be       	out	0x3b, r0	; 59
     64a:	0f 90       	pop	r0
     64c:	0f be       	out	0x3f, r0	; 63
     64e:	0f 90       	pop	r0
     650:	1f 90       	pop	r1
     652:	18 95       	reti

00000654 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     654:	1f 92       	push	r1
     656:	0f 92       	push	r0
     658:	0f b6       	in	r0, 0x3f	; 63
     65a:	0f 92       	push	r0
     65c:	11 24       	eor	r1, r1
     65e:	0b b6       	in	r0, 0x3b	; 59
     660:	0f 92       	push	r0
     662:	2f 93       	push	r18
     664:	3f 93       	push	r19
     666:	4f 93       	push	r20
     668:	5f 93       	push	r21
     66a:	6f 93       	push	r22
     66c:	7f 93       	push	r23
     66e:	8f 93       	push	r24
     670:	9f 93       	push	r25
     672:	af 93       	push	r26
     674:	bf 93       	push	r27
     676:	ef 93       	push	r30
     678:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     67a:	e0 e4       	ldi	r30, 0x40	; 64
     67c:	f2 e0       	ldi	r31, 0x02	; 2
     67e:	44 a1       	ldd	r20, Z+36	; 0x24
     680:	55 a1       	ldd	r21, Z+37	; 0x25
     682:	e0 91 24 20 	lds	r30, 0x2024
     686:	f0 91 25 20 	lds	r31, 0x2025
     68a:	61 e0       	ldi	r22, 0x01	; 1
     68c:	80 e4       	ldi	r24, 0x40	; 64
     68e:	92 e0       	ldi	r25, 0x02	; 2
     690:	19 95       	eicall
}
     692:	ff 91       	pop	r31
     694:	ef 91       	pop	r30
     696:	bf 91       	pop	r27
     698:	af 91       	pop	r26
     69a:	9f 91       	pop	r25
     69c:	8f 91       	pop	r24
     69e:	7f 91       	pop	r23
     6a0:	6f 91       	pop	r22
     6a2:	5f 91       	pop	r21
     6a4:	4f 91       	pop	r20
     6a6:	3f 91       	pop	r19
     6a8:	2f 91       	pop	r18
     6aa:	0f 90       	pop	r0
     6ac:	0b be       	out	0x3b, r0	; 59
     6ae:	0f 90       	pop	r0
     6b0:	0f be       	out	0x3f, r0	; 63
     6b2:	0f 90       	pop	r0
     6b4:	1f 90       	pop	r1
     6b6:	18 95       	reti

000006b8 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     6b8:	1f 92       	push	r1
     6ba:	0f 92       	push	r0
     6bc:	0f b6       	in	r0, 0x3f	; 63
     6be:	0f 92       	push	r0
     6c0:	11 24       	eor	r1, r1
     6c2:	0b b6       	in	r0, 0x3b	; 59
     6c4:	0f 92       	push	r0
     6c6:	2f 93       	push	r18
     6c8:	3f 93       	push	r19
     6ca:	4f 93       	push	r20
     6cc:	5f 93       	push	r21
     6ce:	6f 93       	push	r22
     6d0:	7f 93       	push	r23
     6d2:	8f 93       	push	r24
     6d4:	9f 93       	push	r25
     6d6:	af 93       	push	r26
     6d8:	bf 93       	push	r27
     6da:	ef 93       	push	r30
     6dc:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     6de:	e8 e6       	ldi	r30, 0x68	; 104
     6e0:	f2 e0       	ldi	r31, 0x02	; 2
     6e2:	44 81       	ldd	r20, Z+4	; 0x04
     6e4:	55 81       	ldd	r21, Z+5	; 0x05
     6e6:	e0 91 24 20 	lds	r30, 0x2024
     6ea:	f0 91 25 20 	lds	r31, 0x2025
     6ee:	62 e0       	ldi	r22, 0x02	; 2
     6f0:	80 e4       	ldi	r24, 0x40	; 64
     6f2:	92 e0       	ldi	r25, 0x02	; 2
     6f4:	19 95       	eicall
}
     6f6:	ff 91       	pop	r31
     6f8:	ef 91       	pop	r30
     6fa:	bf 91       	pop	r27
     6fc:	af 91       	pop	r26
     6fe:	9f 91       	pop	r25
     700:	8f 91       	pop	r24
     702:	7f 91       	pop	r23
     704:	6f 91       	pop	r22
     706:	5f 91       	pop	r21
     708:	4f 91       	pop	r20
     70a:	3f 91       	pop	r19
     70c:	2f 91       	pop	r18
     70e:	0f 90       	pop	r0
     710:	0b be       	out	0x3b, r0	; 59
     712:	0f 90       	pop	r0
     714:	0f be       	out	0x3f, r0	; 63
     716:	0f 90       	pop	r0
     718:	1f 90       	pop	r1
     71a:	18 95       	reti

0000071c <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     71c:	1f 92       	push	r1
     71e:	0f 92       	push	r0
     720:	0f b6       	in	r0, 0x3f	; 63
     722:	0f 92       	push	r0
     724:	11 24       	eor	r1, r1
     726:	0b b6       	in	r0, 0x3b	; 59
     728:	0f 92       	push	r0
     72a:	2f 93       	push	r18
     72c:	3f 93       	push	r19
     72e:	4f 93       	push	r20
     730:	5f 93       	push	r21
     732:	6f 93       	push	r22
     734:	7f 93       	push	r23
     736:	8f 93       	push	r24
     738:	9f 93       	push	r25
     73a:	af 93       	push	r26
     73c:	bf 93       	push	r27
     73e:	ef 93       	push	r30
     740:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     742:	e0 e7       	ldi	r30, 0x70	; 112
     744:	f2 e0       	ldi	r31, 0x02	; 2
     746:	44 81       	ldd	r20, Z+4	; 0x04
     748:	55 81       	ldd	r21, Z+5	; 0x05
     74a:	e0 91 24 20 	lds	r30, 0x2024
     74e:	f0 91 25 20 	lds	r31, 0x2025
     752:	64 e0       	ldi	r22, 0x04	; 4
     754:	80 e4       	ldi	r24, 0x40	; 64
     756:	92 e0       	ldi	r25, 0x02	; 2
     758:	19 95       	eicall
}
     75a:	ff 91       	pop	r31
     75c:	ef 91       	pop	r30
     75e:	bf 91       	pop	r27
     760:	af 91       	pop	r26
     762:	9f 91       	pop	r25
     764:	8f 91       	pop	r24
     766:	7f 91       	pop	r23
     768:	6f 91       	pop	r22
     76a:	5f 91       	pop	r21
     76c:	4f 91       	pop	r20
     76e:	3f 91       	pop	r19
     770:	2f 91       	pop	r18
     772:	0f 90       	pop	r0
     774:	0b be       	out	0x3b, r0	; 59
     776:	0f 90       	pop	r0
     778:	0f be       	out	0x3f, r0	; 63
     77a:	0f 90       	pop	r0
     77c:	1f 90       	pop	r1
     77e:	18 95       	reti

00000780 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     780:	1f 92       	push	r1
     782:	0f 92       	push	r0
     784:	0f b6       	in	r0, 0x3f	; 63
     786:	0f 92       	push	r0
     788:	11 24       	eor	r1, r1
     78a:	0b b6       	in	r0, 0x3b	; 59
     78c:	0f 92       	push	r0
     78e:	2f 93       	push	r18
     790:	3f 93       	push	r19
     792:	4f 93       	push	r20
     794:	5f 93       	push	r21
     796:	6f 93       	push	r22
     798:	7f 93       	push	r23
     79a:	8f 93       	push	r24
     79c:	9f 93       	push	r25
     79e:	af 93       	push	r26
     7a0:	bf 93       	push	r27
     7a2:	ef 93       	push	r30
     7a4:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     7a6:	e8 e7       	ldi	r30, 0x78	; 120
     7a8:	f2 e0       	ldi	r31, 0x02	; 2
     7aa:	44 81       	ldd	r20, Z+4	; 0x04
     7ac:	55 81       	ldd	r21, Z+5	; 0x05
     7ae:	e0 91 24 20 	lds	r30, 0x2024
     7b2:	f0 91 25 20 	lds	r31, 0x2025
     7b6:	68 e0       	ldi	r22, 0x08	; 8
     7b8:	80 e4       	ldi	r24, 0x40	; 64
     7ba:	92 e0       	ldi	r25, 0x02	; 2
     7bc:	19 95       	eicall
}
     7be:	ff 91       	pop	r31
     7c0:	ef 91       	pop	r30
     7c2:	bf 91       	pop	r27
     7c4:	af 91       	pop	r26
     7c6:	9f 91       	pop	r25
     7c8:	8f 91       	pop	r24
     7ca:	7f 91       	pop	r23
     7cc:	6f 91       	pop	r22
     7ce:	5f 91       	pop	r21
     7d0:	4f 91       	pop	r20
     7d2:	3f 91       	pop	r19
     7d4:	2f 91       	pop	r18
     7d6:	0f 90       	pop	r0
     7d8:	0b be       	out	0x3b, r0	; 59
     7da:	0f 90       	pop	r0
     7dc:	0f be       	out	0x3f, r0	; 63
     7de:	0f 90       	pop	r0
     7e0:	1f 90       	pop	r1
     7e2:	18 95       	reti

000007e4 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
     7e4:	df 92       	push	r13
     7e6:	ef 92       	push	r14
     7e8:	ff 92       	push	r15
     7ea:	0f 93       	push	r16
     7ec:	1f 93       	push	r17
     7ee:	cf 93       	push	r28
     7f0:	df 93       	push	r29
     7f2:	ec 01       	movw	r28, r24
     7f4:	8b 01       	movw	r16, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
     7f6:	c1 15       	cp	r28, r1
     7f8:	22 e0       	ldi	r18, 0x02	; 2
     7fa:	d2 07       	cpc	r29, r18
     7fc:	71 f4       	brne	.+28     	; 0x81a <adc_write_configuration+0x36>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     7fe:	61 e2       	ldi	r22, 0x21	; 33
     800:	70 e0       	ldi	r23, 0x00	; 0
     802:	82 e0       	ldi	r24, 0x02	; 2
     804:	dc d0       	rcall	.+440    	; 0x9be <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
     806:	e8 2e       	mov	r14, r24
     808:	f1 2c       	mov	r15, r1
     80a:	60 e2       	ldi	r22, 0x20	; 32
     80c:	70 e0       	ldi	r23, 0x00	; 0
     80e:	82 e0       	ldi	r24, 0x02	; 2
     810:	d6 d0       	rcall	.+428    	; 0x9be <nvm_read_byte>
		data <<= 8;
     812:	fe 2c       	mov	r15, r14
     814:	ee 24       	eor	r14, r14
		data |= nvm_read_production_signature_row(ADCACAL0);
     816:	e8 2a       	or	r14, r24
     818:	10 c0       	rjmp	.+32     	; 0x83a <adc_write_configuration+0x56>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
     81a:	80 34       	cpi	r24, 0x40	; 64
     81c:	92 40       	sbci	r25, 0x02	; 2
     81e:	59 f5       	brne	.+86     	; 0x876 <adc_write_configuration+0x92>
     820:	65 e2       	ldi	r22, 0x25	; 37
     822:	70 e0       	ldi	r23, 0x00	; 0
     824:	82 e0       	ldi	r24, 0x02	; 2
     826:	cb d0       	rcall	.+406    	; 0x9be <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
     828:	e8 2e       	mov	r14, r24
     82a:	f1 2c       	mov	r15, r1
     82c:	64 e2       	ldi	r22, 0x24	; 36
     82e:	70 e0       	ldi	r23, 0x00	; 0
     830:	82 e0       	ldi	r24, 0x02	; 2
     832:	c5 d0       	rcall	.+394    	; 0x9be <nvm_read_byte>
		data <<= 8;
     834:	fe 2c       	mov	r15, r14
     836:	ee 24       	eor	r14, r14
		data |= nvm_read_production_signature_row(ADCBCAL0);
     838:	e8 2a       	or	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     83a:	df b6       	in	r13, 0x3f	; 63
	cpu_irq_disable();
     83c:	f8 94       	cli
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
     83e:	ce 01       	movw	r24, r28
     840:	ee dd       	rcall	.-1060   	; 0x41e <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
     842:	28 81       	ld	r18, Y

	adc->CTRLA = ADC_FLUSH_bm;
     844:	82 e0       	ldi	r24, 0x02	; 2
     846:	88 83       	st	Y, r24
	adc->CAL = cal;
     848:	ec 86       	std	Y+12, r14	; 0x0c
     84a:	fd 86       	std	Y+13, r15	; 0x0d
	adc->CMP = conf->cmp;
     84c:	f8 01       	movw	r30, r16
     84e:	85 81       	ldd	r24, Z+5	; 0x05
     850:	96 81       	ldd	r25, Z+6	; 0x06
     852:	88 8f       	std	Y+24, r24	; 0x18
     854:	99 8f       	std	Y+25, r25	; 0x19
	adc->REFCTRL = conf->refctrl;
     856:	82 81       	ldd	r24, Z+2	; 0x02
     858:	8a 83       	std	Y+2, r24	; 0x02
	adc->PRESCALER = conf->prescaler;
     85a:	84 81       	ldd	r24, Z+4	; 0x04
     85c:	8c 83       	std	Y+4, r24	; 0x04
	adc->EVCTRL = conf->evctrl;
     85e:	83 81       	ldd	r24, Z+3	; 0x03
     860:	8b 83       	std	Y+3, r24	; 0x03
	adc->CTRLB = conf->ctrlb;
     862:	81 81       	ldd	r24, Z+1	; 0x01
     864:	89 83       	std	Y+1, r24	; 0x01
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
	enable = adc->CTRLA & ADC_ENABLE_bm;
     866:	82 2f       	mov	r24, r18
     868:	81 70       	andi	r24, 0x01	; 1
	adc->REFCTRL = conf->refctrl;
	adc->PRESCALER = conf->prescaler;
	adc->EVCTRL = conf->evctrl;
	adc->CTRLB = conf->ctrlb;

	adc->CTRLA = enable | conf->ctrla;
     86a:	90 81       	ld	r25, Z
     86c:	89 2b       	or	r24, r25
     86e:	88 83       	st	Y, r24

	adc_disable_clock(adc);
     870:	ce 01       	movw	r24, r28
     872:	f4 dd       	rcall	.-1048   	; 0x45c <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     874:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
     876:	df 91       	pop	r29
     878:	cf 91       	pop	r28
     87a:	1f 91       	pop	r17
     87c:	0f 91       	pop	r16
     87e:	ff 90       	pop	r15
     880:	ef 90       	pop	r14
     882:	df 90       	pop	r13
     884:	08 95       	ret

00000886 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
     886:	ff 92       	push	r15
     888:	0f 93       	push	r16
     88a:	1f 93       	push	r17
     88c:	cf 93       	push	r28
     88e:	df 93       	push	r29
     890:	ec 01       	movw	r28, r24
     892:	8b 01       	movw	r16, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     894:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
     896:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
     898:	c2 dd       	rcall	.-1148   	; 0x41e <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
     89a:	88 81       	ld	r24, Y
     89c:	80 7c       	andi	r24, 0xC0	; 192
     89e:	f8 01       	movw	r30, r16
     8a0:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
     8a2:	88 8d       	ldd	r24, Y+24	; 0x18
     8a4:	99 8d       	ldd	r25, Y+25	; 0x19
     8a6:	85 83       	std	Z+5, r24	; 0x05
     8a8:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
     8aa:	8a 81       	ldd	r24, Y+2	; 0x02
     8ac:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
     8ae:	8c 81       	ldd	r24, Y+4	; 0x04
     8b0:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
     8b2:	8b 81       	ldd	r24, Y+3	; 0x03
     8b4:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
     8b6:	89 81       	ldd	r24, Y+1	; 0x01
     8b8:	81 83       	std	Z+1, r24	; 0x01

	adc_disable_clock(adc);
     8ba:	ce 01       	movw	r24, r28
     8bc:	cf dd       	rcall	.-1122   	; 0x45c <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     8be:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	1f 91       	pop	r17
     8c6:	0f 91       	pop	r16
     8c8:	ff 90       	pop	r15
     8ca:	08 95       	ret

000008cc <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
     8cc:	cf 92       	push	r12
     8ce:	df 92       	push	r13
     8d0:	ef 92       	push	r14
     8d2:	ff 92       	push	r15
     8d4:	0f 93       	push	r16
     8d6:	1f 93       	push	r17
     8d8:	cf 93       	push	r28
     8da:	df 93       	push	r29
     8dc:	7c 01       	movw	r14, r24
     8de:	d6 2e       	mov	r13, r22
     8e0:	8a 01       	movw	r16, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     8e2:	86 2f       	mov	r24, r22
     8e4:	83 70       	andi	r24, 0x03	; 3
     8e6:	29 f4       	brne	.+10     	; 0x8f2 <adcch_write_configuration+0x26>
		index += 2;
		ch_mask >>= 2;
     8e8:	96 2f       	mov	r25, r22
     8ea:	96 95       	lsr	r25
     8ec:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     8ee:	82 e0       	ldi	r24, 0x02	; 2
     8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <adcch_write_configuration+0x2a>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     8f2:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
static __always_inline ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     8f4:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     8f6:	90 ff       	sbrs	r25, 0
		index++;
     8f8:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     8fa:	e7 01       	movw	r28, r14
     8fc:	a0 96       	adiw	r28, 0x20	; 32
     8fe:	98 e0       	ldi	r25, 0x08	; 8
     900:	89 9f       	mul	r24, r25
     902:	c0 0d       	add	r28, r0
     904:	d1 1d       	adc	r29, r1
     906:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     908:	cf b6       	in	r12, 0x3f	; 63
	cpu_irq_disable();
     90a:	f8 94       	cli
			return;
		}
	}
#endif

	adc_enable_clock(adc);
     90c:	c7 01       	movw	r24, r14
     90e:	87 dd       	rcall	.-1266   	; 0x41e <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
     910:	f8 01       	movw	r30, r16
     912:	80 81       	ld	r24, Z
     914:	88 83       	st	Y, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
     916:	82 81       	ldd	r24, Z+2	; 0x02
     918:	8a 83       	std	Y+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
     91a:	81 81       	ldd	r24, Z+1	; 0x01
     91c:	89 83       	std	Y+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     91e:	d0 fe       	sbrs	r13, 0
     920:	02 c0       	rjmp	.+4      	; 0x926 <adcch_write_configuration+0x5a>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
     922:	83 81       	ldd	r24, Z+3	; 0x03
     924:	8e 83       	std	Y+6, r24	; 0x06
	}
	adc_disable_clock(adc);
     926:	c7 01       	movw	r24, r14
     928:	99 dd       	rcall	.-1230   	; 0x45c <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     92a:	cf be       	out	0x3f, r12	; 63

	cpu_irq_restore(flags);
}
     92c:	df 91       	pop	r29
     92e:	cf 91       	pop	r28
     930:	1f 91       	pop	r17
     932:	0f 91       	pop	r16
     934:	ff 90       	pop	r15
     936:	ef 90       	pop	r14
     938:	df 90       	pop	r13
     93a:	cf 90       	pop	r12
     93c:	08 95       	ret

0000093e <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
     93e:	cf 92       	push	r12
     940:	df 92       	push	r13
     942:	ef 92       	push	r14
     944:	ff 92       	push	r15
     946:	0f 93       	push	r16
     948:	1f 93       	push	r17
     94a:	cf 93       	push	r28
     94c:	df 93       	push	r29
     94e:	7c 01       	movw	r14, r24
     950:	d6 2e       	mov	r13, r22
     952:	ea 01       	movw	r28, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     954:	86 2f       	mov	r24, r22
     956:	83 70       	andi	r24, 0x03	; 3
     958:	29 f4       	brne	.+10     	; 0x964 <adcch_read_configuration+0x26>
		index += 2;
		ch_mask >>= 2;
     95a:	96 2f       	mov	r25, r22
     95c:	96 95       	lsr	r25
     95e:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
     960:	82 e0       	ldi	r24, 0x02	; 2
     962:	02 c0       	rjmp	.+4      	; 0x968 <adcch_read_configuration+0x2a>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
     964:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
static __always_inline ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
     966:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
     968:	90 ff       	sbrs	r25, 0
		index++;
     96a:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
     96c:	87 01       	movw	r16, r14
     96e:	00 5e       	subi	r16, 0xE0	; 224
     970:	1f 4f       	sbci	r17, 0xFF	; 255
     972:	98 e0       	ldi	r25, 0x08	; 8
     974:	89 9f       	mul	r24, r25
     976:	00 0d       	add	r16, r0
     978:	11 1d       	adc	r17, r1
     97a:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     97c:	cf b6       	in	r12, 0x3f	; 63
	cpu_irq_disable();
     97e:	f8 94       	cli

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
     980:	c7 01       	movw	r24, r14
     982:	4d dd       	rcall	.-1382   	; 0x41e <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
     984:	f8 01       	movw	r30, r16
     986:	80 81       	ld	r24, Z
     988:	88 83       	st	Y, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
     98a:	82 81       	ldd	r24, Z+2	; 0x02
     98c:	8a 83       	std	Y+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
     98e:	81 81       	ldd	r24, Z+1	; 0x01
     990:	89 83       	std	Y+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
     992:	d0 fe       	sbrs	r13, 0
     994:	02 c0       	rjmp	.+4      	; 0x99a <adcch_read_configuration+0x5c>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
     996:	86 81       	ldd	r24, Z+6	; 0x06
     998:	8b 83       	std	Y+3, r24	; 0x03
	}
	adc_disable_clock(adc);
     99a:	c7 01       	movw	r24, r14
     99c:	5f dd       	rcall	.-1346   	; 0x45c <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     99e:	cf be       	out	0x3f, r12	; 63

	cpu_irq_restore(flags);
}
     9a0:	df 91       	pop	r29
     9a2:	cf 91       	pop	r28
     9a4:	1f 91       	pop	r17
     9a6:	0f 91       	pop	r16
     9a8:	ff 90       	pop	r15
     9aa:	ef 90       	pop	r14
     9ac:	df 90       	pop	r13
     9ae:	cf 90       	pop	r12
     9b0:	08 95       	ret

000009b2 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     9b2:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     9b4:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     9b6:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     9b8:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     9ba:	60 83       	st	Z, r22
	ret                             // Return to caller
     9bc:	08 95       	ret

000009be <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
     9be:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
     9c2:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
     9c4:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
     9c6:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
     9ca:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
     9cc:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
     9d0:	08 95       	ret

000009d2 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     9d2:	fc 01       	movw	r30, r24
     9d4:	81 81       	ldd	r24, Z+1	; 0x01
     9d6:	85 ff       	sbrs	r24, 5
     9d8:	fd cf       	rjmp	.-6      	; 0x9d4 <usart_putchar+0x2>
     9da:	60 83       	st	Z, r22
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	08 95       	ret

000009e2 <usart_getchar>:
     9e2:	fc 01       	movw	r30, r24
     9e4:	81 81       	ldd	r24, Z+1	; 0x01
     9e6:	88 23       	and	r24, r24
     9e8:	ec f7       	brge	.-6      	; 0x9e4 <usart_getchar+0x2>
     9ea:	80 81       	ld	r24, Z
     9ec:	08 95       	ret

000009ee <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     9ee:	4f 92       	push	r4
     9f0:	5f 92       	push	r5
     9f2:	6f 92       	push	r6
     9f4:	7f 92       	push	r7
     9f6:	8f 92       	push	r8
     9f8:	9f 92       	push	r9
     9fa:	af 92       	push	r10
     9fc:	bf 92       	push	r11
     9fe:	cf 92       	push	r12
     a00:	df 92       	push	r13
     a02:	ef 92       	push	r14
     a04:	ff 92       	push	r15
     a06:	0f 93       	push	r16
     a08:	1f 93       	push	r17
     a0a:	cf 93       	push	r28
     a0c:	df 93       	push	r29
     a0e:	ec 01       	movw	r28, r24
     a10:	4a 01       	movw	r8, r20
     a12:	5b 01       	movw	r10, r22
     a14:	28 01       	movw	r4, r16
     a16:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     a18:	d9 01       	movw	r26, r18
     a1a:	c8 01       	movw	r24, r16
     a1c:	68 94       	set
     a1e:	12 f8       	bld	r1, 2
     a20:	b6 95       	lsr	r27
     a22:	a7 95       	ror	r26
     a24:	97 95       	ror	r25
     a26:	87 95       	ror	r24
     a28:	16 94       	lsr	r1
     a2a:	d1 f7       	brne	.-12     	; 0xa20 <usart_set_baudrate+0x32>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     a2c:	b9 01       	movw	r22, r18
     a2e:	a8 01       	movw	r20, r16
     a30:	03 2e       	mov	r0, r19
     a32:	36 e1       	ldi	r19, 0x16	; 22
     a34:	76 95       	lsr	r23
     a36:	67 95       	ror	r22
     a38:	57 95       	ror	r21
     a3a:	47 95       	ror	r20
     a3c:	3a 95       	dec	r19
     a3e:	d1 f7       	brne	.-12     	; 0xa34 <usart_set_baudrate+0x46>
     a40:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     a42:	2c 81       	ldd	r18, Y+4	; 0x04
     a44:	22 fd       	sbrc	r18, 2
     a46:	08 c0       	rjmp	.+16     	; 0xa58 <usart_set_baudrate+0x6a>
		max_rate /= 2;
     a48:	b6 95       	lsr	r27
     a4a:	a7 95       	ror	r26
     a4c:	97 95       	ror	r25
     a4e:	87 95       	ror	r24
		min_rate /= 2;
     a50:	76 95       	lsr	r23
     a52:	67 95       	ror	r22
     a54:	57 95       	ror	r21
     a56:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     a58:	88 15       	cp	r24, r8
     a5a:	99 05       	cpc	r25, r9
     a5c:	aa 05       	cpc	r26, r10
     a5e:	bb 05       	cpc	r27, r11
     a60:	08 f4       	brcc	.+2      	; 0xa64 <usart_set_baudrate+0x76>
     a62:	a2 c0       	rjmp	.+324    	; 0xba8 <usart_set_baudrate+0x1ba>
     a64:	84 16       	cp	r8, r20
     a66:	95 06       	cpc	r9, r21
     a68:	a6 06       	cpc	r10, r22
     a6a:	b7 06       	cpc	r11, r23
     a6c:	08 f4       	brcc	.+2      	; 0xa70 <usart_set_baudrate+0x82>
     a6e:	9e c0       	rjmp	.+316    	; 0xbac <usart_set_baudrate+0x1be>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     a70:	8c 81       	ldd	r24, Y+4	; 0x04
     a72:	82 fd       	sbrc	r24, 2
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <usart_set_baudrate+0x90>
		baud *= 2;
     a76:	88 0c       	add	r8, r8
     a78:	99 1c       	adc	r9, r9
     a7a:	aa 1c       	adc	r10, r10
     a7c:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     a7e:	c3 01       	movw	r24, r6
     a80:	b2 01       	movw	r22, r4
     a82:	a5 01       	movw	r20, r10
     a84:	94 01       	movw	r18, r8
     a86:	95 d7       	rcall	.+3882   	; 0x19b2 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     a88:	2f 3f       	cpi	r18, 0xFF	; 255
     a8a:	31 05       	cpc	r19, r1
     a8c:	41 05       	cpc	r20, r1
     a8e:	51 05       	cpc	r21, r1
     a90:	08 f4       	brcc	.+2      	; 0xa94 <usart_set_baudrate+0xa6>
     a92:	8e c0       	rjmp	.+284    	; 0xbb0 <usart_set_baudrate+0x1c2>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
     a94:	c1 2c       	mov	r12, r1
     a96:	d1 2c       	mov	r13, r1
     a98:	76 01       	movw	r14, r12
     a9a:	ca 94       	dec	r12
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     a9c:	19 ef       	ldi	r17, 0xF9	; 249
     a9e:	05 c0       	rjmp	.+10     	; 0xaaa <usart_set_baudrate+0xbc>
		if (ratio < limit) {
     aa0:	2c 15       	cp	r18, r12
     aa2:	3d 05       	cpc	r19, r13
     aa4:	4e 05       	cpc	r20, r14
     aa6:	5f 05       	cpc	r21, r15
     aa8:	68 f0       	brcs	.+26     	; 0xac4 <usart_set_baudrate+0xd6>
			break;
		}

		limit <<= 1;
     aaa:	cc 0c       	add	r12, r12
     aac:	dd 1c       	adc	r13, r13
     aae:	ee 1c       	adc	r14, r14
     ab0:	ff 1c       	adc	r15, r15

		if (exp < -3) {
     ab2:	1d 3f       	cpi	r17, 0xFD	; 253
     ab4:	14 f4       	brge	.+4      	; 0xaba <usart_set_baudrate+0xcc>
			limit |= 1;
     ab6:	68 94       	set
     ab8:	c0 f8       	bld	r12, 0

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     aba:	1f 5f       	subi	r17, 0xFF	; 255
     abc:	17 30       	cpi	r17, 0x07	; 7
     abe:	81 f7       	brne	.-32     	; 0xaa0 <usart_set_baudrate+0xb2>
     ac0:	21 2f       	mov	r18, r17
     ac2:	4e c0       	rjmp	.+156    	; 0xb60 <usart_set_baudrate+0x172>
     ac4:	21 2f       	mov	r18, r17
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     ac6:	11 23       	and	r17, r17
     ac8:	0c f0       	brlt	.+2      	; 0xacc <usart_set_baudrate+0xde>
     aca:	4a c0       	rjmp	.+148    	; 0xb60 <usart_set_baudrate+0x172>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     acc:	d5 01       	movw	r26, r10
     ace:	c4 01       	movw	r24, r8
     ad0:	88 0f       	add	r24, r24
     ad2:	99 1f       	adc	r25, r25
     ad4:	aa 1f       	adc	r26, r26
     ad6:	bb 1f       	adc	r27, r27
     ad8:	88 0f       	add	r24, r24
     ada:	99 1f       	adc	r25, r25
     adc:	aa 1f       	adc	r26, r26
     ade:	bb 1f       	adc	r27, r27
     ae0:	88 0f       	add	r24, r24
     ae2:	99 1f       	adc	r25, r25
     ae4:	aa 1f       	adc	r26, r26
     ae6:	bb 1f       	adc	r27, r27
     ae8:	48 1a       	sub	r4, r24
     aea:	59 0a       	sbc	r5, r25
     aec:	6a 0a       	sbc	r6, r26
     aee:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     af0:	1e 3f       	cpi	r17, 0xFE	; 254
     af2:	ec f4       	brge	.+58     	; 0xb2e <usart_set_baudrate+0x140>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     af4:	6d ef       	ldi	r22, 0xFD	; 253
     af6:	7f ef       	ldi	r23, 0xFF	; 255
     af8:	61 1b       	sub	r22, r17
     afa:	71 09       	sbc	r23, r1
     afc:	17 fd       	sbrc	r17, 7
     afe:	73 95       	inc	r23
     b00:	04 c0       	rjmp	.+8      	; 0xb0a <usart_set_baudrate+0x11c>
     b02:	44 0c       	add	r4, r4
     b04:	55 1c       	adc	r5, r5
     b06:	66 1c       	adc	r6, r6
     b08:	77 1c       	adc	r7, r7
     b0a:	6a 95       	dec	r22
     b0c:	d2 f7       	brpl	.-12     	; 0xb02 <usart_set_baudrate+0x114>
     b0e:	d5 01       	movw	r26, r10
     b10:	c4 01       	movw	r24, r8
     b12:	b6 95       	lsr	r27
     b14:	a7 95       	ror	r26
     b16:	97 95       	ror	r25
     b18:	87 95       	ror	r24
     b1a:	bc 01       	movw	r22, r24
     b1c:	cd 01       	movw	r24, r26
     b1e:	64 0d       	add	r22, r4
     b20:	75 1d       	adc	r23, r5
     b22:	86 1d       	adc	r24, r6
     b24:	97 1d       	adc	r25, r7
     b26:	a5 01       	movw	r20, r10
     b28:	94 01       	movw	r18, r8
     b2a:	43 d7       	rcall	.+3718   	; 0x19b2 <__udivmodsi4>
     b2c:	34 c0       	rjmp	.+104    	; 0xb96 <usart_set_baudrate+0x1a8>
		} else {
			baud <<= exp + 3;
     b2e:	23 e0       	ldi	r18, 0x03	; 3
     b30:	21 0f       	add	r18, r17
     b32:	d5 01       	movw	r26, r10
     b34:	c4 01       	movw	r24, r8
     b36:	04 c0       	rjmp	.+8      	; 0xb40 <usart_set_baudrate+0x152>
     b38:	88 0f       	add	r24, r24
     b3a:	99 1f       	adc	r25, r25
     b3c:	aa 1f       	adc	r26, r26
     b3e:	bb 1f       	adc	r27, r27
     b40:	2a 95       	dec	r18
     b42:	d2 f7       	brpl	.-12     	; 0xb38 <usart_set_baudrate+0x14a>
     b44:	9c 01       	movw	r18, r24
     b46:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
     b48:	b6 95       	lsr	r27
     b4a:	a7 95       	ror	r26
     b4c:	97 95       	ror	r25
     b4e:	87 95       	ror	r24
     b50:	bc 01       	movw	r22, r24
     b52:	cd 01       	movw	r24, r26
     b54:	64 0d       	add	r22, r4
     b56:	75 1d       	adc	r23, r5
     b58:	86 1d       	adc	r24, r6
     b5a:	97 1d       	adc	r25, r7
     b5c:	2a d7       	rcall	.+3668   	; 0x19b2 <__udivmodsi4>
     b5e:	1b c0       	rjmp	.+54     	; 0xb96 <usart_set_baudrate+0x1a8>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     b60:	2d 5f       	subi	r18, 0xFD	; 253
     b62:	d5 01       	movw	r26, r10
     b64:	c4 01       	movw	r24, r8
     b66:	04 c0       	rjmp	.+8      	; 0xb70 <usart_set_baudrate+0x182>
     b68:	88 0f       	add	r24, r24
     b6a:	99 1f       	adc	r25, r25
     b6c:	aa 1f       	adc	r26, r26
     b6e:	bb 1f       	adc	r27, r27
     b70:	2a 95       	dec	r18
     b72:	d2 f7       	brpl	.-12     	; 0xb68 <usart_set_baudrate+0x17a>
     b74:	9c 01       	movw	r18, r24
     b76:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
     b78:	b6 95       	lsr	r27
     b7a:	a7 95       	ror	r26
     b7c:	97 95       	ror	r25
     b7e:	87 95       	ror	r24
     b80:	bc 01       	movw	r22, r24
     b82:	cd 01       	movw	r24, r26
     b84:	64 0d       	add	r22, r4
     b86:	75 1d       	adc	r23, r5
     b88:	86 1d       	adc	r24, r6
     b8a:	97 1d       	adc	r25, r7
     b8c:	12 d7       	rcall	.+3620   	; 0x19b2 <__udivmodsi4>
     b8e:	21 50       	subi	r18, 0x01	; 1
     b90:	31 09       	sbc	r19, r1
     b92:	41 09       	sbc	r20, r1
     b94:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     b96:	83 2f       	mov	r24, r19
     b98:	8f 70       	andi	r24, 0x0F	; 15
     b9a:	12 95       	swap	r17
     b9c:	10 7f       	andi	r17, 0xF0	; 240
     b9e:	18 2b       	or	r17, r24
     ba0:	1f 83       	std	Y+7, r17	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     ba2:	2e 83       	std	Y+6, r18	; 0x06

	return true;
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	18 c0       	rjmp	.+48     	; 0xbd8 <usart_set_baudrate+0x1ea>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	16 c0       	rjmp	.+44     	; 0xbd8 <usart_set_baudrate+0x1ea>
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	14 c0       	rjmp	.+40     	; 0xbd8 <usart_set_baudrate+0x1ea>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     bb0:	d5 01       	movw	r26, r10
     bb2:	c4 01       	movw	r24, r8
     bb4:	88 0f       	add	r24, r24
     bb6:	99 1f       	adc	r25, r25
     bb8:	aa 1f       	adc	r26, r26
     bba:	bb 1f       	adc	r27, r27
     bbc:	88 0f       	add	r24, r24
     bbe:	99 1f       	adc	r25, r25
     bc0:	aa 1f       	adc	r26, r26
     bc2:	bb 1f       	adc	r27, r27
     bc4:	88 0f       	add	r24, r24
     bc6:	99 1f       	adc	r25, r25
     bc8:	aa 1f       	adc	r26, r26
     bca:	bb 1f       	adc	r27, r27
     bcc:	48 1a       	sub	r4, r24
     bce:	59 0a       	sbc	r5, r25
     bd0:	6a 0a       	sbc	r6, r26
     bd2:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     bd4:	19 ef       	ldi	r17, 0xF9	; 249
     bd6:	8e cf       	rjmp	.-228    	; 0xaf4 <usart_set_baudrate+0x106>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     bd8:	df 91       	pop	r29
     bda:	cf 91       	pop	r28
     bdc:	1f 91       	pop	r17
     bde:	0f 91       	pop	r16
     be0:	ff 90       	pop	r15
     be2:	ef 90       	pop	r14
     be4:	df 90       	pop	r13
     be6:	cf 90       	pop	r12
     be8:	bf 90       	pop	r11
     bea:	af 90       	pop	r10
     bec:	9f 90       	pop	r9
     bee:	8f 90       	pop	r8
     bf0:	7f 90       	pop	r7
     bf2:	6f 90       	pop	r6
     bf4:	5f 90       	pop	r5
     bf6:	4f 90       	pop	r4
     bf8:	08 95       	ret

00000bfa <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     bfa:	0f 93       	push	r16
     bfc:	1f 93       	push	r17
     bfe:	cf 93       	push	r28
     c00:	df 93       	push	r29
     c02:	ec 01       	movw	r28, r24
     c04:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     c06:	00 97       	sbiw	r24, 0x00	; 0
     c08:	09 f4       	brne	.+2      	; 0xc0c <usart_init_rs232+0x12>
     c0a:	e6 c0       	rjmp	.+460    	; 0xdd8 <usart_init_rs232+0x1de>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     c0c:	80 3c       	cpi	r24, 0xC0	; 192
     c0e:	91 05       	cpc	r25, r1
     c10:	21 f4       	brne	.+8      	; 0xc1a <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     c12:	60 e1       	ldi	r22, 0x10	; 16
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	c1 db       	rcall	.-2174   	; 0x39a <sysclk_enable_module>
     c18:	df c0       	rjmp	.+446    	; 0xdd8 <usart_init_rs232+0x1de>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     c1a:	c0 38       	cpi	r28, 0x80	; 128
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	d8 07       	cpc	r29, r24
     c20:	21 f4       	brne	.+8      	; 0xc2a <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     c22:	62 e0       	ldi	r22, 0x02	; 2
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	b9 db       	rcall	.-2190   	; 0x39a <sysclk_enable_module>
     c28:	d7 c0       	rjmp	.+430    	; 0xdd8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     c2a:	c1 15       	cp	r28, r1
     c2c:	e1 e0       	ldi	r30, 0x01	; 1
     c2e:	de 07       	cpc	r29, r30
     c30:	21 f4       	brne	.+8      	; 0xc3a <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     c32:	61 e0       	ldi	r22, 0x01	; 1
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	b1 db       	rcall	.-2206   	; 0x39a <sysclk_enable_module>
     c38:	cf c0       	rjmp	.+414    	; 0xdd8 <usart_init_rs232+0x1de>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     c3a:	c0 38       	cpi	r28, 0x80	; 128
     c3c:	f3 e0       	ldi	r31, 0x03	; 3
     c3e:	df 07       	cpc	r29, r31
     c40:	21 f4       	brne	.+8      	; 0xc4a <usart_init_rs232+0x50>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     c42:	61 e0       	ldi	r22, 0x01	; 1
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	a9 db       	rcall	.-2222   	; 0x39a <sysclk_enable_module>
     c48:	c7 c0       	rjmp	.+398    	; 0xdd8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     c4a:	c0 39       	cpi	r28, 0x90	; 144
     c4c:	83 e0       	ldi	r24, 0x03	; 3
     c4e:	d8 07       	cpc	r29, r24
     c50:	21 f4       	brne	.+8      	; 0xc5a <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     c52:	61 e0       	ldi	r22, 0x01	; 1
     c54:	82 e0       	ldi	r24, 0x02	; 2
     c56:	a1 db       	rcall	.-2238   	; 0x39a <sysclk_enable_module>
     c58:	bf c0       	rjmp	.+382    	; 0xdd8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     c5a:	c1 15       	cp	r28, r1
     c5c:	e2 e0       	ldi	r30, 0x02	; 2
     c5e:	de 07       	cpc	r29, r30
     c60:	21 f4       	brne	.+8      	; 0xc6a <usart_init_rs232+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     c62:	62 e0       	ldi	r22, 0x02	; 2
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	99 db       	rcall	.-2254   	; 0x39a <sysclk_enable_module>
     c68:	b7 c0       	rjmp	.+366    	; 0xdd8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     c6a:	c0 34       	cpi	r28, 0x40	; 64
     c6c:	f2 e0       	ldi	r31, 0x02	; 2
     c6e:	df 07       	cpc	r29, r31
     c70:	21 f4       	brne	.+8      	; 0xc7a <usart_init_rs232+0x80>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     c72:	62 e0       	ldi	r22, 0x02	; 2
     c74:	82 e0       	ldi	r24, 0x02	; 2
     c76:	91 db       	rcall	.-2270   	; 0x39a <sysclk_enable_module>
     c78:	af c0       	rjmp	.+350    	; 0xdd8 <usart_init_rs232+0x1de>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     c7a:	c0 32       	cpi	r28, 0x20	; 32
     c7c:	83 e0       	ldi	r24, 0x03	; 3
     c7e:	d8 07       	cpc	r29, r24
     c80:	21 f4       	brne	.+8      	; 0xc8a <usart_init_rs232+0x90>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     c82:	64 e0       	ldi	r22, 0x04	; 4
     c84:	82 e0       	ldi	r24, 0x02	; 2
     c86:	89 db       	rcall	.-2286   	; 0x39a <sysclk_enable_module>
     c88:	a7 c0       	rjmp	.+334    	; 0xdd8 <usart_init_rs232+0x1de>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     c8a:	c1 15       	cp	r28, r1
     c8c:	e8 e0       	ldi	r30, 0x08	; 8
     c8e:	de 07       	cpc	r29, r30
     c90:	21 f4       	brne	.+8      	; 0xc9a <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     c92:	61 e0       	ldi	r22, 0x01	; 1
     c94:	83 e0       	ldi	r24, 0x03	; 3
     c96:	81 db       	rcall	.-2302   	; 0x39a <sysclk_enable_module>
     c98:	9f c0       	rjmp	.+318    	; 0xdd8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     c9a:	c1 15       	cp	r28, r1
     c9c:	f9 e0       	ldi	r31, 0x09	; 9
     c9e:	df 07       	cpc	r29, r31
     ca0:	21 f4       	brne	.+8      	; 0xcaa <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     ca2:	61 e0       	ldi	r22, 0x01	; 1
     ca4:	84 e0       	ldi	r24, 0x04	; 4
     ca6:	79 db       	rcall	.-2318   	; 0x39a <sysclk_enable_module>
     ca8:	97 c0       	rjmp	.+302    	; 0xdd8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     caa:	c1 15       	cp	r28, r1
     cac:	8a e0       	ldi	r24, 0x0A	; 10
     cae:	d8 07       	cpc	r29, r24
     cb0:	21 f4       	brne	.+8      	; 0xcba <usart_init_rs232+0xc0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     cb2:	61 e0       	ldi	r22, 0x01	; 1
     cb4:	85 e0       	ldi	r24, 0x05	; 5
     cb6:	71 db       	rcall	.-2334   	; 0x39a <sysclk_enable_module>
     cb8:	8f c0       	rjmp	.+286    	; 0xdd8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     cba:	c1 15       	cp	r28, r1
     cbc:	eb e0       	ldi	r30, 0x0B	; 11
     cbe:	de 07       	cpc	r29, r30
     cc0:	21 f4       	brne	.+8      	; 0xcca <usart_init_rs232+0xd0>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     cc2:	61 e0       	ldi	r22, 0x01	; 1
     cc4:	86 e0       	ldi	r24, 0x06	; 6
     cc6:	69 db       	rcall	.-2350   	; 0x39a <sysclk_enable_module>
     cc8:	87 c0       	rjmp	.+270    	; 0xdd8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     cca:	c0 34       	cpi	r28, 0x40	; 64
     ccc:	f8 e0       	ldi	r31, 0x08	; 8
     cce:	df 07       	cpc	r29, r31
     cd0:	21 f4       	brne	.+8      	; 0xcda <usart_init_rs232+0xe0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     cd2:	62 e0       	ldi	r22, 0x02	; 2
     cd4:	83 e0       	ldi	r24, 0x03	; 3
     cd6:	61 db       	rcall	.-2366   	; 0x39a <sysclk_enable_module>
     cd8:	7f c0       	rjmp	.+254    	; 0xdd8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     cda:	c0 34       	cpi	r28, 0x40	; 64
     cdc:	89 e0       	ldi	r24, 0x09	; 9
     cde:	d8 07       	cpc	r29, r24
     ce0:	21 f4       	brne	.+8      	; 0xcea <usart_init_rs232+0xf0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     ce2:	62 e0       	ldi	r22, 0x02	; 2
     ce4:	84 e0       	ldi	r24, 0x04	; 4
     ce6:	59 db       	rcall	.-2382   	; 0x39a <sysclk_enable_module>
     ce8:	77 c0       	rjmp	.+238    	; 0xdd8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     cea:	c0 34       	cpi	r28, 0x40	; 64
     cec:	ea e0       	ldi	r30, 0x0A	; 10
     cee:	de 07       	cpc	r29, r30
     cf0:	21 f4       	brne	.+8      	; 0xcfa <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     cf2:	62 e0       	ldi	r22, 0x02	; 2
     cf4:	85 e0       	ldi	r24, 0x05	; 5
     cf6:	51 db       	rcall	.-2398   	; 0x39a <sysclk_enable_module>
     cf8:	6f c0       	rjmp	.+222    	; 0xdd8 <usart_init_rs232+0x1de>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     cfa:	c0 39       	cpi	r28, 0x90	; 144
     cfc:	f8 e0       	ldi	r31, 0x08	; 8
     cfe:	df 07       	cpc	r29, r31
     d00:	21 f4       	brne	.+8      	; 0xd0a <usart_init_rs232+0x110>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     d02:	64 e0       	ldi	r22, 0x04	; 4
     d04:	83 e0       	ldi	r24, 0x03	; 3
     d06:	49 db       	rcall	.-2414   	; 0x39a <sysclk_enable_module>
     d08:	67 c0       	rjmp	.+206    	; 0xdd8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     d0a:	c0 39       	cpi	r28, 0x90	; 144
     d0c:	89 e0       	ldi	r24, 0x09	; 9
     d0e:	d8 07       	cpc	r29, r24
     d10:	21 f4       	brne	.+8      	; 0xd1a <usart_init_rs232+0x120>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     d12:	64 e0       	ldi	r22, 0x04	; 4
     d14:	84 e0       	ldi	r24, 0x04	; 4
     d16:	41 db       	rcall	.-2430   	; 0x39a <sysclk_enable_module>
     d18:	5f c0       	rjmp	.+190    	; 0xdd8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     d1a:	c0 39       	cpi	r28, 0x90	; 144
     d1c:	ea e0       	ldi	r30, 0x0A	; 10
     d1e:	de 07       	cpc	r29, r30
     d20:	21 f4       	brne	.+8      	; 0xd2a <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     d22:	64 e0       	ldi	r22, 0x04	; 4
     d24:	85 e0       	ldi	r24, 0x05	; 5
     d26:	39 db       	rcall	.-2446   	; 0x39a <sysclk_enable_module>
     d28:	57 c0       	rjmp	.+174    	; 0xdd8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     d2a:	c0 39       	cpi	r28, 0x90	; 144
     d2c:	fb e0       	ldi	r31, 0x0B	; 11
     d2e:	df 07       	cpc	r29, r31
     d30:	21 f4       	brne	.+8      	; 0xd3a <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     d32:	64 e0       	ldi	r22, 0x04	; 4
     d34:	86 e0       	ldi	r24, 0x06	; 6
     d36:	31 db       	rcall	.-2462   	; 0x39a <sysclk_enable_module>
     d38:	4f c0       	rjmp	.+158    	; 0xdd8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     d3a:	c0 3c       	cpi	r28, 0xC0	; 192
     d3c:	88 e0       	ldi	r24, 0x08	; 8
     d3e:	d8 07       	cpc	r29, r24
     d40:	21 f4       	brne	.+8      	; 0xd4a <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     d42:	68 e0       	ldi	r22, 0x08	; 8
     d44:	83 e0       	ldi	r24, 0x03	; 3
     d46:	29 db       	rcall	.-2478   	; 0x39a <sysclk_enable_module>
     d48:	47 c0       	rjmp	.+142    	; 0xdd8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     d4a:	c0 3c       	cpi	r28, 0xC0	; 192
     d4c:	e9 e0       	ldi	r30, 0x09	; 9
     d4e:	de 07       	cpc	r29, r30
     d50:	21 f4       	brne	.+8      	; 0xd5a <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     d52:	68 e0       	ldi	r22, 0x08	; 8
     d54:	84 e0       	ldi	r24, 0x04	; 4
     d56:	21 db       	rcall	.-2494   	; 0x39a <sysclk_enable_module>
     d58:	3f c0       	rjmp	.+126    	; 0xdd8 <usart_init_rs232+0x1de>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     d5a:	c0 3a       	cpi	r28, 0xA0	; 160
     d5c:	f8 e0       	ldi	r31, 0x08	; 8
     d5e:	df 07       	cpc	r29, r31
     d60:	21 f4       	brne	.+8      	; 0xd6a <usart_init_rs232+0x170>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     d62:	60 e1       	ldi	r22, 0x10	; 16
     d64:	83 e0       	ldi	r24, 0x03	; 3
     d66:	19 db       	rcall	.-2510   	; 0x39a <sysclk_enable_module>
     d68:	37 c0       	rjmp	.+110    	; 0xdd8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     d6a:	c0 3a       	cpi	r28, 0xA0	; 160
     d6c:	89 e0       	ldi	r24, 0x09	; 9
     d6e:	d8 07       	cpc	r29, r24
     d70:	21 f4       	brne	.+8      	; 0xd7a <usart_init_rs232+0x180>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     d72:	60 e1       	ldi	r22, 0x10	; 16
     d74:	84 e0       	ldi	r24, 0x04	; 4
     d76:	11 db       	rcall	.-2526   	; 0x39a <sysclk_enable_module>
     d78:	2f c0       	rjmp	.+94     	; 0xdd8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     d7a:	c0 3a       	cpi	r28, 0xA0	; 160
     d7c:	ea e0       	ldi	r30, 0x0A	; 10
     d7e:	de 07       	cpc	r29, r30
     d80:	21 f4       	brne	.+8      	; 0xd8a <usart_init_rs232+0x190>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     d82:	60 e1       	ldi	r22, 0x10	; 16
     d84:	85 e0       	ldi	r24, 0x05	; 5
     d86:	09 db       	rcall	.-2542   	; 0x39a <sysclk_enable_module>
     d88:	27 c0       	rjmp	.+78     	; 0xdd8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     d8a:	c0 3a       	cpi	r28, 0xA0	; 160
     d8c:	fb e0       	ldi	r31, 0x0B	; 11
     d8e:	df 07       	cpc	r29, r31
     d90:	21 f4       	brne	.+8      	; 0xd9a <usart_init_rs232+0x1a0>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     d92:	60 e1       	ldi	r22, 0x10	; 16
     d94:	86 e0       	ldi	r24, 0x06	; 6
     d96:	01 db       	rcall	.-2558   	; 0x39a <sysclk_enable_module>
     d98:	1f c0       	rjmp	.+62     	; 0xdd8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     d9a:	c0 3b       	cpi	r28, 0xB0	; 176
     d9c:	88 e0       	ldi	r24, 0x08	; 8
     d9e:	d8 07       	cpc	r29, r24
     da0:	21 f4       	brne	.+8      	; 0xdaa <usart_init_rs232+0x1b0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     da2:	60 e2       	ldi	r22, 0x20	; 32
     da4:	83 e0       	ldi	r24, 0x03	; 3
     da6:	f9 da       	rcall	.-2574   	; 0x39a <sysclk_enable_module>
     da8:	17 c0       	rjmp	.+46     	; 0xdd8 <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     daa:	c0 3b       	cpi	r28, 0xB0	; 176
     dac:	e9 e0       	ldi	r30, 0x09	; 9
     dae:	de 07       	cpc	r29, r30
     db0:	21 f4       	brne	.+8      	; 0xdba <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     db2:	60 e2       	ldi	r22, 0x20	; 32
     db4:	84 e0       	ldi	r24, 0x04	; 4
     db6:	f1 da       	rcall	.-2590   	; 0x39a <sysclk_enable_module>
     db8:	0f c0       	rjmp	.+30     	; 0xdd8 <usart_init_rs232+0x1de>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     dba:	c0 38       	cpi	r28, 0x80	; 128
     dbc:	f4 e0       	ldi	r31, 0x04	; 4
     dbe:	df 07       	cpc	r29, r31
     dc0:	21 f4       	brne	.+8      	; 0xdca <usart_init_rs232+0x1d0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     dc2:	60 e4       	ldi	r22, 0x40	; 64
     dc4:	83 e0       	ldi	r24, 0x03	; 3
     dc6:	e9 da       	rcall	.-2606   	; 0x39a <sysclk_enable_module>
     dc8:	07 c0       	rjmp	.+14     	; 0xdd8 <usart_init_rs232+0x1de>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     dca:	c0 3a       	cpi	r28, 0xA0	; 160
     dcc:	84 e0       	ldi	r24, 0x04	; 4
     dce:	d8 07       	cpc	r29, r24
     dd0:	19 f4       	brne	.+6      	; 0xdd8 <usart_init_rs232+0x1de>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     dd2:	60 e4       	ldi	r22, 0x40	; 64
     dd4:	85 e0       	ldi	r24, 0x05	; 5
     dd6:	e1 da       	rcall	.-2622   	; 0x39a <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     dd8:	8d 81       	ldd	r24, Y+5	; 0x05
     dda:	8f 73       	andi	r24, 0x3F	; 63
     ddc:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     dde:	f8 01       	movw	r30, r16
     de0:	94 81       	ldd	r25, Z+4	; 0x04
     de2:	85 81       	ldd	r24, Z+5	; 0x05
     de4:	89 2b       	or	r24, r25
     de6:	96 81       	ldd	r25, Z+6	; 0x06
     de8:	99 23       	and	r25, r25
     dea:	11 f0       	breq	.+4      	; 0xdf0 <usart_init_rs232+0x1f6>
     dec:	98 e0       	ldi	r25, 0x08	; 8
     dee:	01 c0       	rjmp	.+2      	; 0xdf2 <usart_init_rs232+0x1f8>
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	89 2b       	or	r24, r25
     df4:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     df6:	f8 01       	movw	r30, r16
     df8:	40 81       	ld	r20, Z
     dfa:	51 81       	ldd	r21, Z+1	; 0x01
     dfc:	62 81       	ldd	r22, Z+2	; 0x02
     dfe:	73 81       	ldd	r23, Z+3	; 0x03
     e00:	00 e0       	ldi	r16, 0x00	; 0
     e02:	18 e4       	ldi	r17, 0x48	; 72
     e04:	28 ee       	ldi	r18, 0xE8	; 232
     e06:	31 e0       	ldi	r19, 0x01	; 1
     e08:	ce 01       	movw	r24, r28
     e0a:	f1 dd       	rcall	.-1054   	; 0x9ee <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     e0c:	9c 81       	ldd	r25, Y+4	; 0x04
     e0e:	98 60       	ori	r25, 0x08	; 8
     e10:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     e12:	9c 81       	ldd	r25, Y+4	; 0x04
     e14:	90 61       	ori	r25, 0x10	; 16
     e16:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     e18:	df 91       	pop	r29
     e1a:	cf 91       	pop	r28
     e1c:	1f 91       	pop	r17
     e1e:	0f 91       	pop	r16
     e20:	08 95       	ret

00000e22 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
     e26:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
     e28:	dc dd       	rcall	.-1096   	; 0x9e2 <usart_getchar>
     e2a:	88 83       	st	Y, r24
}
     e2c:	df 91       	pop	r29
     e2e:	cf 91       	pop	r28
     e30:	08 95       	ret

00000e32 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     e32:	cf cd       	rjmp	.-1122   	; 0x9d2 <usart_putchar>
}
     e34:	08 95       	ret

00000e36 <main>:
	adcch_set_input(&adcch_conf, ADCCH_POS_PIN1, ADCCH_NEG_PIN5, GAIN);
	adc_write_configuration(&MY_ADC, &adc_conf);
	adcch_write_configuration(&MY_ADC, MY_ADC_CH, &adcch_conf);
}

int main (void) {
     e36:	cf 93       	push	r28
     e38:	df 93       	push	r29
     e3a:	cd b7       	in	r28, 0x3d	; 61
     e3c:	de b7       	in	r29, 0x3e	; 62
     e3e:	2e 97       	sbiw	r28, 0x0e	; 14
     e40:	cd bf       	out	0x3d, r28	; 61
     e42:	de bf       	out	0x3e, r29	; 62
		.charlength = USART_CHSIZE_8BIT_gc,
		.paritytype = USART_PMODE_DISABLED_gc,
		.stopbits = false
	};
	
	sysclk_init();
     e44:	83 da       	rcall	.-2810   	; 0x34c <sysclk_init>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
     e46:	80 ea       	ldi	r24, 0xA0	; 160
     e48:	9a e0       	ldi	r25, 0x0A	; 10
     e4a:	80 93 22 20 	sts	0x2022, r24
     e4e:	90 93 23 20 	sts	0x2023, r25
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     e52:	89 e1       	ldi	r24, 0x19	; 25
     e54:	97 e0       	ldi	r25, 0x07	; 7
     e56:	80 93 20 20 	sts	0x2020, r24
     e5a:	90 93 21 20 	sts	0x2021, r25
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     e5e:	81 e1       	ldi	r24, 0x11	; 17
     e60:	97 e0       	ldi	r25, 0x07	; 7
     e62:	80 93 1e 20 	sts	0x201E, r24
     e66:	90 93 1f 20 	sts	0x201F, r25
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     e6a:	80 91 0a 20 	lds	r24, 0x200A
     e6e:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.paritytype   = options->paritytype;
     e70:	80 91 0b 20 	lds	r24, 0x200B
     e74:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.stopbits     = options->stopbits;
     e76:	80 91 0c 20 	lds	r24, 0x200C
     e7a:	88 87       	std	Y+8, r24	; 0x08
	usart_rs232_options.baudrate     = options->baudrate;
     e7c:	80 91 06 20 	lds	r24, 0x2006
     e80:	90 91 07 20 	lds	r25, 0x2007
     e84:	a0 91 08 20 	lds	r26, 0x2008
     e88:	b0 91 09 20 	lds	r27, 0x2009
     e8c:	8a 83       	std	Y+2, r24	; 0x02
     e8e:	9b 83       	std	Y+3, r25	; 0x03
     e90:	ac 83       	std	Y+4, r26	; 0x04
     e92:	bd 83       	std	Y+5, r27	; 0x05
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
     e94:	60 e1       	ldi	r22, 0x10	; 16
     e96:	85 e0       	ldi	r24, 0x05	; 5
     e98:	80 da       	rcall	.-2816   	; 0x39a <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     e9a:	be 01       	movw	r22, r28
     e9c:	6e 5f       	subi	r22, 0xFE	; 254
     e9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ea0:	80 ea       	ldi	r24, 0xA0	; 160
     ea2:	9a e0       	ldi	r25, 0x0A	; 10
     ea4:	aa de       	rcall	.-684    	; 0xbfa <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
     ea6:	64 ee       	ldi	r22, 0xE4	; 228
     ea8:	71 e0       	ldi	r23, 0x01	; 1
     eaa:	8d ef       	ldi	r24, 0xFD	; 253
     eac:	91 e0       	ldi	r25, 0x01	; 1
     eae:	91 d6       	rcall	.+3362   	; 0x1bd2 <fdevopen>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
     eb0:	88 e0       	ldi	r24, 0x08	; 8
     eb2:	e0 e8       	ldi	r30, 0x80	; 128
     eb4:	f6 e0       	ldi	r31, 0x06	; 6
     eb6:	81 83       	std	Z+1, r24	; 0x01

static void adc_init(void)
{
	struct adc_config adc_conf;
	struct adc_channel_config adcch_conf;
	adc_read_configuration(&MY_ADC, &adc_conf);
     eb8:	be 01       	movw	r22, r28
     eba:	6e 5f       	subi	r22, 0xFE	; 254
     ebc:	7f 4f       	sbci	r23, 0xFF	; 255
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	92 e0       	ldi	r25, 0x02	; 2
     ec2:	e1 dc       	rcall	.-1598   	; 0x886 <adc_read_configuration>
	adcch_read_configuration(&MY_ADC, MY_ADC_CH, &adcch_conf);
     ec4:	ae 01       	movw	r20, r28
     ec6:	47 5f       	subi	r20, 0xF7	; 247
     ec8:	5f 4f       	sbci	r21, 0xFF	; 255
     eca:	61 e0       	ldi	r22, 0x01	; 1
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	92 e0       	ldi	r25, 0x02	; 2
     ed0:	36 dd       	rcall	.-1428   	; 0x93e <adcch_read_configuration>
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
     ed2:	8b 81       	ldd	r24, Y+3	; 0x03
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
     ed4:	9c 81       	ldd	r25, Y+4	; 0x04
     ed6:	9f 78       	andi	r25, 0x8F	; 143
     ed8:	9c 83       	std	Y+4, r25	; 0x04
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
     eda:	81 7e       	andi	r24, 0xE1	; 225
     edc:	80 61       	ori	r24, 0x10	; 16
     ede:	8b 83       	std	Y+3, r24	; 0x03
		conf->evctrl = ADC_EVACT_NONE_gc;
     ee0:	1d 82       	std	Y+5, r1	; 0x05
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
     ee2:	84 e0       	ldi	r24, 0x04	; 4
     ee4:	8e 83       	std	Y+6, r24	; 0x06
		 */
#if XMEGA_E
		ch_conf->ctrl = adcch_get_gain_setting(gain) |
				ADC_CH_INPUTMODE_DIFFWGAINH_gc;
#else
		ch_conf->ctrl = adcch_get_gain_setting(gain) |
     ee6:	8b e1       	ldi	r24, 0x1B	; 27
     ee8:	89 87       	std	Y+9, r24	; 0x09
				ADC_CH_INPUTMODE_DIFFWGAIN_gc;
#endif
		ch_conf->muxctrl = (pos << ADC_CH_MUXPOS_gp) |
     eea:	89 e0       	ldi	r24, 0x09	; 9
     eec:	8a 87       	std	Y+10, r24	; 0x0a
	adc_set_conversion_parameters(&adc_conf, ADC_SIGN_ON, ADC_RES_12, ADC_REF_BANDGAP);
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_MANUAL, 1, 0);
	adc_set_clock_rate(&adc_conf, 500000UL);
	adcch_set_input(&adcch_conf, ADCCH_POS_PIN1, ADCCH_NEG_PIN5, GAIN);
	adc_write_configuration(&MY_ADC, &adc_conf);
     eee:	be 01       	movw	r22, r28
     ef0:	6e 5f       	subi	r22, 0xFE	; 254
     ef2:	7f 4f       	sbci	r23, 0xFF	; 255
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	92 e0       	ldi	r25, 0x02	; 2
     ef8:	75 dc       	rcall	.-1814   	; 0x7e4 <adc_write_configuration>
	adcch_write_configuration(&MY_ADC, MY_ADC_CH, &adcch_conf);
     efa:	ae 01       	movw	r20, r28
     efc:	47 5f       	subi	r20, 0xF7	; 247
     efe:	5f 4f       	sbci	r21, 0xFF	; 255
     f00:	61 e0       	ldi	r22, 0x01	; 1
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	92 e0       	ldi	r25, 0x02	; 2
     f06:	e2 dc       	rcall	.-1596   	; 0x8cc <adcch_write_configuration>
	
	sysclk_init();
	stdio_serial_init(&USARTE0, &USART_SERIAL_OPTIONS);
	ioport_set_pin_dir(UART_TXPIN, IOPORT_DIR_OUTPUT);
	adc_init();
	adc_enable(&MY_ADC);
     f08:	80 e0       	ldi	r24, 0x00	; 0
     f0a:	92 e0       	ldi	r25, 0x02	; 2
     f0c:	c4 da       	rcall	.-2680   	; 0x496 <adc_enable>

	while(1) {
		scanf("%c\r", &received_char);
     f0e:	ce 01       	movw	r24, r28
     f10:	01 96       	adiw	r24, 0x01	; 1
     f12:	8d 87       	std	Y+13, r24	; 0x0d
     f14:	9e 87       	std	Y+14, r25	; 0x0e
     f16:	81 2c       	mov	r8, r1
		result = 0;
     f18:	71 2c       	mov	r7, r1
     f1a:	61 2c       	mov	r6, r1
     f1c:	51 2c       	mov	r5, r1
     f1e:	41 2c       	mov	r4, r1
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
     f20:	00 e0       	ldi	r16, 0x00	; 0
     f22:	12 e0       	ldi	r17, 0x02	; 2
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
     f24:	99 24       	eor	r9, r9
     f26:	93 94       	inc	r9
			result += adc_get_signed_result(&MY_ADC, MY_ADC_CH);
		}
		result = (float)result / SAMPLES_PER_MEASUREMENT;
		result_mV = ((float)(result * REF_VOLTAGE_mV) / ADC_TOP) / GAIN;
		result_g = (result_mV + 0.383) * g_const;
		printf("%f\r",result_g);
     f28:	0f 2e       	mov	r0, r31
     f2a:	f1 e1       	ldi	r31, 0x11	; 17
     f2c:	2f 2e       	mov	r2, r31
     f2e:	f0 e2       	ldi	r31, 0x20	; 32
     f30:	3f 2e       	mov	r3, r31
     f32:	f0 2d       	mov	r31, r0
	ioport_set_pin_dir(UART_TXPIN, IOPORT_DIR_OUTPUT);
	adc_init();
	adc_enable(&MY_ADC);

	while(1) {
		scanf("%c\r", &received_char);
     f34:	9e 85       	ldd	r25, Y+14	; 0x0e
     f36:	9f 93       	push	r25
     f38:	ad 85       	ldd	r26, Y+13	; 0x0d
     f3a:	af 93       	push	r26
     f3c:	ad e0       	ldi	r26, 0x0D	; 13
     f3e:	b0 e2       	ldi	r27, 0x20	; 32
     f40:	bf 93       	push	r27
     f42:	af 93       	push	r26
     f44:	d3 d6       	rcall	.+3494   	; 0x1cec <scanf>
     f46:	0f 90       	pop	r0
     f48:	0f 90       	pop	r0
     f4a:	0f 90       	pop	r0
     f4c:	0f 90       	pop	r0
     f4e:	e8 2c       	mov	r14, r8
     f50:	68 94       	set
     f52:	ff 24       	eor	r15, r15
     f54:	f3 f8       	bld	r15, 3
		result = 0;
     f56:	a7 2c       	mov	r10, r7
     f58:	b6 2c       	mov	r11, r6
     f5a:	c5 2c       	mov	r12, r5
     f5c:	d4 2c       	mov	r13, r4

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     f5e:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     f60:	f8 94       	cli
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
     f62:	d8 01       	movw	r26, r16
     f64:	9c 91       	ld	r25, X
     f66:	94 60       	ori	r25, 0x04	; 4
     f68:	9c 93       	st	X, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f6a:	8f bf       	out	0x3f, r24	; 63
 *
 * \return Mask with interrupt flags.
 */
static inline uint8_t adc_get_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	return (adc->INTFLAGS >> ADC_CH0IF_bp) & ch_mask;
     f6c:	f8 01       	movw	r30, r16
     f6e:	86 81       	ldd	r24, Z+6	; 0x06
 * \arg \c ADC_CHn , where \c n specifies the channel. (These can be OR'ed
 * together.)
 */
static inline void adc_wait_for_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	do { } while (adc_get_interrupt_flag(adc, ch_mask) != ch_mask);
     f70:	80 ff       	sbrs	r24, 0
     f72:	fc cf       	rjmp	.-8      	; 0xf6c <main+0x136>
 *
 * \note The ADC must be enabled for this function to have any effect.
 */
static inline void adc_clear_interrupt_flag(ADC_t *adc, uint8_t ch_mask)
{
	adc->INTFLAGS = ch_mask << ADC_CH0IF_bp;
     f74:	96 82       	std	Z+6, r9	; 0x06

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     f76:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     f78:	f8 94       	cli
	ADC_CH_t *adc_ch;

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();
	val = adc_ch->RES;
     f7a:	64 a1       	ldd	r22, Z+36	; 0x24
     f7c:	75 a1       	ldd	r23, Z+37	; 0x25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f7e:	8f bf       	out	0x3f, r24	; 63
		for (int i = 0; i < SAMPLES_PER_MEASUREMENT; i++) {
			adc_start_conversion(&MY_ADC, MY_ADC_CH);
			adc_wait_for_interrupt_flag(&MY_ADC, MY_ADC_CH);
			result += adc_get_signed_result(&MY_ADC, MY_ADC_CH);
     f80:	88 27       	eor	r24, r24
     f82:	77 fd       	sbrc	r23, 7
     f84:	80 95       	com	r24
     f86:	98 2f       	mov	r25, r24
     f88:	a4 d0       	rcall	.+328    	; 0x10d2 <__floatsisf>
     f8a:	9b 01       	movw	r18, r22
     f8c:	ac 01       	movw	r20, r24
     f8e:	6a 2d       	mov	r22, r10
     f90:	7b 2d       	mov	r23, r11
     f92:	8c 2d       	mov	r24, r12
     f94:	9d 2d       	mov	r25, r13
     f96:	37 d0       	rcall	.+110    	; 0x1006 <__addsf3>
     f98:	a6 2e       	mov	r10, r22
     f9a:	b7 2e       	mov	r11, r23
     f9c:	c8 2e       	mov	r12, r24
     f9e:	d9 2e       	mov	r13, r25
     fa0:	b1 e0       	ldi	r27, 0x01	; 1
     fa2:	eb 1a       	sub	r14, r27
     fa4:	f1 08       	sbc	r15, r1
	adc_enable(&MY_ADC);

	while(1) {
		scanf("%c\r", &received_char);
		result = 0;
		for (int i = 0; i < SAMPLES_PER_MEASUREMENT; i++) {
     fa6:	e1 14       	cp	r14, r1
     fa8:	f1 04       	cpc	r15, r1
     faa:	c9 f6       	brne	.-78     	; 0xf5e <main+0x128>
			adc_start_conversion(&MY_ADC, MY_ADC_CH);
			adc_wait_for_interrupt_flag(&MY_ADC, MY_ADC_CH);
			result += adc_get_signed_result(&MY_ADC, MY_ADC_CH);
		}
		result = (float)result / SAMPLES_PER_MEASUREMENT;
     fac:	20 e0       	ldi	r18, 0x00	; 0
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	40 e0       	ldi	r20, 0x00	; 0
     fb2:	5a e3       	ldi	r21, 0x3A	; 58
     fb4:	1a d1       	rcall	.+564    	; 0x11ea <__mulsf3>
		result_mV = ((float)(result * REF_VOLTAGE_mV) / ADC_TOP) / GAIN;
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	30 e8       	ldi	r19, 0x80	; 128
     fba:	49 e8       	ldi	r20, 0x89	; 137
     fbc:	54 e4       	ldi	r21, 0x44	; 68
     fbe:	15 d1       	rcall	.+554    	; 0x11ea <__mulsf3>
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	40 e0       	ldi	r20, 0x00	; 0
     fc6:	5a e3       	ldi	r21, 0x3A	; 58
     fc8:	10 d1       	rcall	.+544    	; 0x11ea <__mulsf3>
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	40 e8       	ldi	r20, 0x80	; 128
     fd0:	5c e3       	ldi	r21, 0x3C	; 60
     fd2:	0b d1       	rcall	.+534    	; 0x11ea <__mulsf3>
		result_g = (result_mV + 0.383) * g_const;
     fd4:	23 e9       	ldi	r18, 0x93	; 147
     fd6:	38 e1       	ldi	r19, 0x18	; 24
     fd8:	44 ec       	ldi	r20, 0xC4	; 196
     fda:	5e e3       	ldi	r21, 0x3E	; 62
     fdc:	14 d0       	rcall	.+40     	; 0x1006 <__addsf3>
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	43 e6       	ldi	r20, 0x63	; 99
     fe4:	53 e4       	ldi	r21, 0x43	; 67
     fe6:	01 d1       	rcall	.+514    	; 0x11ea <__mulsf3>
		printf("%f\r",result_g);
     fe8:	9f 93       	push	r25
     fea:	8f 93       	push	r24
     fec:	7f 93       	push	r23
     fee:	6f 93       	push	r22
     ff0:	3f 92       	push	r3
     ff2:	2f 92       	push	r2
     ff4:	6a d6       	rcall	.+3284   	; 0x1cca <printf>
	}
     ff6:	0f 90       	pop	r0
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	0f 90       	pop	r0
    1000:	0f 90       	pop	r0
    1002:	98 cf       	rjmp	.-208    	; 0xf34 <main+0xfe>

00001004 <__subsf3>:
    1004:	50 58       	subi	r21, 0x80	; 128

00001006 <__addsf3>:
    1006:	bb 27       	eor	r27, r27
    1008:	aa 27       	eor	r26, r26
    100a:	0e d0       	rcall	.+28     	; 0x1028 <__addsf3x>
    100c:	b4 c0       	rjmp	.+360    	; 0x1176 <__fp_round>
    100e:	a5 d0       	rcall	.+330    	; 0x115a <__fp_pscA>
    1010:	30 f0       	brcs	.+12     	; 0x101e <__addsf3+0x18>
    1012:	aa d0       	rcall	.+340    	; 0x1168 <__fp_pscB>
    1014:	20 f0       	brcs	.+8      	; 0x101e <__addsf3+0x18>
    1016:	31 f4       	brne	.+12     	; 0x1024 <__addsf3+0x1e>
    1018:	9f 3f       	cpi	r25, 0xFF	; 255
    101a:	11 f4       	brne	.+4      	; 0x1020 <__addsf3+0x1a>
    101c:	1e f4       	brtc	.+6      	; 0x1024 <__addsf3+0x1e>
    101e:	9a c0       	rjmp	.+308    	; 0x1154 <__fp_nan>
    1020:	0e f4       	brtc	.+2      	; 0x1024 <__addsf3+0x1e>
    1022:	e0 95       	com	r30
    1024:	e7 fb       	bst	r30, 7
    1026:	90 c0       	rjmp	.+288    	; 0x1148 <__fp_inf>

00001028 <__addsf3x>:
    1028:	e9 2f       	mov	r30, r25
    102a:	b6 d0       	rcall	.+364    	; 0x1198 <__fp_split3>
    102c:	80 f3       	brcs	.-32     	; 0x100e <__addsf3+0x8>
    102e:	ba 17       	cp	r27, r26
    1030:	62 07       	cpc	r22, r18
    1032:	73 07       	cpc	r23, r19
    1034:	84 07       	cpc	r24, r20
    1036:	95 07       	cpc	r25, r21
    1038:	18 f0       	brcs	.+6      	; 0x1040 <__addsf3x+0x18>
    103a:	71 f4       	brne	.+28     	; 0x1058 <__addsf3x+0x30>
    103c:	9e f5       	brtc	.+102    	; 0x10a4 <__addsf3x+0x7c>
    103e:	ce c0       	rjmp	.+412    	; 0x11dc <__fp_zero>
    1040:	0e f4       	brtc	.+2      	; 0x1044 <__addsf3x+0x1c>
    1042:	e0 95       	com	r30
    1044:	0b 2e       	mov	r0, r27
    1046:	ba 2f       	mov	r27, r26
    1048:	a0 2d       	mov	r26, r0
    104a:	0b 01       	movw	r0, r22
    104c:	b9 01       	movw	r22, r18
    104e:	90 01       	movw	r18, r0
    1050:	0c 01       	movw	r0, r24
    1052:	ca 01       	movw	r24, r20
    1054:	a0 01       	movw	r20, r0
    1056:	11 24       	eor	r1, r1
    1058:	ff 27       	eor	r31, r31
    105a:	59 1b       	sub	r21, r25
    105c:	99 f0       	breq	.+38     	; 0x1084 <__addsf3x+0x5c>
    105e:	59 3f       	cpi	r21, 0xF9	; 249
    1060:	50 f4       	brcc	.+20     	; 0x1076 <__addsf3x+0x4e>
    1062:	50 3e       	cpi	r21, 0xE0	; 224
    1064:	68 f1       	brcs	.+90     	; 0x10c0 <__addsf3x+0x98>
    1066:	1a 16       	cp	r1, r26
    1068:	f0 40       	sbci	r31, 0x00	; 0
    106a:	a2 2f       	mov	r26, r18
    106c:	23 2f       	mov	r18, r19
    106e:	34 2f       	mov	r19, r20
    1070:	44 27       	eor	r20, r20
    1072:	58 5f       	subi	r21, 0xF8	; 248
    1074:	f3 cf       	rjmp	.-26     	; 0x105c <__addsf3x+0x34>
    1076:	46 95       	lsr	r20
    1078:	37 95       	ror	r19
    107a:	27 95       	ror	r18
    107c:	a7 95       	ror	r26
    107e:	f0 40       	sbci	r31, 0x00	; 0
    1080:	53 95       	inc	r21
    1082:	c9 f7       	brne	.-14     	; 0x1076 <__addsf3x+0x4e>
    1084:	7e f4       	brtc	.+30     	; 0x10a4 <__addsf3x+0x7c>
    1086:	1f 16       	cp	r1, r31
    1088:	ba 0b       	sbc	r27, r26
    108a:	62 0b       	sbc	r22, r18
    108c:	73 0b       	sbc	r23, r19
    108e:	84 0b       	sbc	r24, r20
    1090:	ba f0       	brmi	.+46     	; 0x10c0 <__addsf3x+0x98>
    1092:	91 50       	subi	r25, 0x01	; 1
    1094:	a1 f0       	breq	.+40     	; 0x10be <__addsf3x+0x96>
    1096:	ff 0f       	add	r31, r31
    1098:	bb 1f       	adc	r27, r27
    109a:	66 1f       	adc	r22, r22
    109c:	77 1f       	adc	r23, r23
    109e:	88 1f       	adc	r24, r24
    10a0:	c2 f7       	brpl	.-16     	; 0x1092 <__addsf3x+0x6a>
    10a2:	0e c0       	rjmp	.+28     	; 0x10c0 <__addsf3x+0x98>
    10a4:	ba 0f       	add	r27, r26
    10a6:	62 1f       	adc	r22, r18
    10a8:	73 1f       	adc	r23, r19
    10aa:	84 1f       	adc	r24, r20
    10ac:	48 f4       	brcc	.+18     	; 0x10c0 <__addsf3x+0x98>
    10ae:	87 95       	ror	r24
    10b0:	77 95       	ror	r23
    10b2:	67 95       	ror	r22
    10b4:	b7 95       	ror	r27
    10b6:	f7 95       	ror	r31
    10b8:	9e 3f       	cpi	r25, 0xFE	; 254
    10ba:	08 f0       	brcs	.+2      	; 0x10be <__addsf3x+0x96>
    10bc:	b3 cf       	rjmp	.-154    	; 0x1024 <__addsf3+0x1e>
    10be:	93 95       	inc	r25
    10c0:	88 0f       	add	r24, r24
    10c2:	08 f0       	brcs	.+2      	; 0x10c6 <__addsf3x+0x9e>
    10c4:	99 27       	eor	r25, r25
    10c6:	ee 0f       	add	r30, r30
    10c8:	97 95       	ror	r25
    10ca:	87 95       	ror	r24
    10cc:	08 95       	ret

000010ce <__floatunsisf>:
    10ce:	e8 94       	clt
    10d0:	09 c0       	rjmp	.+18     	; 0x10e4 <__floatsisf+0x12>

000010d2 <__floatsisf>:
    10d2:	97 fb       	bst	r25, 7
    10d4:	3e f4       	brtc	.+14     	; 0x10e4 <__floatsisf+0x12>
    10d6:	90 95       	com	r25
    10d8:	80 95       	com	r24
    10da:	70 95       	com	r23
    10dc:	61 95       	neg	r22
    10de:	7f 4f       	sbci	r23, 0xFF	; 255
    10e0:	8f 4f       	sbci	r24, 0xFF	; 255
    10e2:	9f 4f       	sbci	r25, 0xFF	; 255
    10e4:	99 23       	and	r25, r25
    10e6:	a9 f0       	breq	.+42     	; 0x1112 <__floatsisf+0x40>
    10e8:	f9 2f       	mov	r31, r25
    10ea:	96 e9       	ldi	r25, 0x96	; 150
    10ec:	bb 27       	eor	r27, r27
    10ee:	93 95       	inc	r25
    10f0:	f6 95       	lsr	r31
    10f2:	87 95       	ror	r24
    10f4:	77 95       	ror	r23
    10f6:	67 95       	ror	r22
    10f8:	b7 95       	ror	r27
    10fa:	f1 11       	cpse	r31, r1
    10fc:	f8 cf       	rjmp	.-16     	; 0x10ee <__floatsisf+0x1c>
    10fe:	fa f4       	brpl	.+62     	; 0x113e <__floatsisf+0x6c>
    1100:	bb 0f       	add	r27, r27
    1102:	11 f4       	brne	.+4      	; 0x1108 <__floatsisf+0x36>
    1104:	60 ff       	sbrs	r22, 0
    1106:	1b c0       	rjmp	.+54     	; 0x113e <__floatsisf+0x6c>
    1108:	6f 5f       	subi	r22, 0xFF	; 255
    110a:	7f 4f       	sbci	r23, 0xFF	; 255
    110c:	8f 4f       	sbci	r24, 0xFF	; 255
    110e:	9f 4f       	sbci	r25, 0xFF	; 255
    1110:	16 c0       	rjmp	.+44     	; 0x113e <__floatsisf+0x6c>
    1112:	88 23       	and	r24, r24
    1114:	11 f0       	breq	.+4      	; 0x111a <__floatsisf+0x48>
    1116:	96 e9       	ldi	r25, 0x96	; 150
    1118:	11 c0       	rjmp	.+34     	; 0x113c <__floatsisf+0x6a>
    111a:	77 23       	and	r23, r23
    111c:	21 f0       	breq	.+8      	; 0x1126 <__floatsisf+0x54>
    111e:	9e e8       	ldi	r25, 0x8E	; 142
    1120:	87 2f       	mov	r24, r23
    1122:	76 2f       	mov	r23, r22
    1124:	05 c0       	rjmp	.+10     	; 0x1130 <__floatsisf+0x5e>
    1126:	66 23       	and	r22, r22
    1128:	71 f0       	breq	.+28     	; 0x1146 <__floatsisf+0x74>
    112a:	96 e8       	ldi	r25, 0x86	; 134
    112c:	86 2f       	mov	r24, r22
    112e:	70 e0       	ldi	r23, 0x00	; 0
    1130:	60 e0       	ldi	r22, 0x00	; 0
    1132:	2a f0       	brmi	.+10     	; 0x113e <__floatsisf+0x6c>
    1134:	9a 95       	dec	r25
    1136:	66 0f       	add	r22, r22
    1138:	77 1f       	adc	r23, r23
    113a:	88 1f       	adc	r24, r24
    113c:	da f7       	brpl	.-10     	; 0x1134 <__floatsisf+0x62>
    113e:	88 0f       	add	r24, r24
    1140:	96 95       	lsr	r25
    1142:	87 95       	ror	r24
    1144:	97 f9       	bld	r25, 7
    1146:	08 95       	ret

00001148 <__fp_inf>:
    1148:	97 f9       	bld	r25, 7
    114a:	9f 67       	ori	r25, 0x7F	; 127
    114c:	80 e8       	ldi	r24, 0x80	; 128
    114e:	70 e0       	ldi	r23, 0x00	; 0
    1150:	60 e0       	ldi	r22, 0x00	; 0
    1152:	08 95       	ret

00001154 <__fp_nan>:
    1154:	9f ef       	ldi	r25, 0xFF	; 255
    1156:	80 ec       	ldi	r24, 0xC0	; 192
    1158:	08 95       	ret

0000115a <__fp_pscA>:
    115a:	00 24       	eor	r0, r0
    115c:	0a 94       	dec	r0
    115e:	16 16       	cp	r1, r22
    1160:	17 06       	cpc	r1, r23
    1162:	18 06       	cpc	r1, r24
    1164:	09 06       	cpc	r0, r25
    1166:	08 95       	ret

00001168 <__fp_pscB>:
    1168:	00 24       	eor	r0, r0
    116a:	0a 94       	dec	r0
    116c:	12 16       	cp	r1, r18
    116e:	13 06       	cpc	r1, r19
    1170:	14 06       	cpc	r1, r20
    1172:	05 06       	cpc	r0, r21
    1174:	08 95       	ret

00001176 <__fp_round>:
    1176:	09 2e       	mov	r0, r25
    1178:	03 94       	inc	r0
    117a:	00 0c       	add	r0, r0
    117c:	11 f4       	brne	.+4      	; 0x1182 <__fp_round+0xc>
    117e:	88 23       	and	r24, r24
    1180:	52 f0       	brmi	.+20     	; 0x1196 <__fp_round+0x20>
    1182:	bb 0f       	add	r27, r27
    1184:	40 f4       	brcc	.+16     	; 0x1196 <__fp_round+0x20>
    1186:	bf 2b       	or	r27, r31
    1188:	11 f4       	brne	.+4      	; 0x118e <__fp_round+0x18>
    118a:	60 ff       	sbrs	r22, 0
    118c:	04 c0       	rjmp	.+8      	; 0x1196 <__fp_round+0x20>
    118e:	6f 5f       	subi	r22, 0xFF	; 255
    1190:	7f 4f       	sbci	r23, 0xFF	; 255
    1192:	8f 4f       	sbci	r24, 0xFF	; 255
    1194:	9f 4f       	sbci	r25, 0xFF	; 255
    1196:	08 95       	ret

00001198 <__fp_split3>:
    1198:	57 fd       	sbrc	r21, 7
    119a:	90 58       	subi	r25, 0x80	; 128
    119c:	44 0f       	add	r20, r20
    119e:	55 1f       	adc	r21, r21
    11a0:	59 f0       	breq	.+22     	; 0x11b8 <__fp_splitA+0x10>
    11a2:	5f 3f       	cpi	r21, 0xFF	; 255
    11a4:	71 f0       	breq	.+28     	; 0x11c2 <__fp_splitA+0x1a>
    11a6:	47 95       	ror	r20

000011a8 <__fp_splitA>:
    11a8:	88 0f       	add	r24, r24
    11aa:	97 fb       	bst	r25, 7
    11ac:	99 1f       	adc	r25, r25
    11ae:	61 f0       	breq	.+24     	; 0x11c8 <__fp_splitA+0x20>
    11b0:	9f 3f       	cpi	r25, 0xFF	; 255
    11b2:	79 f0       	breq	.+30     	; 0x11d2 <__fp_splitA+0x2a>
    11b4:	87 95       	ror	r24
    11b6:	08 95       	ret
    11b8:	12 16       	cp	r1, r18
    11ba:	13 06       	cpc	r1, r19
    11bc:	14 06       	cpc	r1, r20
    11be:	55 1f       	adc	r21, r21
    11c0:	f2 cf       	rjmp	.-28     	; 0x11a6 <__fp_split3+0xe>
    11c2:	46 95       	lsr	r20
    11c4:	f1 df       	rcall	.-30     	; 0x11a8 <__fp_splitA>
    11c6:	08 c0       	rjmp	.+16     	; 0x11d8 <__fp_splitA+0x30>
    11c8:	16 16       	cp	r1, r22
    11ca:	17 06       	cpc	r1, r23
    11cc:	18 06       	cpc	r1, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	f1 cf       	rjmp	.-30     	; 0x11b4 <__fp_splitA+0xc>
    11d2:	86 95       	lsr	r24
    11d4:	71 05       	cpc	r23, r1
    11d6:	61 05       	cpc	r22, r1
    11d8:	08 94       	sec
    11da:	08 95       	ret

000011dc <__fp_zero>:
    11dc:	e8 94       	clt

000011de <__fp_szero>:
    11de:	bb 27       	eor	r27, r27
    11e0:	66 27       	eor	r22, r22
    11e2:	77 27       	eor	r23, r23
    11e4:	cb 01       	movw	r24, r22
    11e6:	97 f9       	bld	r25, 7
    11e8:	08 95       	ret

000011ea <__mulsf3>:
    11ea:	0b d0       	rcall	.+22     	; 0x1202 <__mulsf3x>
    11ec:	c4 cf       	rjmp	.-120    	; 0x1176 <__fp_round>
    11ee:	b5 df       	rcall	.-150    	; 0x115a <__fp_pscA>
    11f0:	28 f0       	brcs	.+10     	; 0x11fc <__mulsf3+0x12>
    11f2:	ba df       	rcall	.-140    	; 0x1168 <__fp_pscB>
    11f4:	18 f0       	brcs	.+6      	; 0x11fc <__mulsf3+0x12>
    11f6:	95 23       	and	r25, r21
    11f8:	09 f0       	breq	.+2      	; 0x11fc <__mulsf3+0x12>
    11fa:	a6 cf       	rjmp	.-180    	; 0x1148 <__fp_inf>
    11fc:	ab cf       	rjmp	.-170    	; 0x1154 <__fp_nan>
    11fe:	11 24       	eor	r1, r1
    1200:	ee cf       	rjmp	.-36     	; 0x11de <__fp_szero>

00001202 <__mulsf3x>:
    1202:	ca df       	rcall	.-108    	; 0x1198 <__fp_split3>
    1204:	a0 f3       	brcs	.-24     	; 0x11ee <__mulsf3+0x4>

00001206 <__mulsf3_pse>:
    1206:	95 9f       	mul	r25, r21
    1208:	d1 f3       	breq	.-12     	; 0x11fe <__mulsf3+0x14>
    120a:	95 0f       	add	r25, r21
    120c:	50 e0       	ldi	r21, 0x00	; 0
    120e:	55 1f       	adc	r21, r21
    1210:	62 9f       	mul	r22, r18
    1212:	f0 01       	movw	r30, r0
    1214:	72 9f       	mul	r23, r18
    1216:	bb 27       	eor	r27, r27
    1218:	f0 0d       	add	r31, r0
    121a:	b1 1d       	adc	r27, r1
    121c:	63 9f       	mul	r22, r19
    121e:	aa 27       	eor	r26, r26
    1220:	f0 0d       	add	r31, r0
    1222:	b1 1d       	adc	r27, r1
    1224:	aa 1f       	adc	r26, r26
    1226:	64 9f       	mul	r22, r20
    1228:	66 27       	eor	r22, r22
    122a:	b0 0d       	add	r27, r0
    122c:	a1 1d       	adc	r26, r1
    122e:	66 1f       	adc	r22, r22
    1230:	82 9f       	mul	r24, r18
    1232:	22 27       	eor	r18, r18
    1234:	b0 0d       	add	r27, r0
    1236:	a1 1d       	adc	r26, r1
    1238:	62 1f       	adc	r22, r18
    123a:	73 9f       	mul	r23, r19
    123c:	b0 0d       	add	r27, r0
    123e:	a1 1d       	adc	r26, r1
    1240:	62 1f       	adc	r22, r18
    1242:	83 9f       	mul	r24, r19
    1244:	a0 0d       	add	r26, r0
    1246:	61 1d       	adc	r22, r1
    1248:	22 1f       	adc	r18, r18
    124a:	74 9f       	mul	r23, r20
    124c:	33 27       	eor	r19, r19
    124e:	a0 0d       	add	r26, r0
    1250:	61 1d       	adc	r22, r1
    1252:	23 1f       	adc	r18, r19
    1254:	84 9f       	mul	r24, r20
    1256:	60 0d       	add	r22, r0
    1258:	21 1d       	adc	r18, r1
    125a:	82 2f       	mov	r24, r18
    125c:	76 2f       	mov	r23, r22
    125e:	6a 2f       	mov	r22, r26
    1260:	11 24       	eor	r1, r1
    1262:	9f 57       	subi	r25, 0x7F	; 127
    1264:	50 40       	sbci	r21, 0x00	; 0
    1266:	8a f0       	brmi	.+34     	; 0x128a <__mulsf3_pse+0x84>
    1268:	e1 f0       	breq	.+56     	; 0x12a2 <__mulsf3_pse+0x9c>
    126a:	88 23       	and	r24, r24
    126c:	4a f0       	brmi	.+18     	; 0x1280 <__mulsf3_pse+0x7a>
    126e:	ee 0f       	add	r30, r30
    1270:	ff 1f       	adc	r31, r31
    1272:	bb 1f       	adc	r27, r27
    1274:	66 1f       	adc	r22, r22
    1276:	77 1f       	adc	r23, r23
    1278:	88 1f       	adc	r24, r24
    127a:	91 50       	subi	r25, 0x01	; 1
    127c:	50 40       	sbci	r21, 0x00	; 0
    127e:	a9 f7       	brne	.-22     	; 0x126a <__mulsf3_pse+0x64>
    1280:	9e 3f       	cpi	r25, 0xFE	; 254
    1282:	51 05       	cpc	r21, r1
    1284:	70 f0       	brcs	.+28     	; 0x12a2 <__mulsf3_pse+0x9c>
    1286:	60 cf       	rjmp	.-320    	; 0x1148 <__fp_inf>
    1288:	aa cf       	rjmp	.-172    	; 0x11de <__fp_szero>
    128a:	5f 3f       	cpi	r21, 0xFF	; 255
    128c:	ec f3       	brlt	.-6      	; 0x1288 <__mulsf3_pse+0x82>
    128e:	98 3e       	cpi	r25, 0xE8	; 232
    1290:	dc f3       	brlt	.-10     	; 0x1288 <__mulsf3_pse+0x82>
    1292:	86 95       	lsr	r24
    1294:	77 95       	ror	r23
    1296:	67 95       	ror	r22
    1298:	b7 95       	ror	r27
    129a:	f7 95       	ror	r31
    129c:	e7 95       	ror	r30
    129e:	9f 5f       	subi	r25, 0xFF	; 255
    12a0:	c1 f7       	brne	.-16     	; 0x1292 <__mulsf3_pse+0x8c>
    12a2:	fe 2b       	or	r31, r30
    12a4:	88 0f       	add	r24, r24
    12a6:	91 1d       	adc	r25, r1
    12a8:	96 95       	lsr	r25
    12aa:	87 95       	ror	r24
    12ac:	97 f9       	bld	r25, 7
    12ae:	08 95       	ret

000012b0 <vfprintf>:
    12b0:	2f 92       	push	r2
    12b2:	3f 92       	push	r3
    12b4:	4f 92       	push	r4
    12b6:	5f 92       	push	r5
    12b8:	6f 92       	push	r6
    12ba:	7f 92       	push	r7
    12bc:	8f 92       	push	r8
    12be:	9f 92       	push	r9
    12c0:	af 92       	push	r10
    12c2:	bf 92       	push	r11
    12c4:	cf 92       	push	r12
    12c6:	df 92       	push	r13
    12c8:	ef 92       	push	r14
    12ca:	ff 92       	push	r15
    12cc:	0f 93       	push	r16
    12ce:	1f 93       	push	r17
    12d0:	cf 93       	push	r28
    12d2:	df 93       	push	r29
    12d4:	cd b7       	in	r28, 0x3d	; 61
    12d6:	de b7       	in	r29, 0x3e	; 62
    12d8:	63 97       	sbiw	r28, 0x13	; 19
    12da:	cd bf       	out	0x3d, r28	; 61
    12dc:	de bf       	out	0x3e, r29	; 62
    12de:	7c 01       	movw	r14, r24
    12e0:	1b 01       	movw	r2, r22
    12e2:	6a 01       	movw	r12, r20
    12e4:	fc 01       	movw	r30, r24
    12e6:	16 82       	std	Z+6, r1	; 0x06
    12e8:	17 82       	std	Z+7, r1	; 0x07
    12ea:	83 81       	ldd	r24, Z+3	; 0x03
    12ec:	81 ff       	sbrs	r24, 1
    12ee:	49 c3       	rjmp	.+1682   	; 0x1982 <vfprintf+0x6d2>
    12f0:	be 01       	movw	r22, r28
    12f2:	6f 5f       	subi	r22, 0xFF	; 255
    12f4:	7f 4f       	sbci	r23, 0xFF	; 255
    12f6:	4b 01       	movw	r8, r22
    12f8:	f7 01       	movw	r30, r14
    12fa:	93 81       	ldd	r25, Z+3	; 0x03
    12fc:	f1 01       	movw	r30, r2
    12fe:	93 fd       	sbrc	r25, 3
    1300:	85 91       	lpm	r24, Z+
    1302:	93 ff       	sbrs	r25, 3
    1304:	81 91       	ld	r24, Z+
    1306:	1f 01       	movw	r2, r30
    1308:	88 23       	and	r24, r24
    130a:	09 f4       	brne	.+2      	; 0x130e <vfprintf+0x5e>
    130c:	36 c3       	rjmp	.+1644   	; 0x197a <vfprintf+0x6ca>
    130e:	85 32       	cpi	r24, 0x25	; 37
    1310:	39 f4       	brne	.+14     	; 0x1320 <vfprintf+0x70>
    1312:	93 fd       	sbrc	r25, 3
    1314:	85 91       	lpm	r24, Z+
    1316:	93 ff       	sbrs	r25, 3
    1318:	81 91       	ld	r24, Z+
    131a:	1f 01       	movw	r2, r30
    131c:	85 32       	cpi	r24, 0x25	; 37
    131e:	31 f4       	brne	.+12     	; 0x132c <vfprintf+0x7c>
    1320:	b7 01       	movw	r22, r14
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	a0 d4       	rcall	.+2368   	; 0x1c66 <fputc>
    1326:	56 01       	movw	r10, r12
    1328:	65 01       	movw	r12, r10
    132a:	e6 cf       	rjmp	.-52     	; 0x12f8 <vfprintf+0x48>
    132c:	10 e0       	ldi	r17, 0x00	; 0
    132e:	51 2c       	mov	r5, r1
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	20 32       	cpi	r18, 0x20	; 32
    1334:	a0 f4       	brcc	.+40     	; 0x135e <vfprintf+0xae>
    1336:	8b 32       	cpi	r24, 0x2B	; 43
    1338:	69 f0       	breq	.+26     	; 0x1354 <vfprintf+0xa4>
    133a:	30 f4       	brcc	.+12     	; 0x1348 <vfprintf+0x98>
    133c:	80 32       	cpi	r24, 0x20	; 32
    133e:	59 f0       	breq	.+22     	; 0x1356 <vfprintf+0xa6>
    1340:	83 32       	cpi	r24, 0x23	; 35
    1342:	69 f4       	brne	.+26     	; 0x135e <vfprintf+0xae>
    1344:	20 61       	ori	r18, 0x10	; 16
    1346:	2c c0       	rjmp	.+88     	; 0x13a0 <vfprintf+0xf0>
    1348:	8d 32       	cpi	r24, 0x2D	; 45
    134a:	39 f0       	breq	.+14     	; 0x135a <vfprintf+0xaa>
    134c:	80 33       	cpi	r24, 0x30	; 48
    134e:	39 f4       	brne	.+14     	; 0x135e <vfprintf+0xae>
    1350:	21 60       	ori	r18, 0x01	; 1
    1352:	26 c0       	rjmp	.+76     	; 0x13a0 <vfprintf+0xf0>
    1354:	22 60       	ori	r18, 0x02	; 2
    1356:	24 60       	ori	r18, 0x04	; 4
    1358:	23 c0       	rjmp	.+70     	; 0x13a0 <vfprintf+0xf0>
    135a:	28 60       	ori	r18, 0x08	; 8
    135c:	21 c0       	rjmp	.+66     	; 0x13a0 <vfprintf+0xf0>
    135e:	27 fd       	sbrc	r18, 7
    1360:	27 c0       	rjmp	.+78     	; 0x13b0 <vfprintf+0x100>
    1362:	30 ed       	ldi	r19, 0xD0	; 208
    1364:	38 0f       	add	r19, r24
    1366:	3a 30       	cpi	r19, 0x0A	; 10
    1368:	78 f4       	brcc	.+30     	; 0x1388 <vfprintf+0xd8>
    136a:	26 ff       	sbrs	r18, 6
    136c:	06 c0       	rjmp	.+12     	; 0x137a <vfprintf+0xca>
    136e:	fa e0       	ldi	r31, 0x0A	; 10
    1370:	1f 9f       	mul	r17, r31
    1372:	30 0d       	add	r19, r0
    1374:	11 24       	eor	r1, r1
    1376:	13 2f       	mov	r17, r19
    1378:	13 c0       	rjmp	.+38     	; 0x13a0 <vfprintf+0xf0>
    137a:	6a e0       	ldi	r22, 0x0A	; 10
    137c:	56 9e       	mul	r5, r22
    137e:	30 0d       	add	r19, r0
    1380:	11 24       	eor	r1, r1
    1382:	53 2e       	mov	r5, r19
    1384:	20 62       	ori	r18, 0x20	; 32
    1386:	0c c0       	rjmp	.+24     	; 0x13a0 <vfprintf+0xf0>
    1388:	8e 32       	cpi	r24, 0x2E	; 46
    138a:	21 f4       	brne	.+8      	; 0x1394 <vfprintf+0xe4>
    138c:	26 fd       	sbrc	r18, 6
    138e:	f5 c2       	rjmp	.+1514   	; 0x197a <vfprintf+0x6ca>
    1390:	20 64       	ori	r18, 0x40	; 64
    1392:	06 c0       	rjmp	.+12     	; 0x13a0 <vfprintf+0xf0>
    1394:	8c 36       	cpi	r24, 0x6C	; 108
    1396:	11 f4       	brne	.+4      	; 0x139c <vfprintf+0xec>
    1398:	20 68       	ori	r18, 0x80	; 128
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <vfprintf+0xf0>
    139c:	88 36       	cpi	r24, 0x68	; 104
    139e:	41 f4       	brne	.+16     	; 0x13b0 <vfprintf+0x100>
    13a0:	f1 01       	movw	r30, r2
    13a2:	93 fd       	sbrc	r25, 3
    13a4:	85 91       	lpm	r24, Z+
    13a6:	93 ff       	sbrs	r25, 3
    13a8:	81 91       	ld	r24, Z+
    13aa:	1f 01       	movw	r2, r30
    13ac:	81 11       	cpse	r24, r1
    13ae:	c1 cf       	rjmp	.-126    	; 0x1332 <vfprintf+0x82>
    13b0:	9b eb       	ldi	r25, 0xBB	; 187
    13b2:	98 0f       	add	r25, r24
    13b4:	93 30       	cpi	r25, 0x03	; 3
    13b6:	18 f4       	brcc	.+6      	; 0x13be <vfprintf+0x10e>
    13b8:	20 61       	ori	r18, 0x10	; 16
    13ba:	80 5e       	subi	r24, 0xE0	; 224
    13bc:	06 c0       	rjmp	.+12     	; 0x13ca <vfprintf+0x11a>
    13be:	9b e9       	ldi	r25, 0x9B	; 155
    13c0:	98 0f       	add	r25, r24
    13c2:	93 30       	cpi	r25, 0x03	; 3
    13c4:	08 f0       	brcs	.+2      	; 0x13c8 <vfprintf+0x118>
    13c6:	9a c1       	rjmp	.+820    	; 0x16fc <vfprintf+0x44c>
    13c8:	2f 7e       	andi	r18, 0xEF	; 239
    13ca:	26 ff       	sbrs	r18, 6
    13cc:	16 e0       	ldi	r17, 0x06	; 6
    13ce:	2f 73       	andi	r18, 0x3F	; 63
    13d0:	72 2e       	mov	r7, r18
    13d2:	85 36       	cpi	r24, 0x65	; 101
    13d4:	21 f4       	brne	.+8      	; 0x13de <vfprintf+0x12e>
    13d6:	f2 2f       	mov	r31, r18
    13d8:	f0 64       	ori	r31, 0x40	; 64
    13da:	7f 2e       	mov	r7, r31
    13dc:	08 c0       	rjmp	.+16     	; 0x13ee <vfprintf+0x13e>
    13de:	86 36       	cpi	r24, 0x66	; 102
    13e0:	21 f4       	brne	.+8      	; 0x13ea <vfprintf+0x13a>
    13e2:	62 2f       	mov	r22, r18
    13e4:	60 68       	ori	r22, 0x80	; 128
    13e6:	76 2e       	mov	r7, r22
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <vfprintf+0x13e>
    13ea:	11 11       	cpse	r17, r1
    13ec:	11 50       	subi	r17, 0x01	; 1
    13ee:	77 fe       	sbrs	r7, 7
    13f0:	07 c0       	rjmp	.+14     	; 0x1400 <vfprintf+0x150>
    13f2:	1c 33       	cpi	r17, 0x3C	; 60
    13f4:	48 f4       	brcc	.+18     	; 0x1408 <vfprintf+0x158>
    13f6:	44 24       	eor	r4, r4
    13f8:	43 94       	inc	r4
    13fa:	41 0e       	add	r4, r17
    13fc:	27 e0       	ldi	r18, 0x07	; 7
    13fe:	0b c0       	rjmp	.+22     	; 0x1416 <vfprintf+0x166>
    1400:	18 30       	cpi	r17, 0x08	; 8
    1402:	30 f4       	brcc	.+12     	; 0x1410 <vfprintf+0x160>
    1404:	21 2f       	mov	r18, r17
    1406:	06 c0       	rjmp	.+12     	; 0x1414 <vfprintf+0x164>
    1408:	27 e0       	ldi	r18, 0x07	; 7
    140a:	4c e3       	ldi	r20, 0x3C	; 60
    140c:	44 2e       	mov	r4, r20
    140e:	03 c0       	rjmp	.+6      	; 0x1416 <vfprintf+0x166>
    1410:	27 e0       	ldi	r18, 0x07	; 7
    1412:	17 e0       	ldi	r17, 0x07	; 7
    1414:	41 2c       	mov	r4, r1
    1416:	56 01       	movw	r10, r12
    1418:	74 e0       	ldi	r23, 0x04	; 4
    141a:	a7 0e       	add	r10, r23
    141c:	b1 1c       	adc	r11, r1
    141e:	f6 01       	movw	r30, r12
    1420:	60 81       	ld	r22, Z
    1422:	71 81       	ldd	r23, Z+1	; 0x01
    1424:	82 81       	ldd	r24, Z+2	; 0x02
    1426:	93 81       	ldd	r25, Z+3	; 0x03
    1428:	04 2d       	mov	r16, r4
    142a:	a4 01       	movw	r20, r8
    142c:	e4 d2       	rcall	.+1480   	; 0x19f6 <__ftoa_engine>
    142e:	6c 01       	movw	r12, r24
    1430:	09 81       	ldd	r16, Y+1	; 0x01
    1432:	00 ff       	sbrs	r16, 0
    1434:	02 c0       	rjmp	.+4      	; 0x143a <vfprintf+0x18a>
    1436:	03 ff       	sbrs	r16, 3
    1438:	06 c0       	rjmp	.+12     	; 0x1446 <vfprintf+0x196>
    143a:	71 fc       	sbrc	r7, 1
    143c:	07 c0       	rjmp	.+14     	; 0x144c <vfprintf+0x19c>
    143e:	72 fc       	sbrc	r7, 2
    1440:	08 c0       	rjmp	.+16     	; 0x1452 <vfprintf+0x1a2>
    1442:	61 2c       	mov	r6, r1
    1444:	08 c0       	rjmp	.+16     	; 0x1456 <vfprintf+0x1a6>
    1446:	3d e2       	ldi	r19, 0x2D	; 45
    1448:	63 2e       	mov	r6, r19
    144a:	05 c0       	rjmp	.+10     	; 0x1456 <vfprintf+0x1a6>
    144c:	2b e2       	ldi	r18, 0x2B	; 43
    144e:	62 2e       	mov	r6, r18
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <vfprintf+0x1a6>
    1452:	90 e2       	ldi	r25, 0x20	; 32
    1454:	69 2e       	mov	r6, r25
    1456:	80 2f       	mov	r24, r16
    1458:	8c 70       	andi	r24, 0x0C	; 12
    145a:	81 f1       	breq	.+96     	; 0x14bc <vfprintf+0x20c>
    145c:	66 20       	and	r6, r6
    145e:	11 f0       	breq	.+4      	; 0x1464 <vfprintf+0x1b4>
    1460:	84 e0       	ldi	r24, 0x04	; 4
    1462:	01 c0       	rjmp	.+2      	; 0x1466 <vfprintf+0x1b6>
    1464:	83 e0       	ldi	r24, 0x03	; 3
    1466:	85 15       	cp	r24, r5
    1468:	10 f0       	brcs	.+4      	; 0x146e <vfprintf+0x1be>
    146a:	51 2c       	mov	r5, r1
    146c:	0a c0       	rjmp	.+20     	; 0x1482 <vfprintf+0x1d2>
    146e:	58 1a       	sub	r5, r24
    1470:	73 fc       	sbrc	r7, 3
    1472:	07 c0       	rjmp	.+14     	; 0x1482 <vfprintf+0x1d2>
    1474:	b7 01       	movw	r22, r14
    1476:	80 e2       	ldi	r24, 0x20	; 32
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	f5 d3       	rcall	.+2026   	; 0x1c66 <fputc>
    147c:	5a 94       	dec	r5
    147e:	d1 f7       	brne	.-12     	; 0x1474 <vfprintf+0x1c4>
    1480:	f4 cf       	rjmp	.-24     	; 0x146a <vfprintf+0x1ba>
    1482:	66 20       	and	r6, r6
    1484:	21 f0       	breq	.+8      	; 0x148e <vfprintf+0x1de>
    1486:	b7 01       	movw	r22, r14
    1488:	86 2d       	mov	r24, r6
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	ec d3       	rcall	.+2008   	; 0x1c66 <fputc>
    148e:	03 fd       	sbrc	r16, 3
    1490:	03 c0       	rjmp	.+6      	; 0x1498 <vfprintf+0x1e8>
    1492:	00 e0       	ldi	r16, 0x00	; 0
    1494:	12 e0       	ldi	r17, 0x02	; 2
    1496:	02 c0       	rjmp	.+4      	; 0x149c <vfprintf+0x1ec>
    1498:	0c ef       	ldi	r16, 0xFC	; 252
    149a:	11 e0       	ldi	r17, 0x01	; 1
    149c:	f7 2d       	mov	r31, r7
    149e:	f0 71       	andi	r31, 0x10	; 16
    14a0:	7f 2e       	mov	r7, r31
    14a2:	f8 01       	movw	r30, r16
    14a4:	84 91       	lpm	r24, Z
    14a6:	88 23       	and	r24, r24
    14a8:	09 f4       	brne	.+2      	; 0x14ac <vfprintf+0x1fc>
    14aa:	5e c2       	rjmp	.+1212   	; 0x1968 <vfprintf+0x6b8>
    14ac:	71 10       	cpse	r7, r1
    14ae:	80 52       	subi	r24, 0x20	; 32
    14b0:	b7 01       	movw	r22, r14
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	d8 d3       	rcall	.+1968   	; 0x1c66 <fputc>
    14b6:	0f 5f       	subi	r16, 0xFF	; 255
    14b8:	1f 4f       	sbci	r17, 0xFF	; 255
    14ba:	f3 cf       	rjmp	.-26     	; 0x14a2 <vfprintf+0x1f2>
    14bc:	77 fe       	sbrs	r7, 7
    14be:	0f c0       	rjmp	.+30     	; 0x14de <vfprintf+0x22e>
    14c0:	4c 0c       	add	r4, r12
    14c2:	04 ff       	sbrs	r16, 4
    14c4:	04 c0       	rjmp	.+8      	; 0x14ce <vfprintf+0x21e>
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	81 33       	cpi	r24, 0x31	; 49
    14ca:	09 f4       	brne	.+2      	; 0x14ce <vfprintf+0x21e>
    14cc:	4a 94       	dec	r4
    14ce:	14 14       	cp	r1, r4
    14d0:	74 f5       	brge	.+92     	; 0x152e <vfprintf+0x27e>
    14d2:	f8 e0       	ldi	r31, 0x08	; 8
    14d4:	f4 15       	cp	r31, r4
    14d6:	78 f5       	brcc	.+94     	; 0x1536 <vfprintf+0x286>
    14d8:	88 e0       	ldi	r24, 0x08	; 8
    14da:	48 2e       	mov	r4, r24
    14dc:	2c c0       	rjmp	.+88     	; 0x1536 <vfprintf+0x286>
    14de:	76 fc       	sbrc	r7, 6
    14e0:	2a c0       	rjmp	.+84     	; 0x1536 <vfprintf+0x286>
    14e2:	81 2f       	mov	r24, r17
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	8c 15       	cp	r24, r12
    14e8:	9d 05       	cpc	r25, r13
    14ea:	9c f0       	brlt	.+38     	; 0x1512 <vfprintf+0x262>
    14ec:	6c ef       	ldi	r22, 0xFC	; 252
    14ee:	c6 16       	cp	r12, r22
    14f0:	6f ef       	ldi	r22, 0xFF	; 255
    14f2:	d6 06       	cpc	r13, r22
    14f4:	74 f0       	brlt	.+28     	; 0x1512 <vfprintf+0x262>
    14f6:	77 2d       	mov	r23, r7
    14f8:	70 68       	ori	r23, 0x80	; 128
    14fa:	77 2e       	mov	r7, r23
    14fc:	0a c0       	rjmp	.+20     	; 0x1512 <vfprintf+0x262>
    14fe:	e2 e0       	ldi	r30, 0x02	; 2
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	ec 0f       	add	r30, r28
    1504:	fd 1f       	adc	r31, r29
    1506:	e1 0f       	add	r30, r17
    1508:	f1 1d       	adc	r31, r1
    150a:	80 81       	ld	r24, Z
    150c:	80 33       	cpi	r24, 0x30	; 48
    150e:	19 f4       	brne	.+6      	; 0x1516 <vfprintf+0x266>
    1510:	11 50       	subi	r17, 0x01	; 1
    1512:	11 11       	cpse	r17, r1
    1514:	f4 cf       	rjmp	.-24     	; 0x14fe <vfprintf+0x24e>
    1516:	77 fe       	sbrs	r7, 7
    1518:	0e c0       	rjmp	.+28     	; 0x1536 <vfprintf+0x286>
    151a:	44 24       	eor	r4, r4
    151c:	43 94       	inc	r4
    151e:	41 0e       	add	r4, r17
    1520:	81 2f       	mov	r24, r17
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	c8 16       	cp	r12, r24
    1526:	d9 06       	cpc	r13, r25
    1528:	2c f4       	brge	.+10     	; 0x1534 <vfprintf+0x284>
    152a:	1c 19       	sub	r17, r12
    152c:	04 c0       	rjmp	.+8      	; 0x1536 <vfprintf+0x286>
    152e:	44 24       	eor	r4, r4
    1530:	43 94       	inc	r4
    1532:	01 c0       	rjmp	.+2      	; 0x1536 <vfprintf+0x286>
    1534:	10 e0       	ldi	r17, 0x00	; 0
    1536:	77 fe       	sbrs	r7, 7
    1538:	07 c0       	rjmp	.+14     	; 0x1548 <vfprintf+0x298>
    153a:	1c 14       	cp	r1, r12
    153c:	1d 04       	cpc	r1, r13
    153e:	3c f4       	brge	.+14     	; 0x154e <vfprintf+0x29e>
    1540:	96 01       	movw	r18, r12
    1542:	2f 5f       	subi	r18, 0xFF	; 255
    1544:	3f 4f       	sbci	r19, 0xFF	; 255
    1546:	05 c0       	rjmp	.+10     	; 0x1552 <vfprintf+0x2a2>
    1548:	25 e0       	ldi	r18, 0x05	; 5
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <vfprintf+0x2a2>
    154e:	21 e0       	ldi	r18, 0x01	; 1
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	66 20       	and	r6, r6
    1554:	11 f0       	breq	.+4      	; 0x155a <vfprintf+0x2aa>
    1556:	2f 5f       	subi	r18, 0xFF	; 255
    1558:	3f 4f       	sbci	r19, 0xFF	; 255
    155a:	11 23       	and	r17, r17
    155c:	31 f0       	breq	.+12     	; 0x156a <vfprintf+0x2ba>
    155e:	41 2f       	mov	r20, r17
    1560:	50 e0       	ldi	r21, 0x00	; 0
    1562:	4f 5f       	subi	r20, 0xFF	; 255
    1564:	5f 4f       	sbci	r21, 0xFF	; 255
    1566:	24 0f       	add	r18, r20
    1568:	35 1f       	adc	r19, r21
    156a:	45 2d       	mov	r20, r5
    156c:	50 e0       	ldi	r21, 0x00	; 0
    156e:	24 17       	cp	r18, r20
    1570:	35 07       	cpc	r19, r21
    1572:	14 f4       	brge	.+4      	; 0x1578 <vfprintf+0x2c8>
    1574:	52 1a       	sub	r5, r18
    1576:	01 c0       	rjmp	.+2      	; 0x157a <vfprintf+0x2ca>
    1578:	51 2c       	mov	r5, r1
    157a:	87 2d       	mov	r24, r7
    157c:	89 70       	andi	r24, 0x09	; 9
    157e:	41 f4       	brne	.+16     	; 0x1590 <vfprintf+0x2e0>
    1580:	55 20       	and	r5, r5
    1582:	31 f0       	breq	.+12     	; 0x1590 <vfprintf+0x2e0>
    1584:	b7 01       	movw	r22, r14
    1586:	80 e2       	ldi	r24, 0x20	; 32
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	6d d3       	rcall	.+1754   	; 0x1c66 <fputc>
    158c:	5a 94       	dec	r5
    158e:	f8 cf       	rjmp	.-16     	; 0x1580 <vfprintf+0x2d0>
    1590:	66 20       	and	r6, r6
    1592:	21 f0       	breq	.+8      	; 0x159c <vfprintf+0x2ec>
    1594:	b7 01       	movw	r22, r14
    1596:	86 2d       	mov	r24, r6
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	65 d3       	rcall	.+1738   	; 0x1c66 <fputc>
    159c:	73 fc       	sbrc	r7, 3
    159e:	08 c0       	rjmp	.+16     	; 0x15b0 <vfprintf+0x300>
    15a0:	55 20       	and	r5, r5
    15a2:	31 f0       	breq	.+12     	; 0x15b0 <vfprintf+0x300>
    15a4:	b7 01       	movw	r22, r14
    15a6:	80 e3       	ldi	r24, 0x30	; 48
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	5d d3       	rcall	.+1722   	; 0x1c66 <fputc>
    15ac:	5a 94       	dec	r5
    15ae:	f8 cf       	rjmp	.-16     	; 0x15a0 <vfprintf+0x2f0>
    15b0:	77 fe       	sbrs	r7, 7
    15b2:	5d c0       	rjmp	.+186    	; 0x166e <vfprintf+0x3be>
    15b4:	9c 2d       	mov	r25, r12
    15b6:	8d 2d       	mov	r24, r13
    15b8:	d7 fe       	sbrs	r13, 7
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <vfprintf+0x310>
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	69 2e       	mov	r6, r25
    15c2:	78 2e       	mov	r7, r24
    15c4:	40 e0       	ldi	r20, 0x00	; 0
    15c6:	50 e0       	ldi	r21, 0x00	; 0
    15c8:	c6 01       	movw	r24, r12
    15ca:	84 19       	sub	r24, r4
    15cc:	91 09       	sbc	r25, r1
    15ce:	8c 87       	std	Y+12, r24	; 0x0c
    15d0:	9d 87       	std	Y+13, r25	; 0x0d
    15d2:	96 01       	movw	r18, r12
    15d4:	26 19       	sub	r18, r6
    15d6:	37 09       	sbc	r19, r7
    15d8:	28 0d       	add	r18, r8
    15da:	39 1d       	adc	r19, r9
    15dc:	81 2f       	mov	r24, r17
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	ee 27       	eor	r30, r30
    15e2:	ff 27       	eor	r31, r31
    15e4:	e8 1b       	sub	r30, r24
    15e6:	f9 0b       	sbc	r31, r25
    15e8:	ee 87       	std	Y+14, r30	; 0x0e
    15ea:	ff 87       	std	Y+15, r31	; 0x0f
    15ec:	ff ef       	ldi	r31, 0xFF	; 255
    15ee:	6f 16       	cp	r6, r31
    15f0:	7f 06       	cpc	r7, r31
    15f2:	61 f4       	brne	.+24     	; 0x160c <vfprintf+0x35c>
    15f4:	b7 01       	movw	r22, r14
    15f6:	8e e2       	ldi	r24, 0x2E	; 46
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	2b 8b       	std	Y+19, r18	; 0x13
    15fc:	3a 8b       	std	Y+18, r19	; 0x12
    15fe:	48 8b       	std	Y+16, r20	; 0x10
    1600:	59 8b       	std	Y+17, r21	; 0x11
    1602:	31 d3       	rcall	.+1634   	; 0x1c66 <fputc>
    1604:	59 89       	ldd	r21, Y+17	; 0x11
    1606:	48 89       	ldd	r20, Y+16	; 0x10
    1608:	3a 89       	ldd	r19, Y+18	; 0x12
    160a:	2b 89       	ldd	r18, Y+19	; 0x13
    160c:	c6 14       	cp	r12, r6
    160e:	d7 04       	cpc	r13, r7
    1610:	54 f0       	brlt	.+20     	; 0x1626 <vfprintf+0x376>
    1612:	6c 85       	ldd	r22, Y+12	; 0x0c
    1614:	7d 85       	ldd	r23, Y+13	; 0x0d
    1616:	66 15       	cp	r22, r6
    1618:	77 05       	cpc	r23, r7
    161a:	2c f4       	brge	.+10     	; 0x1626 <vfprintf+0x376>
    161c:	f9 01       	movw	r30, r18
    161e:	e4 0f       	add	r30, r20
    1620:	f5 1f       	adc	r31, r21
    1622:	81 81       	ldd	r24, Z+1	; 0x01
    1624:	01 c0       	rjmp	.+2      	; 0x1628 <vfprintf+0x378>
    1626:	80 e3       	ldi	r24, 0x30	; 48
    1628:	71 e0       	ldi	r23, 0x01	; 1
    162a:	67 1a       	sub	r6, r23
    162c:	71 08       	sbc	r7, r1
    162e:	4f 5f       	subi	r20, 0xFF	; 255
    1630:	5f 4f       	sbci	r21, 0xFF	; 255
    1632:	ee 85       	ldd	r30, Y+14	; 0x0e
    1634:	ff 85       	ldd	r31, Y+15	; 0x0f
    1636:	6e 16       	cp	r6, r30
    1638:	7f 06       	cpc	r7, r31
    163a:	64 f0       	brlt	.+24     	; 0x1654 <vfprintf+0x3a4>
    163c:	b7 01       	movw	r22, r14
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	2b 8b       	std	Y+19, r18	; 0x13
    1642:	3a 8b       	std	Y+18, r19	; 0x12
    1644:	48 8b       	std	Y+16, r20	; 0x10
    1646:	59 8b       	std	Y+17, r21	; 0x11
    1648:	0e d3       	rcall	.+1564   	; 0x1c66 <fputc>
    164a:	2b 89       	ldd	r18, Y+19	; 0x13
    164c:	3a 89       	ldd	r19, Y+18	; 0x12
    164e:	48 89       	ldd	r20, Y+16	; 0x10
    1650:	59 89       	ldd	r21, Y+17	; 0x11
    1652:	cc cf       	rjmp	.-104    	; 0x15ec <vfprintf+0x33c>
    1654:	6c 14       	cp	r6, r12
    1656:	7d 04       	cpc	r7, r13
    1658:	39 f4       	brne	.+14     	; 0x1668 <vfprintf+0x3b8>
    165a:	9a 81       	ldd	r25, Y+2	; 0x02
    165c:	96 33       	cpi	r25, 0x36	; 54
    165e:	18 f4       	brcc	.+6      	; 0x1666 <vfprintf+0x3b6>
    1660:	95 33       	cpi	r25, 0x35	; 53
    1662:	11 f4       	brne	.+4      	; 0x1668 <vfprintf+0x3b8>
    1664:	04 ff       	sbrs	r16, 4
    1666:	81 e3       	ldi	r24, 0x31	; 49
    1668:	b7 01       	movw	r22, r14
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	45 c0       	rjmp	.+138    	; 0x16f8 <vfprintf+0x448>
    166e:	8a 81       	ldd	r24, Y+2	; 0x02
    1670:	81 33       	cpi	r24, 0x31	; 49
    1672:	09 f0       	breq	.+2      	; 0x1676 <vfprintf+0x3c6>
    1674:	0f 7e       	andi	r16, 0xEF	; 239
    1676:	b7 01       	movw	r22, r14
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	f5 d2       	rcall	.+1514   	; 0x1c66 <fputc>
    167c:	11 11       	cpse	r17, r1
    167e:	05 c0       	rjmp	.+10     	; 0x168a <vfprintf+0x3da>
    1680:	74 fe       	sbrs	r7, 4
    1682:	16 c0       	rjmp	.+44     	; 0x16b0 <vfprintf+0x400>
    1684:	85 e4       	ldi	r24, 0x45	; 69
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	15 c0       	rjmp	.+42     	; 0x16b4 <vfprintf+0x404>
    168a:	b7 01       	movw	r22, r14
    168c:	8e e2       	ldi	r24, 0x2E	; 46
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	ea d2       	rcall	.+1492   	; 0x1c66 <fputc>
    1692:	82 e0       	ldi	r24, 0x02	; 2
    1694:	66 24       	eor	r6, r6
    1696:	63 94       	inc	r6
    1698:	68 0e       	add	r6, r24
    169a:	f4 01       	movw	r30, r8
    169c:	e8 0f       	add	r30, r24
    169e:	f1 1d       	adc	r31, r1
    16a0:	80 81       	ld	r24, Z
    16a2:	b7 01       	movw	r22, r14
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	df d2       	rcall	.+1470   	; 0x1c66 <fputc>
    16a8:	11 50       	subi	r17, 0x01	; 1
    16aa:	51 f3       	breq	.-44     	; 0x1680 <vfprintf+0x3d0>
    16ac:	86 2d       	mov	r24, r6
    16ae:	f2 cf       	rjmp	.-28     	; 0x1694 <vfprintf+0x3e4>
    16b0:	85 e6       	ldi	r24, 0x65	; 101
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	b7 01       	movw	r22, r14
    16b6:	d7 d2       	rcall	.+1454   	; 0x1c66 <fputc>
    16b8:	d7 fc       	sbrc	r13, 7
    16ba:	05 c0       	rjmp	.+10     	; 0x16c6 <vfprintf+0x416>
    16bc:	c1 14       	cp	r12, r1
    16be:	d1 04       	cpc	r13, r1
    16c0:	39 f4       	brne	.+14     	; 0x16d0 <vfprintf+0x420>
    16c2:	04 ff       	sbrs	r16, 4
    16c4:	05 c0       	rjmp	.+10     	; 0x16d0 <vfprintf+0x420>
    16c6:	d1 94       	neg	r13
    16c8:	c1 94       	neg	r12
    16ca:	d1 08       	sbc	r13, r1
    16cc:	8d e2       	ldi	r24, 0x2D	; 45
    16ce:	01 c0       	rjmp	.+2      	; 0x16d2 <vfprintf+0x422>
    16d0:	8b e2       	ldi	r24, 0x2B	; 43
    16d2:	b7 01       	movw	r22, r14
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	c7 d2       	rcall	.+1422   	; 0x1c66 <fputc>
    16d8:	80 e3       	ldi	r24, 0x30	; 48
    16da:	6a e0       	ldi	r22, 0x0A	; 10
    16dc:	c6 16       	cp	r12, r22
    16de:	d1 04       	cpc	r13, r1
    16e0:	2c f0       	brlt	.+10     	; 0x16ec <vfprintf+0x43c>
    16e2:	8f 5f       	subi	r24, 0xFF	; 255
    16e4:	fa e0       	ldi	r31, 0x0A	; 10
    16e6:	cf 1a       	sub	r12, r31
    16e8:	d1 08       	sbc	r13, r1
    16ea:	f7 cf       	rjmp	.-18     	; 0x16da <vfprintf+0x42a>
    16ec:	b7 01       	movw	r22, r14
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	ba d2       	rcall	.+1396   	; 0x1c66 <fputc>
    16f2:	b7 01       	movw	r22, r14
    16f4:	c6 01       	movw	r24, r12
    16f6:	c0 96       	adiw	r24, 0x30	; 48
    16f8:	b6 d2       	rcall	.+1388   	; 0x1c66 <fputc>
    16fa:	36 c1       	rjmp	.+620    	; 0x1968 <vfprintf+0x6b8>
    16fc:	83 36       	cpi	r24, 0x63	; 99
    16fe:	31 f0       	breq	.+12     	; 0x170c <vfprintf+0x45c>
    1700:	83 37       	cpi	r24, 0x73	; 115
    1702:	79 f0       	breq	.+30     	; 0x1722 <vfprintf+0x472>
    1704:	83 35       	cpi	r24, 0x53	; 83
    1706:	09 f0       	breq	.+2      	; 0x170a <vfprintf+0x45a>
    1708:	54 c0       	rjmp	.+168    	; 0x17b2 <vfprintf+0x502>
    170a:	20 c0       	rjmp	.+64     	; 0x174c <vfprintf+0x49c>
    170c:	56 01       	movw	r10, r12
    170e:	72 e0       	ldi	r23, 0x02	; 2
    1710:	a7 0e       	add	r10, r23
    1712:	b1 1c       	adc	r11, r1
    1714:	f6 01       	movw	r30, r12
    1716:	80 81       	ld	r24, Z
    1718:	89 83       	std	Y+1, r24	; 0x01
    171a:	01 e0       	ldi	r16, 0x01	; 1
    171c:	10 e0       	ldi	r17, 0x00	; 0
    171e:	64 01       	movw	r12, r8
    1720:	13 c0       	rjmp	.+38     	; 0x1748 <vfprintf+0x498>
    1722:	56 01       	movw	r10, r12
    1724:	f2 e0       	ldi	r31, 0x02	; 2
    1726:	af 0e       	add	r10, r31
    1728:	b1 1c       	adc	r11, r1
    172a:	f6 01       	movw	r30, r12
    172c:	c0 80       	ld	r12, Z
    172e:	d1 80       	ldd	r13, Z+1	; 0x01
    1730:	26 ff       	sbrs	r18, 6
    1732:	03 c0       	rjmp	.+6      	; 0x173a <vfprintf+0x48a>
    1734:	61 2f       	mov	r22, r17
    1736:	70 e0       	ldi	r23, 0x00	; 0
    1738:	02 c0       	rjmp	.+4      	; 0x173e <vfprintf+0x48e>
    173a:	6f ef       	ldi	r22, 0xFF	; 255
    173c:	7f ef       	ldi	r23, 0xFF	; 255
    173e:	c6 01       	movw	r24, r12
    1740:	2b 8b       	std	Y+19, r18	; 0x13
    1742:	3c d2       	rcall	.+1144   	; 0x1bbc <strnlen>
    1744:	8c 01       	movw	r16, r24
    1746:	2b 89       	ldd	r18, Y+19	; 0x13
    1748:	2f 77       	andi	r18, 0x7F	; 127
    174a:	14 c0       	rjmp	.+40     	; 0x1774 <vfprintf+0x4c4>
    174c:	56 01       	movw	r10, r12
    174e:	f2 e0       	ldi	r31, 0x02	; 2
    1750:	af 0e       	add	r10, r31
    1752:	b1 1c       	adc	r11, r1
    1754:	f6 01       	movw	r30, r12
    1756:	c0 80       	ld	r12, Z
    1758:	d1 80       	ldd	r13, Z+1	; 0x01
    175a:	26 ff       	sbrs	r18, 6
    175c:	03 c0       	rjmp	.+6      	; 0x1764 <vfprintf+0x4b4>
    175e:	61 2f       	mov	r22, r17
    1760:	70 e0       	ldi	r23, 0x00	; 0
    1762:	02 c0       	rjmp	.+4      	; 0x1768 <vfprintf+0x4b8>
    1764:	6f ef       	ldi	r22, 0xFF	; 255
    1766:	7f ef       	ldi	r23, 0xFF	; 255
    1768:	c6 01       	movw	r24, r12
    176a:	2b 8b       	std	Y+19, r18	; 0x13
    176c:	1c d2       	rcall	.+1080   	; 0x1ba6 <strnlen_P>
    176e:	8c 01       	movw	r16, r24
    1770:	2b 89       	ldd	r18, Y+19	; 0x13
    1772:	20 68       	ori	r18, 0x80	; 128
    1774:	72 2e       	mov	r7, r18
    1776:	23 fd       	sbrc	r18, 3
    1778:	18 c0       	rjmp	.+48     	; 0x17aa <vfprintf+0x4fa>
    177a:	85 2d       	mov	r24, r5
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	08 17       	cp	r16, r24
    1780:	19 07       	cpc	r17, r25
    1782:	98 f4       	brcc	.+38     	; 0x17aa <vfprintf+0x4fa>
    1784:	b7 01       	movw	r22, r14
    1786:	80 e2       	ldi	r24, 0x20	; 32
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	6d d2       	rcall	.+1242   	; 0x1c66 <fputc>
    178c:	5a 94       	dec	r5
    178e:	f5 cf       	rjmp	.-22     	; 0x177a <vfprintf+0x4ca>
    1790:	f6 01       	movw	r30, r12
    1792:	77 fc       	sbrc	r7, 7
    1794:	85 91       	lpm	r24, Z+
    1796:	77 fe       	sbrs	r7, 7
    1798:	81 91       	ld	r24, Z+
    179a:	6f 01       	movw	r12, r30
    179c:	b7 01       	movw	r22, r14
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	62 d2       	rcall	.+1220   	; 0x1c66 <fputc>
    17a2:	51 10       	cpse	r5, r1
    17a4:	5a 94       	dec	r5
    17a6:	01 50       	subi	r16, 0x01	; 1
    17a8:	11 09       	sbc	r17, r1
    17aa:	01 15       	cp	r16, r1
    17ac:	11 05       	cpc	r17, r1
    17ae:	81 f7       	brne	.-32     	; 0x1790 <vfprintf+0x4e0>
    17b0:	db c0       	rjmp	.+438    	; 0x1968 <vfprintf+0x6b8>
    17b2:	84 36       	cpi	r24, 0x64	; 100
    17b4:	11 f0       	breq	.+4      	; 0x17ba <vfprintf+0x50a>
    17b6:	89 36       	cpi	r24, 0x69	; 105
    17b8:	49 f5       	brne	.+82     	; 0x180c <vfprintf+0x55c>
    17ba:	56 01       	movw	r10, r12
    17bc:	27 ff       	sbrs	r18, 7
    17be:	09 c0       	rjmp	.+18     	; 0x17d2 <vfprintf+0x522>
    17c0:	f4 e0       	ldi	r31, 0x04	; 4
    17c2:	af 0e       	add	r10, r31
    17c4:	b1 1c       	adc	r11, r1
    17c6:	f6 01       	movw	r30, r12
    17c8:	60 81       	ld	r22, Z
    17ca:	71 81       	ldd	r23, Z+1	; 0x01
    17cc:	82 81       	ldd	r24, Z+2	; 0x02
    17ce:	93 81       	ldd	r25, Z+3	; 0x03
    17d0:	0a c0       	rjmp	.+20     	; 0x17e6 <vfprintf+0x536>
    17d2:	f2 e0       	ldi	r31, 0x02	; 2
    17d4:	af 0e       	add	r10, r31
    17d6:	b1 1c       	adc	r11, r1
    17d8:	f6 01       	movw	r30, r12
    17da:	60 81       	ld	r22, Z
    17dc:	71 81       	ldd	r23, Z+1	; 0x01
    17de:	88 27       	eor	r24, r24
    17e0:	77 fd       	sbrc	r23, 7
    17e2:	80 95       	com	r24
    17e4:	98 2f       	mov	r25, r24
    17e6:	02 2f       	mov	r16, r18
    17e8:	0f 76       	andi	r16, 0x6F	; 111
    17ea:	97 ff       	sbrs	r25, 7
    17ec:	08 c0       	rjmp	.+16     	; 0x17fe <vfprintf+0x54e>
    17ee:	90 95       	com	r25
    17f0:	80 95       	com	r24
    17f2:	70 95       	com	r23
    17f4:	61 95       	neg	r22
    17f6:	7f 4f       	sbci	r23, 0xFF	; 255
    17f8:	8f 4f       	sbci	r24, 0xFF	; 255
    17fa:	9f 4f       	sbci	r25, 0xFF	; 255
    17fc:	00 68       	ori	r16, 0x80	; 128
    17fe:	2a e0       	ldi	r18, 0x0A	; 10
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	a4 01       	movw	r20, r8
    1804:	84 d2       	rcall	.+1288   	; 0x1d0e <__ultoa_invert>
    1806:	c8 2e       	mov	r12, r24
    1808:	c8 18       	sub	r12, r8
    180a:	3d c0       	rjmp	.+122    	; 0x1886 <vfprintf+0x5d6>
    180c:	02 2f       	mov	r16, r18
    180e:	85 37       	cpi	r24, 0x75	; 117
    1810:	21 f4       	brne	.+8      	; 0x181a <vfprintf+0x56a>
    1812:	0f 7e       	andi	r16, 0xEF	; 239
    1814:	2a e0       	ldi	r18, 0x0A	; 10
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	1d c0       	rjmp	.+58     	; 0x1854 <vfprintf+0x5a4>
    181a:	09 7f       	andi	r16, 0xF9	; 249
    181c:	8f 36       	cpi	r24, 0x6F	; 111
    181e:	91 f0       	breq	.+36     	; 0x1844 <vfprintf+0x594>
    1820:	18 f4       	brcc	.+6      	; 0x1828 <vfprintf+0x578>
    1822:	88 35       	cpi	r24, 0x58	; 88
    1824:	59 f0       	breq	.+22     	; 0x183c <vfprintf+0x58c>
    1826:	a9 c0       	rjmp	.+338    	; 0x197a <vfprintf+0x6ca>
    1828:	80 37       	cpi	r24, 0x70	; 112
    182a:	19 f0       	breq	.+6      	; 0x1832 <vfprintf+0x582>
    182c:	88 37       	cpi	r24, 0x78	; 120
    182e:	11 f0       	breq	.+4      	; 0x1834 <vfprintf+0x584>
    1830:	a4 c0       	rjmp	.+328    	; 0x197a <vfprintf+0x6ca>
    1832:	00 61       	ori	r16, 0x10	; 16
    1834:	04 ff       	sbrs	r16, 4
    1836:	09 c0       	rjmp	.+18     	; 0x184a <vfprintf+0x59a>
    1838:	04 60       	ori	r16, 0x04	; 4
    183a:	07 c0       	rjmp	.+14     	; 0x184a <vfprintf+0x59a>
    183c:	24 ff       	sbrs	r18, 4
    183e:	08 c0       	rjmp	.+16     	; 0x1850 <vfprintf+0x5a0>
    1840:	06 60       	ori	r16, 0x06	; 6
    1842:	06 c0       	rjmp	.+12     	; 0x1850 <vfprintf+0x5a0>
    1844:	28 e0       	ldi	r18, 0x08	; 8
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	05 c0       	rjmp	.+10     	; 0x1854 <vfprintf+0x5a4>
    184a:	20 e1       	ldi	r18, 0x10	; 16
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <vfprintf+0x5a4>
    1850:	20 e1       	ldi	r18, 0x10	; 16
    1852:	32 e0       	ldi	r19, 0x02	; 2
    1854:	56 01       	movw	r10, r12
    1856:	07 ff       	sbrs	r16, 7
    1858:	09 c0       	rjmp	.+18     	; 0x186c <vfprintf+0x5bc>
    185a:	f4 e0       	ldi	r31, 0x04	; 4
    185c:	af 0e       	add	r10, r31
    185e:	b1 1c       	adc	r11, r1
    1860:	f6 01       	movw	r30, r12
    1862:	60 81       	ld	r22, Z
    1864:	71 81       	ldd	r23, Z+1	; 0x01
    1866:	82 81       	ldd	r24, Z+2	; 0x02
    1868:	93 81       	ldd	r25, Z+3	; 0x03
    186a:	08 c0       	rjmp	.+16     	; 0x187c <vfprintf+0x5cc>
    186c:	f2 e0       	ldi	r31, 0x02	; 2
    186e:	af 0e       	add	r10, r31
    1870:	b1 1c       	adc	r11, r1
    1872:	f6 01       	movw	r30, r12
    1874:	60 81       	ld	r22, Z
    1876:	71 81       	ldd	r23, Z+1	; 0x01
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	a4 01       	movw	r20, r8
    187e:	47 d2       	rcall	.+1166   	; 0x1d0e <__ultoa_invert>
    1880:	c8 2e       	mov	r12, r24
    1882:	c8 18       	sub	r12, r8
    1884:	0f 77       	andi	r16, 0x7F	; 127
    1886:	06 ff       	sbrs	r16, 6
    1888:	0b c0       	rjmp	.+22     	; 0x18a0 <vfprintf+0x5f0>
    188a:	20 2f       	mov	r18, r16
    188c:	2e 7f       	andi	r18, 0xFE	; 254
    188e:	c1 16       	cp	r12, r17
    1890:	50 f4       	brcc	.+20     	; 0x18a6 <vfprintf+0x5f6>
    1892:	04 ff       	sbrs	r16, 4
    1894:	0a c0       	rjmp	.+20     	; 0x18aa <vfprintf+0x5fa>
    1896:	02 fd       	sbrc	r16, 2
    1898:	08 c0       	rjmp	.+16     	; 0x18aa <vfprintf+0x5fa>
    189a:	20 2f       	mov	r18, r16
    189c:	2e 7e       	andi	r18, 0xEE	; 238
    189e:	05 c0       	rjmp	.+10     	; 0x18aa <vfprintf+0x5fa>
    18a0:	dc 2c       	mov	r13, r12
    18a2:	20 2f       	mov	r18, r16
    18a4:	03 c0       	rjmp	.+6      	; 0x18ac <vfprintf+0x5fc>
    18a6:	dc 2c       	mov	r13, r12
    18a8:	01 c0       	rjmp	.+2      	; 0x18ac <vfprintf+0x5fc>
    18aa:	d1 2e       	mov	r13, r17
    18ac:	24 ff       	sbrs	r18, 4
    18ae:	0d c0       	rjmp	.+26     	; 0x18ca <vfprintf+0x61a>
    18b0:	fe 01       	movw	r30, r28
    18b2:	ec 0d       	add	r30, r12
    18b4:	f1 1d       	adc	r31, r1
    18b6:	80 81       	ld	r24, Z
    18b8:	80 33       	cpi	r24, 0x30	; 48
    18ba:	11 f4       	brne	.+4      	; 0x18c0 <vfprintf+0x610>
    18bc:	29 7e       	andi	r18, 0xE9	; 233
    18be:	09 c0       	rjmp	.+18     	; 0x18d2 <vfprintf+0x622>
    18c0:	22 ff       	sbrs	r18, 2
    18c2:	06 c0       	rjmp	.+12     	; 0x18d0 <vfprintf+0x620>
    18c4:	d3 94       	inc	r13
    18c6:	d3 94       	inc	r13
    18c8:	04 c0       	rjmp	.+8      	; 0x18d2 <vfprintf+0x622>
    18ca:	82 2f       	mov	r24, r18
    18cc:	86 78       	andi	r24, 0x86	; 134
    18ce:	09 f0       	breq	.+2      	; 0x18d2 <vfprintf+0x622>
    18d0:	d3 94       	inc	r13
    18d2:	23 fd       	sbrc	r18, 3
    18d4:	12 c0       	rjmp	.+36     	; 0x18fa <vfprintf+0x64a>
    18d6:	20 ff       	sbrs	r18, 0
    18d8:	06 c0       	rjmp	.+12     	; 0x18e6 <vfprintf+0x636>
    18da:	1c 2d       	mov	r17, r12
    18dc:	d5 14       	cp	r13, r5
    18de:	18 f4       	brcc	.+6      	; 0x18e6 <vfprintf+0x636>
    18e0:	15 0d       	add	r17, r5
    18e2:	1d 19       	sub	r17, r13
    18e4:	d5 2c       	mov	r13, r5
    18e6:	d5 14       	cp	r13, r5
    18e8:	60 f4       	brcc	.+24     	; 0x1902 <vfprintf+0x652>
    18ea:	b7 01       	movw	r22, r14
    18ec:	80 e2       	ldi	r24, 0x20	; 32
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	2b 8b       	std	Y+19, r18	; 0x13
    18f2:	b9 d1       	rcall	.+882    	; 0x1c66 <fputc>
    18f4:	d3 94       	inc	r13
    18f6:	2b 89       	ldd	r18, Y+19	; 0x13
    18f8:	f6 cf       	rjmp	.-20     	; 0x18e6 <vfprintf+0x636>
    18fa:	d5 14       	cp	r13, r5
    18fc:	10 f4       	brcc	.+4      	; 0x1902 <vfprintf+0x652>
    18fe:	5d 18       	sub	r5, r13
    1900:	01 c0       	rjmp	.+2      	; 0x1904 <vfprintf+0x654>
    1902:	51 2c       	mov	r5, r1
    1904:	24 ff       	sbrs	r18, 4
    1906:	11 c0       	rjmp	.+34     	; 0x192a <vfprintf+0x67a>
    1908:	b7 01       	movw	r22, r14
    190a:	80 e3       	ldi	r24, 0x30	; 48
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	2b 8b       	std	Y+19, r18	; 0x13
    1910:	aa d1       	rcall	.+852    	; 0x1c66 <fputc>
    1912:	2b 89       	ldd	r18, Y+19	; 0x13
    1914:	22 ff       	sbrs	r18, 2
    1916:	16 c0       	rjmp	.+44     	; 0x1944 <vfprintf+0x694>
    1918:	21 ff       	sbrs	r18, 1
    191a:	03 c0       	rjmp	.+6      	; 0x1922 <vfprintf+0x672>
    191c:	88 e5       	ldi	r24, 0x58	; 88
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	02 c0       	rjmp	.+4      	; 0x1926 <vfprintf+0x676>
    1922:	88 e7       	ldi	r24, 0x78	; 120
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	b7 01       	movw	r22, r14
    1928:	0c c0       	rjmp	.+24     	; 0x1942 <vfprintf+0x692>
    192a:	82 2f       	mov	r24, r18
    192c:	86 78       	andi	r24, 0x86	; 134
    192e:	51 f0       	breq	.+20     	; 0x1944 <vfprintf+0x694>
    1930:	21 fd       	sbrc	r18, 1
    1932:	02 c0       	rjmp	.+4      	; 0x1938 <vfprintf+0x688>
    1934:	80 e2       	ldi	r24, 0x20	; 32
    1936:	01 c0       	rjmp	.+2      	; 0x193a <vfprintf+0x68a>
    1938:	8b e2       	ldi	r24, 0x2B	; 43
    193a:	27 fd       	sbrc	r18, 7
    193c:	8d e2       	ldi	r24, 0x2D	; 45
    193e:	b7 01       	movw	r22, r14
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	91 d1       	rcall	.+802    	; 0x1c66 <fputc>
    1944:	c1 16       	cp	r12, r17
    1946:	30 f4       	brcc	.+12     	; 0x1954 <vfprintf+0x6a4>
    1948:	b7 01       	movw	r22, r14
    194a:	80 e3       	ldi	r24, 0x30	; 48
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	8b d1       	rcall	.+790    	; 0x1c66 <fputc>
    1950:	11 50       	subi	r17, 0x01	; 1
    1952:	f8 cf       	rjmp	.-16     	; 0x1944 <vfprintf+0x694>
    1954:	ca 94       	dec	r12
    1956:	f4 01       	movw	r30, r8
    1958:	ec 0d       	add	r30, r12
    195a:	f1 1d       	adc	r31, r1
    195c:	80 81       	ld	r24, Z
    195e:	b7 01       	movw	r22, r14
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	81 d1       	rcall	.+770    	; 0x1c66 <fputc>
    1964:	c1 10       	cpse	r12, r1
    1966:	f6 cf       	rjmp	.-20     	; 0x1954 <vfprintf+0x6a4>
    1968:	55 20       	and	r5, r5
    196a:	09 f4       	brne	.+2      	; 0x196e <vfprintf+0x6be>
    196c:	dd cc       	rjmp	.-1606   	; 0x1328 <vfprintf+0x78>
    196e:	b7 01       	movw	r22, r14
    1970:	80 e2       	ldi	r24, 0x20	; 32
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	78 d1       	rcall	.+752    	; 0x1c66 <fputc>
    1976:	5a 94       	dec	r5
    1978:	f7 cf       	rjmp	.-18     	; 0x1968 <vfprintf+0x6b8>
    197a:	f7 01       	movw	r30, r14
    197c:	86 81       	ldd	r24, Z+6	; 0x06
    197e:	97 81       	ldd	r25, Z+7	; 0x07
    1980:	02 c0       	rjmp	.+4      	; 0x1986 <vfprintf+0x6d6>
    1982:	8f ef       	ldi	r24, 0xFF	; 255
    1984:	9f ef       	ldi	r25, 0xFF	; 255
    1986:	63 96       	adiw	r28, 0x13	; 19
    1988:	cd bf       	out	0x3d, r28	; 61
    198a:	de bf       	out	0x3e, r29	; 62
    198c:	df 91       	pop	r29
    198e:	cf 91       	pop	r28
    1990:	1f 91       	pop	r17
    1992:	0f 91       	pop	r16
    1994:	ff 90       	pop	r15
    1996:	ef 90       	pop	r14
    1998:	df 90       	pop	r13
    199a:	cf 90       	pop	r12
    199c:	bf 90       	pop	r11
    199e:	af 90       	pop	r10
    19a0:	9f 90       	pop	r9
    19a2:	8f 90       	pop	r8
    19a4:	7f 90       	pop	r7
    19a6:	6f 90       	pop	r6
    19a8:	5f 90       	pop	r5
    19aa:	4f 90       	pop	r4
    19ac:	3f 90       	pop	r3
    19ae:	2f 90       	pop	r2
    19b0:	08 95       	ret

000019b2 <__udivmodsi4>:
    19b2:	a1 e2       	ldi	r26, 0x21	; 33
    19b4:	1a 2e       	mov	r1, r26
    19b6:	aa 1b       	sub	r26, r26
    19b8:	bb 1b       	sub	r27, r27
    19ba:	fd 01       	movw	r30, r26
    19bc:	0d c0       	rjmp	.+26     	; 0x19d8 <__udivmodsi4_ep>

000019be <__udivmodsi4_loop>:
    19be:	aa 1f       	adc	r26, r26
    19c0:	bb 1f       	adc	r27, r27
    19c2:	ee 1f       	adc	r30, r30
    19c4:	ff 1f       	adc	r31, r31
    19c6:	a2 17       	cp	r26, r18
    19c8:	b3 07       	cpc	r27, r19
    19ca:	e4 07       	cpc	r30, r20
    19cc:	f5 07       	cpc	r31, r21
    19ce:	20 f0       	brcs	.+8      	; 0x19d8 <__udivmodsi4_ep>
    19d0:	a2 1b       	sub	r26, r18
    19d2:	b3 0b       	sbc	r27, r19
    19d4:	e4 0b       	sbc	r30, r20
    19d6:	f5 0b       	sbc	r31, r21

000019d8 <__udivmodsi4_ep>:
    19d8:	66 1f       	adc	r22, r22
    19da:	77 1f       	adc	r23, r23
    19dc:	88 1f       	adc	r24, r24
    19de:	99 1f       	adc	r25, r25
    19e0:	1a 94       	dec	r1
    19e2:	69 f7       	brne	.-38     	; 0x19be <__udivmodsi4_loop>
    19e4:	60 95       	com	r22
    19e6:	70 95       	com	r23
    19e8:	80 95       	com	r24
    19ea:	90 95       	com	r25
    19ec:	9b 01       	movw	r18, r22
    19ee:	ac 01       	movw	r20, r24
    19f0:	bd 01       	movw	r22, r26
    19f2:	cf 01       	movw	r24, r30
    19f4:	08 95       	ret

000019f6 <__ftoa_engine>:
    19f6:	28 30       	cpi	r18, 0x08	; 8
    19f8:	08 f0       	brcs	.+2      	; 0x19fc <__ftoa_engine+0x6>
    19fa:	27 e0       	ldi	r18, 0x07	; 7
    19fc:	33 27       	eor	r19, r19
    19fe:	da 01       	movw	r26, r20
    1a00:	99 0f       	add	r25, r25
    1a02:	31 1d       	adc	r19, r1
    1a04:	87 fd       	sbrc	r24, 7
    1a06:	91 60       	ori	r25, 0x01	; 1
    1a08:	00 96       	adiw	r24, 0x00	; 0
    1a0a:	61 05       	cpc	r22, r1
    1a0c:	71 05       	cpc	r23, r1
    1a0e:	39 f4       	brne	.+14     	; 0x1a1e <__ftoa_engine+0x28>
    1a10:	32 60       	ori	r19, 0x02	; 2
    1a12:	2e 5f       	subi	r18, 0xFE	; 254
    1a14:	3d 93       	st	X+, r19
    1a16:	30 e3       	ldi	r19, 0x30	; 48
    1a18:	2a 95       	dec	r18
    1a1a:	e1 f7       	brne	.-8      	; 0x1a14 <__ftoa_engine+0x1e>
    1a1c:	08 95       	ret
    1a1e:	9f 3f       	cpi	r25, 0xFF	; 255
    1a20:	30 f0       	brcs	.+12     	; 0x1a2e <__ftoa_engine+0x38>
    1a22:	80 38       	cpi	r24, 0x80	; 128
    1a24:	71 05       	cpc	r23, r1
    1a26:	61 05       	cpc	r22, r1
    1a28:	09 f0       	breq	.+2      	; 0x1a2c <__ftoa_engine+0x36>
    1a2a:	3c 5f       	subi	r19, 0xFC	; 252
    1a2c:	3c 5f       	subi	r19, 0xFC	; 252
    1a2e:	3d 93       	st	X+, r19
    1a30:	91 30       	cpi	r25, 0x01	; 1
    1a32:	08 f0       	brcs	.+2      	; 0x1a36 <__ftoa_engine+0x40>
    1a34:	80 68       	ori	r24, 0x80	; 128
    1a36:	91 1d       	adc	r25, r1
    1a38:	df 93       	push	r29
    1a3a:	cf 93       	push	r28
    1a3c:	1f 93       	push	r17
    1a3e:	0f 93       	push	r16
    1a40:	ff 92       	push	r15
    1a42:	ef 92       	push	r14
    1a44:	19 2f       	mov	r17, r25
    1a46:	98 7f       	andi	r25, 0xF8	; 248
    1a48:	96 95       	lsr	r25
    1a4a:	e9 2f       	mov	r30, r25
    1a4c:	96 95       	lsr	r25
    1a4e:	96 95       	lsr	r25
    1a50:	e9 0f       	add	r30, r25
    1a52:	ff 27       	eor	r31, r31
    1a54:	e2 5a       	subi	r30, 0xA2	; 162
    1a56:	fd 4f       	sbci	r31, 0xFD	; 253
    1a58:	99 27       	eor	r25, r25
    1a5a:	33 27       	eor	r19, r19
    1a5c:	ee 24       	eor	r14, r14
    1a5e:	ff 24       	eor	r15, r15
    1a60:	a7 01       	movw	r20, r14
    1a62:	e7 01       	movw	r28, r14
    1a64:	05 90       	lpm	r0, Z+
    1a66:	08 94       	sec
    1a68:	07 94       	ror	r0
    1a6a:	28 f4       	brcc	.+10     	; 0x1a76 <__ftoa_engine+0x80>
    1a6c:	36 0f       	add	r19, r22
    1a6e:	e7 1e       	adc	r14, r23
    1a70:	f8 1e       	adc	r15, r24
    1a72:	49 1f       	adc	r20, r25
    1a74:	51 1d       	adc	r21, r1
    1a76:	66 0f       	add	r22, r22
    1a78:	77 1f       	adc	r23, r23
    1a7a:	88 1f       	adc	r24, r24
    1a7c:	99 1f       	adc	r25, r25
    1a7e:	06 94       	lsr	r0
    1a80:	a1 f7       	brne	.-24     	; 0x1a6a <__ftoa_engine+0x74>
    1a82:	05 90       	lpm	r0, Z+
    1a84:	07 94       	ror	r0
    1a86:	28 f4       	brcc	.+10     	; 0x1a92 <__ftoa_engine+0x9c>
    1a88:	e7 0e       	add	r14, r23
    1a8a:	f8 1e       	adc	r15, r24
    1a8c:	49 1f       	adc	r20, r25
    1a8e:	56 1f       	adc	r21, r22
    1a90:	c1 1d       	adc	r28, r1
    1a92:	77 0f       	add	r23, r23
    1a94:	88 1f       	adc	r24, r24
    1a96:	99 1f       	adc	r25, r25
    1a98:	66 1f       	adc	r22, r22
    1a9a:	06 94       	lsr	r0
    1a9c:	a1 f7       	brne	.-24     	; 0x1a86 <__ftoa_engine+0x90>
    1a9e:	05 90       	lpm	r0, Z+
    1aa0:	07 94       	ror	r0
    1aa2:	28 f4       	brcc	.+10     	; 0x1aae <__ftoa_engine+0xb8>
    1aa4:	f8 0e       	add	r15, r24
    1aa6:	49 1f       	adc	r20, r25
    1aa8:	56 1f       	adc	r21, r22
    1aaa:	c7 1f       	adc	r28, r23
    1aac:	d1 1d       	adc	r29, r1
    1aae:	88 0f       	add	r24, r24
    1ab0:	99 1f       	adc	r25, r25
    1ab2:	66 1f       	adc	r22, r22
    1ab4:	77 1f       	adc	r23, r23
    1ab6:	06 94       	lsr	r0
    1ab8:	a1 f7       	brne	.-24     	; 0x1aa2 <__ftoa_engine+0xac>
    1aba:	05 90       	lpm	r0, Z+
    1abc:	07 94       	ror	r0
    1abe:	20 f4       	brcc	.+8      	; 0x1ac8 <__ftoa_engine+0xd2>
    1ac0:	49 0f       	add	r20, r25
    1ac2:	56 1f       	adc	r21, r22
    1ac4:	c7 1f       	adc	r28, r23
    1ac6:	d8 1f       	adc	r29, r24
    1ac8:	99 0f       	add	r25, r25
    1aca:	66 1f       	adc	r22, r22
    1acc:	77 1f       	adc	r23, r23
    1ace:	88 1f       	adc	r24, r24
    1ad0:	06 94       	lsr	r0
    1ad2:	a9 f7       	brne	.-22     	; 0x1abe <__ftoa_engine+0xc8>
    1ad4:	84 91       	lpm	r24, Z
    1ad6:	10 95       	com	r17
    1ad8:	17 70       	andi	r17, 0x07	; 7
    1ada:	41 f0       	breq	.+16     	; 0x1aec <__ftoa_engine+0xf6>
    1adc:	d6 95       	lsr	r29
    1ade:	c7 95       	ror	r28
    1ae0:	57 95       	ror	r21
    1ae2:	47 95       	ror	r20
    1ae4:	f7 94       	ror	r15
    1ae6:	e7 94       	ror	r14
    1ae8:	1a 95       	dec	r17
    1aea:	c1 f7       	brne	.-16     	; 0x1adc <__ftoa_engine+0xe6>
    1aec:	e4 e0       	ldi	r30, 0x04	; 4
    1aee:	f2 e0       	ldi	r31, 0x02	; 2
    1af0:	68 94       	set
    1af2:	15 90       	lpm	r1, Z+
    1af4:	15 91       	lpm	r17, Z+
    1af6:	35 91       	lpm	r19, Z+
    1af8:	65 91       	lpm	r22, Z+
    1afa:	95 91       	lpm	r25, Z+
    1afc:	05 90       	lpm	r0, Z+
    1afe:	7f e2       	ldi	r23, 0x2F	; 47
    1b00:	73 95       	inc	r23
    1b02:	e1 18       	sub	r14, r1
    1b04:	f1 0a       	sbc	r15, r17
    1b06:	43 0b       	sbc	r20, r19
    1b08:	56 0b       	sbc	r21, r22
    1b0a:	c9 0b       	sbc	r28, r25
    1b0c:	d0 09       	sbc	r29, r0
    1b0e:	c0 f7       	brcc	.-16     	; 0x1b00 <__ftoa_engine+0x10a>
    1b10:	e1 0c       	add	r14, r1
    1b12:	f1 1e       	adc	r15, r17
    1b14:	43 1f       	adc	r20, r19
    1b16:	56 1f       	adc	r21, r22
    1b18:	c9 1f       	adc	r28, r25
    1b1a:	d0 1d       	adc	r29, r0
    1b1c:	7e f4       	brtc	.+30     	; 0x1b3c <__ftoa_engine+0x146>
    1b1e:	70 33       	cpi	r23, 0x30	; 48
    1b20:	11 f4       	brne	.+4      	; 0x1b26 <__ftoa_engine+0x130>
    1b22:	8a 95       	dec	r24
    1b24:	e6 cf       	rjmp	.-52     	; 0x1af2 <__ftoa_engine+0xfc>
    1b26:	e8 94       	clt
    1b28:	01 50       	subi	r16, 0x01	; 1
    1b2a:	30 f0       	brcs	.+12     	; 0x1b38 <__ftoa_engine+0x142>
    1b2c:	08 0f       	add	r16, r24
    1b2e:	0a f4       	brpl	.+2      	; 0x1b32 <__ftoa_engine+0x13c>
    1b30:	00 27       	eor	r16, r16
    1b32:	02 17       	cp	r16, r18
    1b34:	08 f4       	brcc	.+2      	; 0x1b38 <__ftoa_engine+0x142>
    1b36:	20 2f       	mov	r18, r16
    1b38:	23 95       	inc	r18
    1b3a:	02 2f       	mov	r16, r18
    1b3c:	7a 33       	cpi	r23, 0x3A	; 58
    1b3e:	28 f0       	brcs	.+10     	; 0x1b4a <__ftoa_engine+0x154>
    1b40:	79 e3       	ldi	r23, 0x39	; 57
    1b42:	7d 93       	st	X+, r23
    1b44:	2a 95       	dec	r18
    1b46:	e9 f7       	brne	.-6      	; 0x1b42 <__ftoa_engine+0x14c>
    1b48:	10 c0       	rjmp	.+32     	; 0x1b6a <__ftoa_engine+0x174>
    1b4a:	7d 93       	st	X+, r23
    1b4c:	2a 95       	dec	r18
    1b4e:	89 f6       	brne	.-94     	; 0x1af2 <__ftoa_engine+0xfc>
    1b50:	06 94       	lsr	r0
    1b52:	97 95       	ror	r25
    1b54:	67 95       	ror	r22
    1b56:	37 95       	ror	r19
    1b58:	17 95       	ror	r17
    1b5a:	17 94       	ror	r1
    1b5c:	e1 18       	sub	r14, r1
    1b5e:	f1 0a       	sbc	r15, r17
    1b60:	43 0b       	sbc	r20, r19
    1b62:	56 0b       	sbc	r21, r22
    1b64:	c9 0b       	sbc	r28, r25
    1b66:	d0 09       	sbc	r29, r0
    1b68:	98 f0       	brcs	.+38     	; 0x1b90 <__ftoa_engine+0x19a>
    1b6a:	23 95       	inc	r18
    1b6c:	7e 91       	ld	r23, -X
    1b6e:	73 95       	inc	r23
    1b70:	7a 33       	cpi	r23, 0x3A	; 58
    1b72:	08 f0       	brcs	.+2      	; 0x1b76 <__ftoa_engine+0x180>
    1b74:	70 e3       	ldi	r23, 0x30	; 48
    1b76:	7c 93       	st	X, r23
    1b78:	20 13       	cpse	r18, r16
    1b7a:	b8 f7       	brcc	.-18     	; 0x1b6a <__ftoa_engine+0x174>
    1b7c:	7e 91       	ld	r23, -X
    1b7e:	70 61       	ori	r23, 0x10	; 16
    1b80:	7d 93       	st	X+, r23
    1b82:	30 f0       	brcs	.+12     	; 0x1b90 <__ftoa_engine+0x19a>
    1b84:	83 95       	inc	r24
    1b86:	71 e3       	ldi	r23, 0x31	; 49
    1b88:	7d 93       	st	X+, r23
    1b8a:	70 e3       	ldi	r23, 0x30	; 48
    1b8c:	2a 95       	dec	r18
    1b8e:	e1 f7       	brne	.-8      	; 0x1b88 <__ftoa_engine+0x192>
    1b90:	11 24       	eor	r1, r1
    1b92:	ef 90       	pop	r14
    1b94:	ff 90       	pop	r15
    1b96:	0f 91       	pop	r16
    1b98:	1f 91       	pop	r17
    1b9a:	cf 91       	pop	r28
    1b9c:	df 91       	pop	r29
    1b9e:	99 27       	eor	r25, r25
    1ba0:	87 fd       	sbrc	r24, 7
    1ba2:	90 95       	com	r25
    1ba4:	08 95       	ret

00001ba6 <strnlen_P>:
    1ba6:	fc 01       	movw	r30, r24
    1ba8:	05 90       	lpm	r0, Z+
    1baa:	61 50       	subi	r22, 0x01	; 1
    1bac:	70 40       	sbci	r23, 0x00	; 0
    1bae:	01 10       	cpse	r0, r1
    1bb0:	d8 f7       	brcc	.-10     	; 0x1ba8 <strnlen_P+0x2>
    1bb2:	80 95       	com	r24
    1bb4:	90 95       	com	r25
    1bb6:	8e 0f       	add	r24, r30
    1bb8:	9f 1f       	adc	r25, r31
    1bba:	08 95       	ret

00001bbc <strnlen>:
    1bbc:	fc 01       	movw	r30, r24
    1bbe:	61 50       	subi	r22, 0x01	; 1
    1bc0:	70 40       	sbci	r23, 0x00	; 0
    1bc2:	01 90       	ld	r0, Z+
    1bc4:	01 10       	cpse	r0, r1
    1bc6:	d8 f7       	brcc	.-10     	; 0x1bbe <strnlen+0x2>
    1bc8:	80 95       	com	r24
    1bca:	90 95       	com	r25
    1bcc:	8e 0f       	add	r24, r30
    1bce:	9f 1f       	adc	r25, r31
    1bd0:	08 95       	ret

00001bd2 <fdevopen>:
    1bd2:	0f 93       	push	r16
    1bd4:	1f 93       	push	r17
    1bd6:	cf 93       	push	r28
    1bd8:	df 93       	push	r29
    1bda:	ec 01       	movw	r28, r24
    1bdc:	8b 01       	movw	r16, r22
    1bde:	00 97       	sbiw	r24, 0x00	; 0
    1be0:	31 f4       	brne	.+12     	; 0x1bee <fdevopen+0x1c>
    1be2:	61 15       	cp	r22, r1
    1be4:	71 05       	cpc	r23, r1
    1be6:	19 f4       	brne	.+6      	; 0x1bee <fdevopen+0x1c>
    1be8:	80 e0       	ldi	r24, 0x00	; 0
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	37 c0       	rjmp	.+110    	; 0x1c5c <fdevopen+0x8a>
    1bee:	6e e0       	ldi	r22, 0x0E	; 14
    1bf0:	70 e0       	ldi	r23, 0x00	; 0
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	9c d3       	rcall	.+1848   	; 0x2330 <calloc>
    1bf8:	fc 01       	movw	r30, r24
    1bfa:	00 97       	sbiw	r24, 0x00	; 0
    1bfc:	a9 f3       	breq	.-22     	; 0x1be8 <fdevopen+0x16>
    1bfe:	80 e8       	ldi	r24, 0x80	; 128
    1c00:	83 83       	std	Z+3, r24	; 0x03
    1c02:	01 15       	cp	r16, r1
    1c04:	11 05       	cpc	r17, r1
    1c06:	71 f0       	breq	.+28     	; 0x1c24 <fdevopen+0x52>
    1c08:	02 87       	std	Z+10, r16	; 0x0a
    1c0a:	13 87       	std	Z+11, r17	; 0x0b
    1c0c:	81 e8       	ldi	r24, 0x81	; 129
    1c0e:	83 83       	std	Z+3, r24	; 0x03
    1c10:	80 91 28 20 	lds	r24, 0x2028
    1c14:	90 91 29 20 	lds	r25, 0x2029
    1c18:	89 2b       	or	r24, r25
    1c1a:	21 f4       	brne	.+8      	; 0x1c24 <fdevopen+0x52>
    1c1c:	e0 93 28 20 	sts	0x2028, r30
    1c20:	f0 93 29 20 	sts	0x2029, r31
    1c24:	20 97       	sbiw	r28, 0x00	; 0
    1c26:	c9 f0       	breq	.+50     	; 0x1c5a <fdevopen+0x88>
    1c28:	c0 87       	std	Z+8, r28	; 0x08
    1c2a:	d1 87       	std	Z+9, r29	; 0x09
    1c2c:	83 81       	ldd	r24, Z+3	; 0x03
    1c2e:	82 60       	ori	r24, 0x02	; 2
    1c30:	83 83       	std	Z+3, r24	; 0x03
    1c32:	80 91 2a 20 	lds	r24, 0x202A
    1c36:	90 91 2b 20 	lds	r25, 0x202B
    1c3a:	89 2b       	or	r24, r25
    1c3c:	71 f4       	brne	.+28     	; 0x1c5a <fdevopen+0x88>
    1c3e:	e0 93 2a 20 	sts	0x202A, r30
    1c42:	f0 93 2b 20 	sts	0x202B, r31
    1c46:	80 91 2c 20 	lds	r24, 0x202C
    1c4a:	90 91 2d 20 	lds	r25, 0x202D
    1c4e:	89 2b       	or	r24, r25
    1c50:	21 f4       	brne	.+8      	; 0x1c5a <fdevopen+0x88>
    1c52:	e0 93 2c 20 	sts	0x202C, r30
    1c56:	f0 93 2d 20 	sts	0x202D, r31
    1c5a:	cf 01       	movw	r24, r30
    1c5c:	df 91       	pop	r29
    1c5e:	cf 91       	pop	r28
    1c60:	1f 91       	pop	r17
    1c62:	0f 91       	pop	r16
    1c64:	08 95       	ret

00001c66 <fputc>:
    1c66:	0f 93       	push	r16
    1c68:	1f 93       	push	r17
    1c6a:	cf 93       	push	r28
    1c6c:	df 93       	push	r29
    1c6e:	18 2f       	mov	r17, r24
    1c70:	09 2f       	mov	r16, r25
    1c72:	eb 01       	movw	r28, r22
    1c74:	8b 81       	ldd	r24, Y+3	; 0x03
    1c76:	81 fd       	sbrc	r24, 1
    1c78:	03 c0       	rjmp	.+6      	; 0x1c80 <fputc+0x1a>
    1c7a:	8f ef       	ldi	r24, 0xFF	; 255
    1c7c:	9f ef       	ldi	r25, 0xFF	; 255
    1c7e:	20 c0       	rjmp	.+64     	; 0x1cc0 <fputc+0x5a>
    1c80:	82 ff       	sbrs	r24, 2
    1c82:	10 c0       	rjmp	.+32     	; 0x1ca4 <fputc+0x3e>
    1c84:	4e 81       	ldd	r20, Y+6	; 0x06
    1c86:	5f 81       	ldd	r21, Y+7	; 0x07
    1c88:	2c 81       	ldd	r18, Y+4	; 0x04
    1c8a:	3d 81       	ldd	r19, Y+5	; 0x05
    1c8c:	42 17       	cp	r20, r18
    1c8e:	53 07       	cpc	r21, r19
    1c90:	7c f4       	brge	.+30     	; 0x1cb0 <fputc+0x4a>
    1c92:	e8 81       	ld	r30, Y
    1c94:	f9 81       	ldd	r31, Y+1	; 0x01
    1c96:	9f 01       	movw	r18, r30
    1c98:	2f 5f       	subi	r18, 0xFF	; 255
    1c9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c9c:	28 83       	st	Y, r18
    1c9e:	39 83       	std	Y+1, r19	; 0x01
    1ca0:	10 83       	st	Z, r17
    1ca2:	06 c0       	rjmp	.+12     	; 0x1cb0 <fputc+0x4a>
    1ca4:	e8 85       	ldd	r30, Y+8	; 0x08
    1ca6:	f9 85       	ldd	r31, Y+9	; 0x09
    1ca8:	81 2f       	mov	r24, r17
    1caa:	19 95       	eicall
    1cac:	89 2b       	or	r24, r25
    1cae:	29 f7       	brne	.-54     	; 0x1c7a <fputc+0x14>
    1cb0:	2e 81       	ldd	r18, Y+6	; 0x06
    1cb2:	3f 81       	ldd	r19, Y+7	; 0x07
    1cb4:	2f 5f       	subi	r18, 0xFF	; 255
    1cb6:	3f 4f       	sbci	r19, 0xFF	; 255
    1cb8:	2e 83       	std	Y+6, r18	; 0x06
    1cba:	3f 83       	std	Y+7, r19	; 0x07
    1cbc:	81 2f       	mov	r24, r17
    1cbe:	90 2f       	mov	r25, r16
    1cc0:	df 91       	pop	r29
    1cc2:	cf 91       	pop	r28
    1cc4:	1f 91       	pop	r17
    1cc6:	0f 91       	pop	r16
    1cc8:	08 95       	ret

00001cca <printf>:
    1cca:	cf 93       	push	r28
    1ccc:	df 93       	push	r29
    1cce:	cd b7       	in	r28, 0x3d	; 61
    1cd0:	de b7       	in	r29, 0x3e	; 62
    1cd2:	fe 01       	movw	r30, r28
    1cd4:	36 96       	adiw	r30, 0x06	; 6
    1cd6:	61 91       	ld	r22, Z+
    1cd8:	71 91       	ld	r23, Z+
    1cda:	af 01       	movw	r20, r30
    1cdc:	80 91 2a 20 	lds	r24, 0x202A
    1ce0:	90 91 2b 20 	lds	r25, 0x202B
    1ce4:	e5 da       	rcall	.-2614   	; 0x12b0 <vfprintf>
    1ce6:	df 91       	pop	r29
    1ce8:	cf 91       	pop	r28
    1cea:	08 95       	ret

00001cec <scanf>:
    1cec:	cf 93       	push	r28
    1cee:	df 93       	push	r29
    1cf0:	cd b7       	in	r28, 0x3d	; 61
    1cf2:	de b7       	in	r29, 0x3e	; 62
    1cf4:	fe 01       	movw	r30, r28
    1cf6:	36 96       	adiw	r30, 0x06	; 6
    1cf8:	61 91       	ld	r22, Z+
    1cfa:	71 91       	ld	r23, Z+
    1cfc:	af 01       	movw	r20, r30
    1cfe:	80 91 28 20 	lds	r24, 0x2028
    1d02:	90 91 29 20 	lds	r25, 0x2029
    1d06:	eb d1       	rcall	.+982    	; 0x20de <vfscanf>
    1d08:	df 91       	pop	r29
    1d0a:	cf 91       	pop	r28
    1d0c:	08 95       	ret

00001d0e <__ultoa_invert>:
    1d0e:	fa 01       	movw	r30, r20
    1d10:	aa 27       	eor	r26, r26
    1d12:	28 30       	cpi	r18, 0x08	; 8
    1d14:	51 f1       	breq	.+84     	; 0x1d6a <__ultoa_invert+0x5c>
    1d16:	20 31       	cpi	r18, 0x10	; 16
    1d18:	81 f1       	breq	.+96     	; 0x1d7a <__ultoa_invert+0x6c>
    1d1a:	e8 94       	clt
    1d1c:	6f 93       	push	r22
    1d1e:	6e 7f       	andi	r22, 0xFE	; 254
    1d20:	6e 5f       	subi	r22, 0xFE	; 254
    1d22:	7f 4f       	sbci	r23, 0xFF	; 255
    1d24:	8f 4f       	sbci	r24, 0xFF	; 255
    1d26:	9f 4f       	sbci	r25, 0xFF	; 255
    1d28:	af 4f       	sbci	r26, 0xFF	; 255
    1d2a:	b1 e0       	ldi	r27, 0x01	; 1
    1d2c:	3e d0       	rcall	.+124    	; 0x1daa <__ultoa_invert+0x9c>
    1d2e:	b4 e0       	ldi	r27, 0x04	; 4
    1d30:	3c d0       	rcall	.+120    	; 0x1daa <__ultoa_invert+0x9c>
    1d32:	67 0f       	add	r22, r23
    1d34:	78 1f       	adc	r23, r24
    1d36:	89 1f       	adc	r24, r25
    1d38:	9a 1f       	adc	r25, r26
    1d3a:	a1 1d       	adc	r26, r1
    1d3c:	68 0f       	add	r22, r24
    1d3e:	79 1f       	adc	r23, r25
    1d40:	8a 1f       	adc	r24, r26
    1d42:	91 1d       	adc	r25, r1
    1d44:	a1 1d       	adc	r26, r1
    1d46:	6a 0f       	add	r22, r26
    1d48:	71 1d       	adc	r23, r1
    1d4a:	81 1d       	adc	r24, r1
    1d4c:	91 1d       	adc	r25, r1
    1d4e:	a1 1d       	adc	r26, r1
    1d50:	20 d0       	rcall	.+64     	; 0x1d92 <__ultoa_invert+0x84>
    1d52:	09 f4       	brne	.+2      	; 0x1d56 <__ultoa_invert+0x48>
    1d54:	68 94       	set
    1d56:	3f 91       	pop	r19
    1d58:	2a e0       	ldi	r18, 0x0A	; 10
    1d5a:	26 9f       	mul	r18, r22
    1d5c:	11 24       	eor	r1, r1
    1d5e:	30 19       	sub	r19, r0
    1d60:	30 5d       	subi	r19, 0xD0	; 208
    1d62:	31 93       	st	Z+, r19
    1d64:	de f6       	brtc	.-74     	; 0x1d1c <__ultoa_invert+0xe>
    1d66:	cf 01       	movw	r24, r30
    1d68:	08 95       	ret
    1d6a:	46 2f       	mov	r20, r22
    1d6c:	47 70       	andi	r20, 0x07	; 7
    1d6e:	40 5d       	subi	r20, 0xD0	; 208
    1d70:	41 93       	st	Z+, r20
    1d72:	b3 e0       	ldi	r27, 0x03	; 3
    1d74:	0f d0       	rcall	.+30     	; 0x1d94 <__ultoa_invert+0x86>
    1d76:	c9 f7       	brne	.-14     	; 0x1d6a <__ultoa_invert+0x5c>
    1d78:	f6 cf       	rjmp	.-20     	; 0x1d66 <__ultoa_invert+0x58>
    1d7a:	46 2f       	mov	r20, r22
    1d7c:	4f 70       	andi	r20, 0x0F	; 15
    1d7e:	40 5d       	subi	r20, 0xD0	; 208
    1d80:	4a 33       	cpi	r20, 0x3A	; 58
    1d82:	18 f0       	brcs	.+6      	; 0x1d8a <__ultoa_invert+0x7c>
    1d84:	49 5d       	subi	r20, 0xD9	; 217
    1d86:	31 fd       	sbrc	r19, 1
    1d88:	40 52       	subi	r20, 0x20	; 32
    1d8a:	41 93       	st	Z+, r20
    1d8c:	02 d0       	rcall	.+4      	; 0x1d92 <__ultoa_invert+0x84>
    1d8e:	a9 f7       	brne	.-22     	; 0x1d7a <__ultoa_invert+0x6c>
    1d90:	ea cf       	rjmp	.-44     	; 0x1d66 <__ultoa_invert+0x58>
    1d92:	b4 e0       	ldi	r27, 0x04	; 4
    1d94:	a6 95       	lsr	r26
    1d96:	97 95       	ror	r25
    1d98:	87 95       	ror	r24
    1d9a:	77 95       	ror	r23
    1d9c:	67 95       	ror	r22
    1d9e:	ba 95       	dec	r27
    1da0:	c9 f7       	brne	.-14     	; 0x1d94 <__ultoa_invert+0x86>
    1da2:	00 97       	sbiw	r24, 0x00	; 0
    1da4:	61 05       	cpc	r22, r1
    1da6:	71 05       	cpc	r23, r1
    1da8:	08 95       	ret
    1daa:	9b 01       	movw	r18, r22
    1dac:	ac 01       	movw	r20, r24
    1dae:	0a 2e       	mov	r0, r26
    1db0:	06 94       	lsr	r0
    1db2:	57 95       	ror	r21
    1db4:	47 95       	ror	r20
    1db6:	37 95       	ror	r19
    1db8:	27 95       	ror	r18
    1dba:	ba 95       	dec	r27
    1dbc:	c9 f7       	brne	.-14     	; 0x1db0 <__ultoa_invert+0xa2>
    1dbe:	62 0f       	add	r22, r18
    1dc0:	73 1f       	adc	r23, r19
    1dc2:	84 1f       	adc	r24, r20
    1dc4:	95 1f       	adc	r25, r21
    1dc6:	a0 1d       	adc	r26, r0
    1dc8:	08 95       	ret

00001dca <putval>:
    1dca:	20 fd       	sbrc	r18, 0
    1dcc:	09 c0       	rjmp	.+18     	; 0x1de0 <putval+0x16>
    1dce:	fc 01       	movw	r30, r24
    1dd0:	23 fd       	sbrc	r18, 3
    1dd2:	05 c0       	rjmp	.+10     	; 0x1dde <putval+0x14>
    1dd4:	22 ff       	sbrs	r18, 2
    1dd6:	02 c0       	rjmp	.+4      	; 0x1ddc <putval+0x12>
    1dd8:	73 83       	std	Z+3, r23	; 0x03
    1dda:	62 83       	std	Z+2, r22	; 0x02
    1ddc:	51 83       	std	Z+1, r21	; 0x01
    1dde:	40 83       	st	Z, r20
    1de0:	08 95       	ret

00001de2 <mulacc>:
    1de2:	44 fd       	sbrc	r20, 4
    1de4:	10 c0       	rjmp	.+32     	; 0x1e06 <mulacc+0x24>
    1de6:	46 fd       	sbrc	r20, 6
    1de8:	10 c0       	rjmp	.+32     	; 0x1e0a <mulacc+0x28>
    1dea:	db 01       	movw	r26, r22
    1dec:	fc 01       	movw	r30, r24
    1dee:	aa 0f       	add	r26, r26
    1df0:	bb 1f       	adc	r27, r27
    1df2:	ee 1f       	adc	r30, r30
    1df4:	ff 1f       	adc	r31, r31
    1df6:	10 94       	com	r1
    1df8:	d1 f7       	brne	.-12     	; 0x1dee <mulacc+0xc>
    1dfa:	6a 0f       	add	r22, r26
    1dfc:	7b 1f       	adc	r23, r27
    1dfe:	8e 1f       	adc	r24, r30
    1e00:	9f 1f       	adc	r25, r31
    1e02:	31 e0       	ldi	r19, 0x01	; 1
    1e04:	03 c0       	rjmp	.+6      	; 0x1e0c <mulacc+0x2a>
    1e06:	33 e0       	ldi	r19, 0x03	; 3
    1e08:	01 c0       	rjmp	.+2      	; 0x1e0c <mulacc+0x2a>
    1e0a:	34 e0       	ldi	r19, 0x04	; 4
    1e0c:	66 0f       	add	r22, r22
    1e0e:	77 1f       	adc	r23, r23
    1e10:	88 1f       	adc	r24, r24
    1e12:	99 1f       	adc	r25, r25
    1e14:	31 50       	subi	r19, 0x01	; 1
    1e16:	d1 f7       	brne	.-12     	; 0x1e0c <mulacc+0x2a>
    1e18:	62 0f       	add	r22, r18
    1e1a:	71 1d       	adc	r23, r1
    1e1c:	81 1d       	adc	r24, r1
    1e1e:	91 1d       	adc	r25, r1
    1e20:	08 95       	ret

00001e22 <skip_spaces>:
    1e22:	0f 93       	push	r16
    1e24:	1f 93       	push	r17
    1e26:	cf 93       	push	r28
    1e28:	df 93       	push	r29
    1e2a:	8c 01       	movw	r16, r24
    1e2c:	c8 01       	movw	r24, r16
    1e2e:	db d3       	rcall	.+1974   	; 0x25e6 <fgetc>
    1e30:	ec 01       	movw	r28, r24
    1e32:	97 fd       	sbrc	r25, 7
    1e34:	06 c0       	rjmp	.+12     	; 0x1e42 <skip_spaces+0x20>
    1e36:	bd d3       	rcall	.+1914   	; 0x25b2 <isspace>
    1e38:	89 2b       	or	r24, r25
    1e3a:	c1 f7       	brne	.-16     	; 0x1e2c <skip_spaces+0xa>
    1e3c:	b8 01       	movw	r22, r16
    1e3e:	ce 01       	movw	r24, r28
    1e40:	10 d4       	rcall	.+2080   	; 0x2662 <ungetc>
    1e42:	ce 01       	movw	r24, r28
    1e44:	df 91       	pop	r29
    1e46:	cf 91       	pop	r28
    1e48:	1f 91       	pop	r17
    1e4a:	0f 91       	pop	r16
    1e4c:	08 95       	ret

00001e4e <conv_int>:
    1e4e:	8f 92       	push	r8
    1e50:	9f 92       	push	r9
    1e52:	af 92       	push	r10
    1e54:	cf 92       	push	r12
    1e56:	df 92       	push	r13
    1e58:	ef 92       	push	r14
    1e5a:	ff 92       	push	r15
    1e5c:	0f 93       	push	r16
    1e5e:	1f 93       	push	r17
    1e60:	cf 93       	push	r28
    1e62:	df 93       	push	r29
    1e64:	ec 01       	movw	r28, r24
    1e66:	a6 2e       	mov	r10, r22
    1e68:	4a 01       	movw	r8, r20
    1e6a:	02 2f       	mov	r16, r18
    1e6c:	bc d3       	rcall	.+1912   	; 0x25e6 <fgetc>
    1e6e:	ac 01       	movw	r20, r24
    1e70:	55 27       	eor	r21, r21
    1e72:	4b 32       	cpi	r20, 0x2B	; 43
    1e74:	51 05       	cpc	r21, r1
    1e76:	21 f0       	breq	.+8      	; 0x1e80 <conv_int+0x32>
    1e78:	4d 32       	cpi	r20, 0x2D	; 45
    1e7a:	51 05       	cpc	r21, r1
    1e7c:	49 f4       	brne	.+18     	; 0x1e90 <conv_int+0x42>
    1e7e:	00 68       	ori	r16, 0x80	; 128
    1e80:	aa 94       	dec	r10
    1e82:	11 f4       	brne	.+4      	; 0x1e88 <conv_int+0x3a>
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	60 c0       	rjmp	.+192    	; 0x1f48 <conv_int+0xfa>
    1e88:	ce 01       	movw	r24, r28
    1e8a:	ad d3       	rcall	.+1882   	; 0x25e6 <fgetc>
    1e8c:	97 fd       	sbrc	r25, 7
    1e8e:	fa cf       	rjmp	.-12     	; 0x1e84 <conv_int+0x36>
    1e90:	10 2f       	mov	r17, r16
    1e92:	1d 7f       	andi	r17, 0xFD	; 253
    1e94:	30 2f       	mov	r19, r16
    1e96:	30 73       	andi	r19, 0x30	; 48
    1e98:	f1 f4       	brne	.+60     	; 0x1ed6 <conv_int+0x88>
    1e9a:	80 33       	cpi	r24, 0x30	; 48
    1e9c:	e1 f4       	brne	.+56     	; 0x1ed6 <conv_int+0x88>
    1e9e:	ff 24       	eor	r15, r15
    1ea0:	fa 94       	dec	r15
    1ea2:	fa 0c       	add	r15, r10
    1ea4:	09 f4       	brne	.+2      	; 0x1ea8 <conv_int+0x5a>
    1ea6:	3d c0       	rjmp	.+122    	; 0x1f22 <conv_int+0xd4>
    1ea8:	ce 01       	movw	r24, r28
    1eaa:	9d d3       	rcall	.+1850   	; 0x25e6 <fgetc>
    1eac:	97 fd       	sbrc	r25, 7
    1eae:	39 c0       	rjmp	.+114    	; 0x1f22 <conv_int+0xd4>
    1eb0:	38 2f       	mov	r19, r24
    1eb2:	3f 7d       	andi	r19, 0xDF	; 223
    1eb4:	38 35       	cpi	r19, 0x58	; 88
    1eb6:	49 f4       	brne	.+18     	; 0x1eca <conv_int+0x7c>
    1eb8:	12 64       	ori	r17, 0x42	; 66
    1eba:	aa 94       	dec	r10
    1ebc:	aa 94       	dec	r10
    1ebe:	89 f1       	breq	.+98     	; 0x1f22 <conv_int+0xd4>
    1ec0:	ce 01       	movw	r24, r28
    1ec2:	91 d3       	rcall	.+1826   	; 0x25e6 <fgetc>
    1ec4:	97 ff       	sbrs	r25, 7
    1ec6:	07 c0       	rjmp	.+14     	; 0x1ed6 <conv_int+0x88>
    1ec8:	2c c0       	rjmp	.+88     	; 0x1f22 <conv_int+0xd4>
    1eca:	06 ff       	sbrs	r16, 6
    1ecc:	02 c0       	rjmp	.+4      	; 0x1ed2 <conv_int+0x84>
    1ece:	12 60       	ori	r17, 0x02	; 2
    1ed0:	01 c0       	rjmp	.+2      	; 0x1ed4 <conv_int+0x86>
    1ed2:	12 61       	ori	r17, 0x12	; 18
    1ed4:	af 2c       	mov	r10, r15
    1ed6:	c1 2c       	mov	r12, r1
    1ed8:	d1 2c       	mov	r13, r1
    1eda:	76 01       	movw	r14, r12
    1edc:	20 ed       	ldi	r18, 0xD0	; 208
    1ede:	28 0f       	add	r18, r24
    1ee0:	28 30       	cpi	r18, 0x08	; 8
    1ee2:	78 f0       	brcs	.+30     	; 0x1f02 <conv_int+0xb4>
    1ee4:	14 ff       	sbrs	r17, 4
    1ee6:	03 c0       	rjmp	.+6      	; 0x1eee <conv_int+0xa0>
    1ee8:	be 01       	movw	r22, r28
    1eea:	bb d3       	rcall	.+1910   	; 0x2662 <ungetc>
    1eec:	17 c0       	rjmp	.+46     	; 0x1f1c <conv_int+0xce>
    1eee:	2a 30       	cpi	r18, 0x0A	; 10
    1ef0:	40 f0       	brcs	.+16     	; 0x1f02 <conv_int+0xb4>
    1ef2:	16 ff       	sbrs	r17, 6
    1ef4:	f9 cf       	rjmp	.-14     	; 0x1ee8 <conv_int+0x9a>
    1ef6:	2f 7d       	andi	r18, 0xDF	; 223
    1ef8:	3f ee       	ldi	r19, 0xEF	; 239
    1efa:	32 0f       	add	r19, r18
    1efc:	36 30       	cpi	r19, 0x06	; 6
    1efe:	a0 f7       	brcc	.-24     	; 0x1ee8 <conv_int+0x9a>
    1f00:	27 50       	subi	r18, 0x07	; 7
    1f02:	41 2f       	mov	r20, r17
    1f04:	c7 01       	movw	r24, r14
    1f06:	b6 01       	movw	r22, r12
    1f08:	6c df       	rcall	.-296    	; 0x1de2 <mulacc>
    1f0a:	6b 01       	movw	r12, r22
    1f0c:	7c 01       	movw	r14, r24
    1f0e:	12 60       	ori	r17, 0x02	; 2
    1f10:	aa 94       	dec	r10
    1f12:	51 f0       	breq	.+20     	; 0x1f28 <conv_int+0xda>
    1f14:	ce 01       	movw	r24, r28
    1f16:	67 d3       	rcall	.+1742   	; 0x25e6 <fgetc>
    1f18:	97 ff       	sbrs	r25, 7
    1f1a:	e0 cf       	rjmp	.-64     	; 0x1edc <conv_int+0x8e>
    1f1c:	11 fd       	sbrc	r17, 1
    1f1e:	04 c0       	rjmp	.+8      	; 0x1f28 <conv_int+0xda>
    1f20:	b1 cf       	rjmp	.-158    	; 0x1e84 <conv_int+0x36>
    1f22:	c1 2c       	mov	r12, r1
    1f24:	d1 2c       	mov	r13, r1
    1f26:	76 01       	movw	r14, r12
    1f28:	17 ff       	sbrs	r17, 7
    1f2a:	08 c0       	rjmp	.+16     	; 0x1f3c <conv_int+0xee>
    1f2c:	f0 94       	com	r15
    1f2e:	e0 94       	com	r14
    1f30:	d0 94       	com	r13
    1f32:	c0 94       	com	r12
    1f34:	c1 1c       	adc	r12, r1
    1f36:	d1 1c       	adc	r13, r1
    1f38:	e1 1c       	adc	r14, r1
    1f3a:	f1 1c       	adc	r15, r1
    1f3c:	21 2f       	mov	r18, r17
    1f3e:	b7 01       	movw	r22, r14
    1f40:	a6 01       	movw	r20, r12
    1f42:	c4 01       	movw	r24, r8
    1f44:	42 df       	rcall	.-380    	; 0x1dca <putval>
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	df 91       	pop	r29
    1f4a:	cf 91       	pop	r28
    1f4c:	1f 91       	pop	r17
    1f4e:	0f 91       	pop	r16
    1f50:	ff 90       	pop	r15
    1f52:	ef 90       	pop	r14
    1f54:	df 90       	pop	r13
    1f56:	cf 90       	pop	r12
    1f58:	af 90       	pop	r10
    1f5a:	9f 90       	pop	r9
    1f5c:	8f 90       	pop	r8
    1f5e:	08 95       	ret

00001f60 <conv_brk>:
    1f60:	7f 92       	push	r7
    1f62:	8f 92       	push	r8
    1f64:	9f 92       	push	r9
    1f66:	af 92       	push	r10
    1f68:	bf 92       	push	r11
    1f6a:	cf 92       	push	r12
    1f6c:	df 92       	push	r13
    1f6e:	ef 92       	push	r14
    1f70:	ff 92       	push	r15
    1f72:	0f 93       	push	r16
    1f74:	1f 93       	push	r17
    1f76:	cf 93       	push	r28
    1f78:	df 93       	push	r29
    1f7a:	cd b7       	in	r28, 0x3d	; 61
    1f7c:	de b7       	in	r29, 0x3e	; 62
    1f7e:	a1 97       	sbiw	r28, 0x21	; 33
    1f80:	cd bf       	out	0x3d, r28	; 61
    1f82:	de bf       	out	0x3e, r29	; 62
    1f84:	5c 01       	movw	r10, r24
    1f86:	7a 01       	movw	r14, r20
    1f88:	8e 01       	movw	r16, r28
    1f8a:	0f 5f       	subi	r16, 0xFF	; 255
    1f8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f8e:	68 01       	movw	r12, r16
    1f90:	80 e2       	ldi	r24, 0x20	; 32
    1f92:	d8 01       	movw	r26, r16
    1f94:	1d 92       	st	X+, r1
    1f96:	8a 95       	dec	r24
    1f98:	e9 f7       	brne	.-6      	; 0x1f94 <conv_brk+0x34>
    1f9a:	f5 01       	movw	r30, r10
    1f9c:	73 80       	ldd	r7, Z+3	; 0x03
    1f9e:	40 e0       	ldi	r20, 0x00	; 0
    1fa0:	50 e0       	ldi	r21, 0x00	; 0
    1fa2:	81 2c       	mov	r8, r1
    1fa4:	b0 e0       	ldi	r27, 0x00	; 0
    1fa6:	91 2c       	mov	r9, r1
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	f9 01       	movw	r30, r18
    1fae:	73 fc       	sbrc	r7, 3
    1fb0:	a5 91       	lpm	r26, Z+
    1fb2:	73 fe       	sbrs	r7, 3
    1fb4:	a1 91       	ld	r26, Z+
    1fb6:	8f 01       	movw	r16, r30
    1fb8:	7a 2f       	mov	r23, r26
    1fba:	9f 01       	movw	r18, r30
    1fbc:	a1 11       	cpse	r26, r1
    1fbe:	03 c0       	rjmp	.+6      	; 0x1fc6 <conv_brk+0x66>
    1fc0:	80 e0       	ldi	r24, 0x00	; 0
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	7b c0       	rjmp	.+246    	; 0x20bc <conv_brk+0x15c>
    1fc6:	ae 35       	cpi	r26, 0x5E	; 94
    1fc8:	19 f4       	brne	.+6      	; 0x1fd0 <conv_brk+0x70>
    1fca:	41 15       	cp	r20, r1
    1fcc:	51 05       	cpc	r21, r1
    1fce:	59 f1       	breq	.+86     	; 0x2026 <conv_brk+0xc6>
    1fd0:	e9 2d       	mov	r30, r9
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	e4 17       	cp	r30, r20
    1fd6:	f5 07       	cpc	r31, r21
    1fd8:	3c f4       	brge	.+14     	; 0x1fe8 <conv_brk+0x88>
    1fda:	ad 35       	cpi	r26, 0x5D	; 93
    1fdc:	69 f1       	breq	.+90     	; 0x2038 <conv_brk+0xd8>
    1fde:	ad 32       	cpi	r26, 0x2D	; 45
    1fe0:	19 f4       	brne	.+6      	; 0x1fe8 <conv_brk+0x88>
    1fe2:	bb 23       	and	r27, r27
    1fe4:	19 f1       	breq	.+70     	; 0x202c <conv_brk+0xcc>
    1fe6:	03 c0       	rjmp	.+6      	; 0x1fee <conv_brk+0x8e>
    1fe8:	b1 11       	cpse	r27, r1
    1fea:	01 c0       	rjmp	.+2      	; 0x1fee <conv_brk+0x8e>
    1fec:	8a 2e       	mov	r8, r26
    1fee:	e7 2f       	mov	r30, r23
    1ff0:	e6 95       	lsr	r30
    1ff2:	e6 95       	lsr	r30
    1ff4:	e6 95       	lsr	r30
    1ff6:	86 01       	movw	r16, r12
    1ff8:	0e 0f       	add	r16, r30
    1ffa:	11 1d       	adc	r17, r1
    1ffc:	f8 01       	movw	r30, r16
    1ffe:	a7 2f       	mov	r26, r23
    2000:	a7 70       	andi	r26, 0x07	; 7
    2002:	8c 01       	movw	r16, r24
    2004:	02 c0       	rjmp	.+4      	; 0x200a <conv_brk+0xaa>
    2006:	00 0f       	add	r16, r16
    2008:	11 1f       	adc	r17, r17
    200a:	aa 95       	dec	r26
    200c:	e2 f7       	brpl	.-8      	; 0x2006 <conv_brk+0xa6>
    200e:	d8 01       	movw	r26, r16
    2010:	b0 81       	ld	r27, Z
    2012:	ba 2b       	or	r27, r26
    2014:	b0 83       	st	Z, r27
    2016:	78 15       	cp	r23, r8
    2018:	59 f0       	breq	.+22     	; 0x2030 <conv_brk+0xd0>
    201a:	78 15       	cp	r23, r8
    201c:	10 f4       	brcc	.+4      	; 0x2022 <conv_brk+0xc2>
    201e:	7f 5f       	subi	r23, 0xFF	; 255
    2020:	e6 cf       	rjmp	.-52     	; 0x1fee <conv_brk+0x8e>
    2022:	71 50       	subi	r23, 0x01	; 1
    2024:	e4 cf       	rjmp	.-56     	; 0x1fee <conv_brk+0x8e>
    2026:	99 24       	eor	r9, r9
    2028:	93 94       	inc	r9
    202a:	03 c0       	rjmp	.+6      	; 0x2032 <conv_brk+0xd2>
    202c:	b1 e0       	ldi	r27, 0x01	; 1
    202e:	01 c0       	rjmp	.+2      	; 0x2032 <conv_brk+0xd2>
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	4f 5f       	subi	r20, 0xFF	; 255
    2034:	5f 4f       	sbci	r21, 0xFF	; 255
    2036:	ba cf       	rjmp	.-140    	; 0x1fac <conv_brk+0x4c>
    2038:	bb 23       	and	r27, r27
    203a:	19 f0       	breq	.+6      	; 0x2042 <conv_brk+0xe2>
    203c:	8e 81       	ldd	r24, Y+6	; 0x06
    203e:	80 62       	ori	r24, 0x20	; 32
    2040:	8e 83       	std	Y+6, r24	; 0x06
    2042:	91 10       	cpse	r9, r1
    2044:	03 c0       	rjmp	.+6      	; 0x204c <conv_brk+0xec>
    2046:	99 24       	eor	r9, r9
    2048:	93 94       	inc	r9
    204a:	15 c0       	rjmp	.+42     	; 0x2076 <conv_brk+0x116>
    204c:	f6 01       	movw	r30, r12
    204e:	ce 01       	movw	r24, r28
    2050:	81 96       	adiw	r24, 0x21	; 33
    2052:	20 81       	ld	r18, Z
    2054:	20 95       	com	r18
    2056:	21 93       	st	Z+, r18
    2058:	e8 17       	cp	r30, r24
    205a:	f9 07       	cpc	r31, r25
    205c:	d1 f7       	brne	.-12     	; 0x2052 <conv_brk+0xf2>
    205e:	f3 cf       	rjmp	.-26     	; 0x2046 <conv_brk+0xe6>
    2060:	e1 14       	cp	r14, r1
    2062:	f1 04       	cpc	r15, r1
    2064:	29 f0       	breq	.+10     	; 0x2070 <conv_brk+0x110>
    2066:	d7 01       	movw	r26, r14
    2068:	8c 93       	st	X, r24
    206a:	f7 01       	movw	r30, r14
    206c:	31 96       	adiw	r30, 0x01	; 1
    206e:	7f 01       	movw	r14, r30
    2070:	61 50       	subi	r22, 0x01	; 1
    2072:	f1 f0       	breq	.+60     	; 0x20b0 <conv_brk+0x150>
    2074:	91 2c       	mov	r9, r1
    2076:	c5 01       	movw	r24, r10
    2078:	69 a3       	std	Y+33, r22	; 0x21
    207a:	b5 d2       	rcall	.+1386   	; 0x25e6 <fgetc>
    207c:	69 a1       	ldd	r22, Y+33	; 0x21
    207e:	97 fd       	sbrc	r25, 7
    2080:	15 c0       	rjmp	.+42     	; 0x20ac <conv_brk+0x14c>
    2082:	28 2f       	mov	r18, r24
    2084:	26 95       	lsr	r18
    2086:	26 95       	lsr	r18
    2088:	26 95       	lsr	r18
    208a:	f6 01       	movw	r30, r12
    208c:	e2 0f       	add	r30, r18
    208e:	f1 1d       	adc	r31, r1
    2090:	20 81       	ld	r18, Z
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	ac 01       	movw	r20, r24
    2096:	47 70       	andi	r20, 0x07	; 7
    2098:	55 27       	eor	r21, r21
    209a:	02 c0       	rjmp	.+4      	; 0x20a0 <conv_brk+0x140>
    209c:	35 95       	asr	r19
    209e:	27 95       	ror	r18
    20a0:	4a 95       	dec	r20
    20a2:	e2 f7       	brpl	.-8      	; 0x209c <conv_brk+0x13c>
    20a4:	20 fd       	sbrc	r18, 0
    20a6:	dc cf       	rjmp	.-72     	; 0x2060 <conv_brk+0x100>
    20a8:	b5 01       	movw	r22, r10
    20aa:	db d2       	rcall	.+1462   	; 0x2662 <ungetc>
    20ac:	91 10       	cpse	r9, r1
    20ae:	88 cf       	rjmp	.-240    	; 0x1fc0 <conv_brk+0x60>
    20b0:	e1 14       	cp	r14, r1
    20b2:	f1 04       	cpc	r15, r1
    20b4:	11 f0       	breq	.+4      	; 0x20ba <conv_brk+0x15a>
    20b6:	d7 01       	movw	r26, r14
    20b8:	1c 92       	st	X, r1
    20ba:	c8 01       	movw	r24, r16
    20bc:	a1 96       	adiw	r28, 0x21	; 33
    20be:	cd bf       	out	0x3d, r28	; 61
    20c0:	de bf       	out	0x3e, r29	; 62
    20c2:	df 91       	pop	r29
    20c4:	cf 91       	pop	r28
    20c6:	1f 91       	pop	r17
    20c8:	0f 91       	pop	r16
    20ca:	ff 90       	pop	r15
    20cc:	ef 90       	pop	r14
    20ce:	df 90       	pop	r13
    20d0:	cf 90       	pop	r12
    20d2:	bf 90       	pop	r11
    20d4:	af 90       	pop	r10
    20d6:	9f 90       	pop	r9
    20d8:	8f 90       	pop	r8
    20da:	7f 90       	pop	r7
    20dc:	08 95       	ret

000020de <vfscanf>:
    20de:	4f 92       	push	r4
    20e0:	5f 92       	push	r5
    20e2:	7f 92       	push	r7
    20e4:	8f 92       	push	r8
    20e6:	9f 92       	push	r9
    20e8:	af 92       	push	r10
    20ea:	bf 92       	push	r11
    20ec:	cf 92       	push	r12
    20ee:	df 92       	push	r13
    20f0:	ef 92       	push	r14
    20f2:	ff 92       	push	r15
    20f4:	0f 93       	push	r16
    20f6:	1f 93       	push	r17
    20f8:	cf 93       	push	r28
    20fa:	df 93       	push	r29
    20fc:	1f 92       	push	r1
    20fe:	cd b7       	in	r28, 0x3d	; 61
    2100:	de b7       	in	r29, 0x3e	; 62
    2102:	8c 01       	movw	r16, r24
    2104:	2b 01       	movw	r4, r22
    2106:	7a 01       	movw	r14, r20
    2108:	fc 01       	movw	r30, r24
    210a:	16 82       	std	Z+6, r1	; 0x06
    210c:	17 82       	std	Z+7, r1	; 0x07
    210e:	a1 2c       	mov	r10, r1
    2110:	f8 01       	movw	r30, r16
    2112:	d3 80       	ldd	r13, Z+3	; 0x03
    2114:	f2 01       	movw	r30, r4
    2116:	d3 fc       	sbrc	r13, 3
    2118:	85 91       	lpm	r24, Z+
    211a:	d3 fe       	sbrs	r13, 3
    211c:	81 91       	ld	r24, Z+
    211e:	38 2f       	mov	r19, r24
    2120:	2f 01       	movw	r4, r30
    2122:	88 23       	and	r24, r24
    2124:	09 f4       	brne	.+2      	; 0x2128 <vfscanf+0x4a>
    2126:	ee c0       	rjmp	.+476    	; 0x2304 <vfscanf+0x226>
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	39 83       	std	Y+1, r19	; 0x01
    212c:	42 d2       	rcall	.+1156   	; 0x25b2 <isspace>
    212e:	39 81       	ldd	r19, Y+1	; 0x01
    2130:	89 2b       	or	r24, r25
    2132:	19 f0       	breq	.+6      	; 0x213a <vfscanf+0x5c>
    2134:	c8 01       	movw	r24, r16
    2136:	75 de       	rcall	.-790    	; 0x1e22 <skip_spaces>
    2138:	eb cf       	rjmp	.-42     	; 0x2110 <vfscanf+0x32>
    213a:	35 32       	cpi	r19, 0x25	; 37
    213c:	41 f4       	brne	.+16     	; 0x214e <vfscanf+0x70>
    213e:	f2 01       	movw	r30, r4
    2140:	d3 fc       	sbrc	r13, 3
    2142:	35 91       	lpm	r19, Z+
    2144:	d3 fe       	sbrs	r13, 3
    2146:	31 91       	ld	r19, Z+
    2148:	2f 01       	movw	r4, r30
    214a:	35 32       	cpi	r19, 0x25	; 37
    214c:	59 f4       	brne	.+22     	; 0x2164 <vfscanf+0x86>
    214e:	c8 01       	movw	r24, r16
    2150:	39 83       	std	Y+1, r19	; 0x01
    2152:	49 d2       	rcall	.+1170   	; 0x25e6 <fgetc>
    2154:	39 81       	ldd	r19, Y+1	; 0x01
    2156:	97 fd       	sbrc	r25, 7
    2158:	d3 c0       	rjmp	.+422    	; 0x2300 <vfscanf+0x222>
    215a:	38 17       	cp	r19, r24
    215c:	c9 f2       	breq	.-78     	; 0x2110 <vfscanf+0x32>
    215e:	b8 01       	movw	r22, r16
    2160:	80 d2       	rcall	.+1280   	; 0x2662 <ungetc>
    2162:	d0 c0       	rjmp	.+416    	; 0x2304 <vfscanf+0x226>
    2164:	3a 32       	cpi	r19, 0x2A	; 42
    2166:	41 f4       	brne	.+16     	; 0x2178 <vfscanf+0x9a>
    2168:	d3 fc       	sbrc	r13, 3
    216a:	35 91       	lpm	r19, Z+
    216c:	d3 fe       	sbrs	r13, 3
    216e:	31 91       	ld	r19, Z+
    2170:	2f 01       	movw	r4, r30
    2172:	bb 24       	eor	r11, r11
    2174:	b3 94       	inc	r11
    2176:	01 c0       	rjmp	.+2      	; 0x217a <vfscanf+0x9c>
    2178:	b1 2c       	mov	r11, r1
    217a:	71 2c       	mov	r7, r1
    217c:	20 ed       	ldi	r18, 0xD0	; 208
    217e:	23 0f       	add	r18, r19
    2180:	2a 30       	cpi	r18, 0x0A	; 10
    2182:	88 f4       	brcc	.+34     	; 0x21a6 <vfscanf+0xc8>
    2184:	fb 2d       	mov	r31, r11
    2186:	f2 60       	ori	r31, 0x02	; 2
    2188:	bf 2e       	mov	r11, r31
    218a:	67 2d       	mov	r22, r7
    218c:	70 e0       	ldi	r23, 0x00	; 0
    218e:	80 e0       	ldi	r24, 0x00	; 0
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	40 e2       	ldi	r20, 0x20	; 32
    2194:	26 de       	rcall	.-948    	; 0x1de2 <mulacc>
    2196:	76 2e       	mov	r7, r22
    2198:	f2 01       	movw	r30, r4
    219a:	d3 fc       	sbrc	r13, 3
    219c:	35 91       	lpm	r19, Z+
    219e:	d3 fe       	sbrs	r13, 3
    21a0:	31 91       	ld	r19, Z+
    21a2:	2f 01       	movw	r4, r30
    21a4:	eb cf       	rjmp	.-42     	; 0x217c <vfscanf+0x9e>
    21a6:	b1 fe       	sbrs	r11, 1
    21a8:	03 c0       	rjmp	.+6      	; 0x21b0 <vfscanf+0xd2>
    21aa:	71 10       	cpse	r7, r1
    21ac:	03 c0       	rjmp	.+6      	; 0x21b4 <vfscanf+0xd6>
    21ae:	aa c0       	rjmp	.+340    	; 0x2304 <vfscanf+0x226>
    21b0:	77 24       	eor	r7, r7
    21b2:	7a 94       	dec	r7
    21b4:	38 36       	cpi	r19, 0x68	; 104
    21b6:	19 f0       	breq	.+6      	; 0x21be <vfscanf+0xe0>
    21b8:	3c 36       	cpi	r19, 0x6C	; 108
    21ba:	61 f0       	breq	.+24     	; 0x21d4 <vfscanf+0xf6>
    21bc:	14 c0       	rjmp	.+40     	; 0x21e6 <vfscanf+0x108>
    21be:	f2 01       	movw	r30, r4
    21c0:	d3 fc       	sbrc	r13, 3
    21c2:	35 91       	lpm	r19, Z+
    21c4:	d3 fe       	sbrs	r13, 3
    21c6:	31 91       	ld	r19, Z+
    21c8:	2f 01       	movw	r4, r30
    21ca:	38 36       	cpi	r19, 0x68	; 104
    21cc:	61 f4       	brne	.+24     	; 0x21e6 <vfscanf+0x108>
    21ce:	fb 2d       	mov	r31, r11
    21d0:	f8 60       	ori	r31, 0x08	; 8
    21d2:	bf 2e       	mov	r11, r31
    21d4:	8b 2d       	mov	r24, r11
    21d6:	84 60       	ori	r24, 0x04	; 4
    21d8:	b8 2e       	mov	r11, r24
    21da:	f2 01       	movw	r30, r4
    21dc:	d3 fc       	sbrc	r13, 3
    21de:	35 91       	lpm	r19, Z+
    21e0:	d3 fe       	sbrs	r13, 3
    21e2:	31 91       	ld	r19, Z+
    21e4:	2f 01       	movw	r4, r30
    21e6:	33 23       	and	r19, r19
    21e8:	09 f4       	brne	.+2      	; 0x21ec <vfscanf+0x10e>
    21ea:	8c c0       	rjmp	.+280    	; 0x2304 <vfscanf+0x226>
    21ec:	63 2f       	mov	r22, r19
    21ee:	70 e0       	ldi	r23, 0x00	; 0
    21f0:	8e ef       	ldi	r24, 0xFE	; 254
    21f2:	92 e0       	ldi	r25, 0x02	; 2
    21f4:	39 83       	std	Y+1, r19	; 0x01
    21f6:	e5 d1       	rcall	.+970    	; 0x25c2 <strchr_P>
    21f8:	39 81       	ldd	r19, Y+1	; 0x01
    21fa:	89 2b       	or	r24, r25
    21fc:	09 f4       	brne	.+2      	; 0x2200 <vfscanf+0x122>
    21fe:	82 c0       	rjmp	.+260    	; 0x2304 <vfscanf+0x226>
    2200:	b0 fc       	sbrc	r11, 0
    2202:	07 c0       	rjmp	.+14     	; 0x2212 <vfscanf+0x134>
    2204:	f7 01       	movw	r30, r14
    2206:	c0 80       	ld	r12, Z
    2208:	d1 80       	ldd	r13, Z+1	; 0x01
    220a:	c7 01       	movw	r24, r14
    220c:	02 96       	adiw	r24, 0x02	; 2
    220e:	7c 01       	movw	r14, r24
    2210:	02 c0       	rjmp	.+4      	; 0x2216 <vfscanf+0x138>
    2212:	c1 2c       	mov	r12, r1
    2214:	d1 2c       	mov	r13, r1
    2216:	3e 36       	cpi	r19, 0x6E	; 110
    2218:	49 f4       	brne	.+18     	; 0x222c <vfscanf+0x14e>
    221a:	f8 01       	movw	r30, r16
    221c:	46 81       	ldd	r20, Z+6	; 0x06
    221e:	57 81       	ldd	r21, Z+7	; 0x07
    2220:	60 e0       	ldi	r22, 0x00	; 0
    2222:	70 e0       	ldi	r23, 0x00	; 0
    2224:	2b 2d       	mov	r18, r11
    2226:	c6 01       	movw	r24, r12
    2228:	d0 dd       	rcall	.-1120   	; 0x1dca <putval>
    222a:	72 cf       	rjmp	.-284    	; 0x2110 <vfscanf+0x32>
    222c:	33 36       	cpi	r19, 0x63	; 99
    222e:	99 f4       	brne	.+38     	; 0x2256 <vfscanf+0x178>
    2230:	b1 fc       	sbrc	r11, 1
    2232:	02 c0       	rjmp	.+4      	; 0x2238 <vfscanf+0x15a>
    2234:	77 24       	eor	r7, r7
    2236:	73 94       	inc	r7
    2238:	c8 01       	movw	r24, r16
    223a:	d5 d1       	rcall	.+938    	; 0x25e6 <fgetc>
    223c:	97 fd       	sbrc	r25, 7
    223e:	60 c0       	rjmp	.+192    	; 0x2300 <vfscanf+0x222>
    2240:	c1 14       	cp	r12, r1
    2242:	d1 04       	cpc	r13, r1
    2244:	29 f0       	breq	.+10     	; 0x2250 <vfscanf+0x172>
    2246:	f6 01       	movw	r30, r12
    2248:	80 83       	st	Z, r24
    224a:	c6 01       	movw	r24, r12
    224c:	01 96       	adiw	r24, 0x01	; 1
    224e:	6c 01       	movw	r12, r24
    2250:	7a 94       	dec	r7
    2252:	91 f7       	brne	.-28     	; 0x2238 <vfscanf+0x15a>
    2254:	51 c0       	rjmp	.+162    	; 0x22f8 <vfscanf+0x21a>
    2256:	3b 35       	cpi	r19, 0x5B	; 91
    2258:	51 f4       	brne	.+20     	; 0x226e <vfscanf+0x190>
    225a:	92 01       	movw	r18, r4
    225c:	a6 01       	movw	r20, r12
    225e:	67 2d       	mov	r22, r7
    2260:	c8 01       	movw	r24, r16
    2262:	7e de       	rcall	.-772    	; 0x1f60 <conv_brk>
    2264:	2c 01       	movw	r4, r24
    2266:	00 97       	sbiw	r24, 0x00	; 0
    2268:	09 f0       	breq	.+2      	; 0x226c <vfscanf+0x18e>
    226a:	46 c0       	rjmp	.+140    	; 0x22f8 <vfscanf+0x21a>
    226c:	40 c0       	rjmp	.+128    	; 0x22ee <vfscanf+0x210>
    226e:	c8 01       	movw	r24, r16
    2270:	39 83       	std	Y+1, r19	; 0x01
    2272:	d7 dd       	rcall	.-1106   	; 0x1e22 <skip_spaces>
    2274:	39 81       	ldd	r19, Y+1	; 0x01
    2276:	97 fd       	sbrc	r25, 7
    2278:	43 c0       	rjmp	.+134    	; 0x2300 <vfscanf+0x222>
    227a:	3f 36       	cpi	r19, 0x6F	; 111
    227c:	51 f1       	breq	.+84     	; 0x22d2 <vfscanf+0x1f4>
    227e:	28 f4       	brcc	.+10     	; 0x228a <vfscanf+0x1ac>
    2280:	34 36       	cpi	r19, 0x64	; 100
    2282:	19 f1       	breq	.+70     	; 0x22ca <vfscanf+0x1ec>
    2284:	39 36       	cpi	r19, 0x69	; 105
    2286:	61 f1       	breq	.+88     	; 0x22e0 <vfscanf+0x202>
    2288:	28 c0       	rjmp	.+80     	; 0x22da <vfscanf+0x1fc>
    228a:	33 37       	cpi	r19, 0x73	; 115
    228c:	69 f0       	breq	.+26     	; 0x22a8 <vfscanf+0x1ca>
    228e:	35 37       	cpi	r19, 0x75	; 117
    2290:	e1 f0       	breq	.+56     	; 0x22ca <vfscanf+0x1ec>
    2292:	23 c0       	rjmp	.+70     	; 0x22da <vfscanf+0x1fc>
    2294:	c1 14       	cp	r12, r1
    2296:	d1 04       	cpc	r13, r1
    2298:	29 f0       	breq	.+10     	; 0x22a4 <vfscanf+0x1c6>
    229a:	f6 01       	movw	r30, r12
    229c:	80 82       	st	Z, r8
    229e:	c6 01       	movw	r24, r12
    22a0:	01 96       	adiw	r24, 0x01	; 1
    22a2:	6c 01       	movw	r12, r24
    22a4:	7a 94       	dec	r7
    22a6:	59 f0       	breq	.+22     	; 0x22be <vfscanf+0x1e0>
    22a8:	c8 01       	movw	r24, r16
    22aa:	9d d1       	rcall	.+826    	; 0x25e6 <fgetc>
    22ac:	4c 01       	movw	r8, r24
    22ae:	97 fd       	sbrc	r25, 7
    22b0:	06 c0       	rjmp	.+12     	; 0x22be <vfscanf+0x1e0>
    22b2:	7f d1       	rcall	.+766    	; 0x25b2 <isspace>
    22b4:	89 2b       	or	r24, r25
    22b6:	71 f3       	breq	.-36     	; 0x2294 <vfscanf+0x1b6>
    22b8:	b8 01       	movw	r22, r16
    22ba:	c4 01       	movw	r24, r8
    22bc:	d2 d1       	rcall	.+932    	; 0x2662 <ungetc>
    22be:	c1 14       	cp	r12, r1
    22c0:	d1 04       	cpc	r13, r1
    22c2:	d1 f0       	breq	.+52     	; 0x22f8 <vfscanf+0x21a>
    22c4:	f6 01       	movw	r30, r12
    22c6:	10 82       	st	Z, r1
    22c8:	17 c0       	rjmp	.+46     	; 0x22f8 <vfscanf+0x21a>
    22ca:	fb 2d       	mov	r31, r11
    22cc:	f0 62       	ori	r31, 0x20	; 32
    22ce:	bf 2e       	mov	r11, r31
    22d0:	07 c0       	rjmp	.+14     	; 0x22e0 <vfscanf+0x202>
    22d2:	8b 2d       	mov	r24, r11
    22d4:	80 61       	ori	r24, 0x10	; 16
    22d6:	b8 2e       	mov	r11, r24
    22d8:	03 c0       	rjmp	.+6      	; 0x22e0 <vfscanf+0x202>
    22da:	9b 2d       	mov	r25, r11
    22dc:	90 64       	ori	r25, 0x40	; 64
    22de:	b9 2e       	mov	r11, r25
    22e0:	2b 2d       	mov	r18, r11
    22e2:	a6 01       	movw	r20, r12
    22e4:	67 2d       	mov	r22, r7
    22e6:	c8 01       	movw	r24, r16
    22e8:	b2 dd       	rcall	.-1180   	; 0x1e4e <conv_int>
    22ea:	81 11       	cpse	r24, r1
    22ec:	05 c0       	rjmp	.+10     	; 0x22f8 <vfscanf+0x21a>
    22ee:	f8 01       	movw	r30, r16
    22f0:	83 81       	ldd	r24, Z+3	; 0x03
    22f2:	80 73       	andi	r24, 0x30	; 48
    22f4:	29 f4       	brne	.+10     	; 0x2300 <vfscanf+0x222>
    22f6:	06 c0       	rjmp	.+12     	; 0x2304 <vfscanf+0x226>
    22f8:	b0 fc       	sbrc	r11, 0
    22fa:	0a cf       	rjmp	.-492    	; 0x2110 <vfscanf+0x32>
    22fc:	a3 94       	inc	r10
    22fe:	08 cf       	rjmp	.-496    	; 0x2110 <vfscanf+0x32>
    2300:	aa 20       	and	r10, r10
    2302:	19 f0       	breq	.+6      	; 0x230a <vfscanf+0x22c>
    2304:	8a 2d       	mov	r24, r10
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	02 c0       	rjmp	.+4      	; 0x230e <vfscanf+0x230>
    230a:	8f ef       	ldi	r24, 0xFF	; 255
    230c:	9f ef       	ldi	r25, 0xFF	; 255
    230e:	0f 90       	pop	r0
    2310:	df 91       	pop	r29
    2312:	cf 91       	pop	r28
    2314:	1f 91       	pop	r17
    2316:	0f 91       	pop	r16
    2318:	ff 90       	pop	r15
    231a:	ef 90       	pop	r14
    231c:	df 90       	pop	r13
    231e:	cf 90       	pop	r12
    2320:	bf 90       	pop	r11
    2322:	af 90       	pop	r10
    2324:	9f 90       	pop	r9
    2326:	8f 90       	pop	r8
    2328:	7f 90       	pop	r7
    232a:	5f 90       	pop	r5
    232c:	4f 90       	pop	r4
    232e:	08 95       	ret

00002330 <calloc>:
    2330:	0f 93       	push	r16
    2332:	1f 93       	push	r17
    2334:	cf 93       	push	r28
    2336:	df 93       	push	r29
    2338:	86 9f       	mul	r24, r22
    233a:	80 01       	movw	r16, r0
    233c:	87 9f       	mul	r24, r23
    233e:	10 0d       	add	r17, r0
    2340:	96 9f       	mul	r25, r22
    2342:	10 0d       	add	r17, r0
    2344:	11 24       	eor	r1, r1
    2346:	c8 01       	movw	r24, r16
    2348:	0d d0       	rcall	.+26     	; 0x2364 <malloc>
    234a:	ec 01       	movw	r28, r24
    234c:	00 97       	sbiw	r24, 0x00	; 0
    234e:	21 f0       	breq	.+8      	; 0x2358 <calloc+0x28>
    2350:	a8 01       	movw	r20, r16
    2352:	60 e0       	ldi	r22, 0x00	; 0
    2354:	70 e0       	ldi	r23, 0x00	; 0
    2356:	40 d1       	rcall	.+640    	; 0x25d8 <memset>
    2358:	ce 01       	movw	r24, r28
    235a:	df 91       	pop	r29
    235c:	cf 91       	pop	r28
    235e:	1f 91       	pop	r17
    2360:	0f 91       	pop	r16
    2362:	08 95       	ret

00002364 <malloc>:
    2364:	cf 93       	push	r28
    2366:	df 93       	push	r29
    2368:	82 30       	cpi	r24, 0x02	; 2
    236a:	91 05       	cpc	r25, r1
    236c:	10 f4       	brcc	.+4      	; 0x2372 <malloc+0xe>
    236e:	82 e0       	ldi	r24, 0x02	; 2
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	e0 91 30 20 	lds	r30, 0x2030
    2376:	f0 91 31 20 	lds	r31, 0x2031
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	a0 e0       	ldi	r26, 0x00	; 0
    2380:	b0 e0       	ldi	r27, 0x00	; 0
    2382:	30 97       	sbiw	r30, 0x00	; 0
    2384:	39 f1       	breq	.+78     	; 0x23d4 <malloc+0x70>
    2386:	40 81       	ld	r20, Z
    2388:	51 81       	ldd	r21, Z+1	; 0x01
    238a:	48 17       	cp	r20, r24
    238c:	59 07       	cpc	r21, r25
    238e:	b8 f0       	brcs	.+46     	; 0x23be <malloc+0x5a>
    2390:	48 17       	cp	r20, r24
    2392:	59 07       	cpc	r21, r25
    2394:	71 f4       	brne	.+28     	; 0x23b2 <malloc+0x4e>
    2396:	82 81       	ldd	r24, Z+2	; 0x02
    2398:	93 81       	ldd	r25, Z+3	; 0x03
    239a:	10 97       	sbiw	r26, 0x00	; 0
    239c:	29 f0       	breq	.+10     	; 0x23a8 <malloc+0x44>
    239e:	12 96       	adiw	r26, 0x02	; 2
    23a0:	8d 93       	st	X+, r24
    23a2:	9c 93       	st	X, r25
    23a4:	13 97       	sbiw	r26, 0x03	; 3
    23a6:	2c c0       	rjmp	.+88     	; 0x2400 <malloc+0x9c>
    23a8:	80 93 30 20 	sts	0x2030, r24
    23ac:	90 93 31 20 	sts	0x2031, r25
    23b0:	27 c0       	rjmp	.+78     	; 0x2400 <malloc+0x9c>
    23b2:	21 15       	cp	r18, r1
    23b4:	31 05       	cpc	r19, r1
    23b6:	31 f0       	breq	.+12     	; 0x23c4 <malloc+0x60>
    23b8:	42 17       	cp	r20, r18
    23ba:	53 07       	cpc	r21, r19
    23bc:	18 f0       	brcs	.+6      	; 0x23c4 <malloc+0x60>
    23be:	a9 01       	movw	r20, r18
    23c0:	db 01       	movw	r26, r22
    23c2:	01 c0       	rjmp	.+2      	; 0x23c6 <malloc+0x62>
    23c4:	ef 01       	movw	r28, r30
    23c6:	9a 01       	movw	r18, r20
    23c8:	bd 01       	movw	r22, r26
    23ca:	df 01       	movw	r26, r30
    23cc:	02 80       	ldd	r0, Z+2	; 0x02
    23ce:	f3 81       	ldd	r31, Z+3	; 0x03
    23d0:	e0 2d       	mov	r30, r0
    23d2:	d7 cf       	rjmp	.-82     	; 0x2382 <malloc+0x1e>
    23d4:	21 15       	cp	r18, r1
    23d6:	31 05       	cpc	r19, r1
    23d8:	f9 f0       	breq	.+62     	; 0x2418 <malloc+0xb4>
    23da:	28 1b       	sub	r18, r24
    23dc:	39 0b       	sbc	r19, r25
    23de:	24 30       	cpi	r18, 0x04	; 4
    23e0:	31 05       	cpc	r19, r1
    23e2:	80 f4       	brcc	.+32     	; 0x2404 <malloc+0xa0>
    23e4:	8a 81       	ldd	r24, Y+2	; 0x02
    23e6:	9b 81       	ldd	r25, Y+3	; 0x03
    23e8:	61 15       	cp	r22, r1
    23ea:	71 05       	cpc	r23, r1
    23ec:	21 f0       	breq	.+8      	; 0x23f6 <malloc+0x92>
    23ee:	fb 01       	movw	r30, r22
    23f0:	82 83       	std	Z+2, r24	; 0x02
    23f2:	93 83       	std	Z+3, r25	; 0x03
    23f4:	04 c0       	rjmp	.+8      	; 0x23fe <malloc+0x9a>
    23f6:	80 93 30 20 	sts	0x2030, r24
    23fa:	90 93 31 20 	sts	0x2031, r25
    23fe:	fe 01       	movw	r30, r28
    2400:	32 96       	adiw	r30, 0x02	; 2
    2402:	44 c0       	rjmp	.+136    	; 0x248c <malloc+0x128>
    2404:	fe 01       	movw	r30, r28
    2406:	e2 0f       	add	r30, r18
    2408:	f3 1f       	adc	r31, r19
    240a:	81 93       	st	Z+, r24
    240c:	91 93       	st	Z+, r25
    240e:	22 50       	subi	r18, 0x02	; 2
    2410:	31 09       	sbc	r19, r1
    2412:	28 83       	st	Y, r18
    2414:	39 83       	std	Y+1, r19	; 0x01
    2416:	3a c0       	rjmp	.+116    	; 0x248c <malloc+0x128>
    2418:	20 91 2e 20 	lds	r18, 0x202E
    241c:	30 91 2f 20 	lds	r19, 0x202F
    2420:	23 2b       	or	r18, r19
    2422:	41 f4       	brne	.+16     	; 0x2434 <malloc+0xd0>
    2424:	20 91 02 20 	lds	r18, 0x2002
    2428:	30 91 03 20 	lds	r19, 0x2003
    242c:	20 93 2e 20 	sts	0x202E, r18
    2430:	30 93 2f 20 	sts	0x202F, r19
    2434:	20 91 00 20 	lds	r18, 0x2000
    2438:	30 91 01 20 	lds	r19, 0x2001
    243c:	21 15       	cp	r18, r1
    243e:	31 05       	cpc	r19, r1
    2440:	41 f4       	brne	.+16     	; 0x2452 <malloc+0xee>
    2442:	2d b7       	in	r18, 0x3d	; 61
    2444:	3e b7       	in	r19, 0x3e	; 62
    2446:	40 91 04 20 	lds	r20, 0x2004
    244a:	50 91 05 20 	lds	r21, 0x2005
    244e:	24 1b       	sub	r18, r20
    2450:	35 0b       	sbc	r19, r21
    2452:	e0 91 2e 20 	lds	r30, 0x202E
    2456:	f0 91 2f 20 	lds	r31, 0x202F
    245a:	e2 17       	cp	r30, r18
    245c:	f3 07       	cpc	r31, r19
    245e:	a0 f4       	brcc	.+40     	; 0x2488 <malloc+0x124>
    2460:	2e 1b       	sub	r18, r30
    2462:	3f 0b       	sbc	r19, r31
    2464:	28 17       	cp	r18, r24
    2466:	39 07       	cpc	r19, r25
    2468:	78 f0       	brcs	.+30     	; 0x2488 <malloc+0x124>
    246a:	ac 01       	movw	r20, r24
    246c:	4e 5f       	subi	r20, 0xFE	; 254
    246e:	5f 4f       	sbci	r21, 0xFF	; 255
    2470:	24 17       	cp	r18, r20
    2472:	35 07       	cpc	r19, r21
    2474:	48 f0       	brcs	.+18     	; 0x2488 <malloc+0x124>
    2476:	4e 0f       	add	r20, r30
    2478:	5f 1f       	adc	r21, r31
    247a:	40 93 2e 20 	sts	0x202E, r20
    247e:	50 93 2f 20 	sts	0x202F, r21
    2482:	81 93       	st	Z+, r24
    2484:	91 93       	st	Z+, r25
    2486:	02 c0       	rjmp	.+4      	; 0x248c <malloc+0x128>
    2488:	e0 e0       	ldi	r30, 0x00	; 0
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	cf 01       	movw	r24, r30
    248e:	df 91       	pop	r29
    2490:	cf 91       	pop	r28
    2492:	08 95       	ret

00002494 <free>:
    2494:	cf 93       	push	r28
    2496:	df 93       	push	r29
    2498:	00 97       	sbiw	r24, 0x00	; 0
    249a:	09 f4       	brne	.+2      	; 0x249e <free+0xa>
    249c:	87 c0       	rjmp	.+270    	; 0x25ac <free+0x118>
    249e:	fc 01       	movw	r30, r24
    24a0:	32 97       	sbiw	r30, 0x02	; 2
    24a2:	12 82       	std	Z+2, r1	; 0x02
    24a4:	13 82       	std	Z+3, r1	; 0x03
    24a6:	c0 91 30 20 	lds	r28, 0x2030
    24aa:	d0 91 31 20 	lds	r29, 0x2031
    24ae:	20 97       	sbiw	r28, 0x00	; 0
    24b0:	81 f4       	brne	.+32     	; 0x24d2 <free+0x3e>
    24b2:	20 81       	ld	r18, Z
    24b4:	31 81       	ldd	r19, Z+1	; 0x01
    24b6:	28 0f       	add	r18, r24
    24b8:	39 1f       	adc	r19, r25
    24ba:	80 91 2e 20 	lds	r24, 0x202E
    24be:	90 91 2f 20 	lds	r25, 0x202F
    24c2:	82 17       	cp	r24, r18
    24c4:	93 07       	cpc	r25, r19
    24c6:	79 f5       	brne	.+94     	; 0x2526 <free+0x92>
    24c8:	e0 93 2e 20 	sts	0x202E, r30
    24cc:	f0 93 2f 20 	sts	0x202F, r31
    24d0:	6d c0       	rjmp	.+218    	; 0x25ac <free+0x118>
    24d2:	de 01       	movw	r26, r28
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	ae 17       	cp	r26, r30
    24da:	bf 07       	cpc	r27, r31
    24dc:	50 f4       	brcc	.+20     	; 0x24f2 <free+0x5e>
    24de:	12 96       	adiw	r26, 0x02	; 2
    24e0:	4d 91       	ld	r20, X+
    24e2:	5c 91       	ld	r21, X
    24e4:	13 97       	sbiw	r26, 0x03	; 3
    24e6:	9d 01       	movw	r18, r26
    24e8:	41 15       	cp	r20, r1
    24ea:	51 05       	cpc	r21, r1
    24ec:	09 f1       	breq	.+66     	; 0x2530 <free+0x9c>
    24ee:	da 01       	movw	r26, r20
    24f0:	f3 cf       	rjmp	.-26     	; 0x24d8 <free+0x44>
    24f2:	a2 83       	std	Z+2, r26	; 0x02
    24f4:	b3 83       	std	Z+3, r27	; 0x03
    24f6:	40 81       	ld	r20, Z
    24f8:	51 81       	ldd	r21, Z+1	; 0x01
    24fa:	84 0f       	add	r24, r20
    24fc:	95 1f       	adc	r25, r21
    24fe:	8a 17       	cp	r24, r26
    2500:	9b 07       	cpc	r25, r27
    2502:	71 f4       	brne	.+28     	; 0x2520 <free+0x8c>
    2504:	8d 91       	ld	r24, X+
    2506:	9c 91       	ld	r25, X
    2508:	11 97       	sbiw	r26, 0x01	; 1
    250a:	84 0f       	add	r24, r20
    250c:	95 1f       	adc	r25, r21
    250e:	02 96       	adiw	r24, 0x02	; 2
    2510:	80 83       	st	Z, r24
    2512:	91 83       	std	Z+1, r25	; 0x01
    2514:	12 96       	adiw	r26, 0x02	; 2
    2516:	8d 91       	ld	r24, X+
    2518:	9c 91       	ld	r25, X
    251a:	13 97       	sbiw	r26, 0x03	; 3
    251c:	82 83       	std	Z+2, r24	; 0x02
    251e:	93 83       	std	Z+3, r25	; 0x03
    2520:	21 15       	cp	r18, r1
    2522:	31 05       	cpc	r19, r1
    2524:	29 f4       	brne	.+10     	; 0x2530 <free+0x9c>
    2526:	e0 93 30 20 	sts	0x2030, r30
    252a:	f0 93 31 20 	sts	0x2031, r31
    252e:	3e c0       	rjmp	.+124    	; 0x25ac <free+0x118>
    2530:	d9 01       	movw	r26, r18
    2532:	12 96       	adiw	r26, 0x02	; 2
    2534:	ed 93       	st	X+, r30
    2536:	fc 93       	st	X, r31
    2538:	13 97       	sbiw	r26, 0x03	; 3
    253a:	4d 91       	ld	r20, X+
    253c:	5d 91       	ld	r21, X+
    253e:	a4 0f       	add	r26, r20
    2540:	b5 1f       	adc	r27, r21
    2542:	ea 17       	cp	r30, r26
    2544:	fb 07       	cpc	r31, r27
    2546:	79 f4       	brne	.+30     	; 0x2566 <free+0xd2>
    2548:	80 81       	ld	r24, Z
    254a:	91 81       	ldd	r25, Z+1	; 0x01
    254c:	84 0f       	add	r24, r20
    254e:	95 1f       	adc	r25, r21
    2550:	02 96       	adiw	r24, 0x02	; 2
    2552:	d9 01       	movw	r26, r18
    2554:	8d 93       	st	X+, r24
    2556:	9c 93       	st	X, r25
    2558:	11 97       	sbiw	r26, 0x01	; 1
    255a:	82 81       	ldd	r24, Z+2	; 0x02
    255c:	93 81       	ldd	r25, Z+3	; 0x03
    255e:	12 96       	adiw	r26, 0x02	; 2
    2560:	8d 93       	st	X+, r24
    2562:	9c 93       	st	X, r25
    2564:	13 97       	sbiw	r26, 0x03	; 3
    2566:	e0 e0       	ldi	r30, 0x00	; 0
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	8a 81       	ldd	r24, Y+2	; 0x02
    256c:	9b 81       	ldd	r25, Y+3	; 0x03
    256e:	00 97       	sbiw	r24, 0x00	; 0
    2570:	19 f0       	breq	.+6      	; 0x2578 <free+0xe4>
    2572:	fe 01       	movw	r30, r28
    2574:	ec 01       	movw	r28, r24
    2576:	f9 cf       	rjmp	.-14     	; 0x256a <free+0xd6>
    2578:	ce 01       	movw	r24, r28
    257a:	02 96       	adiw	r24, 0x02	; 2
    257c:	28 81       	ld	r18, Y
    257e:	39 81       	ldd	r19, Y+1	; 0x01
    2580:	82 0f       	add	r24, r18
    2582:	93 1f       	adc	r25, r19
    2584:	20 91 2e 20 	lds	r18, 0x202E
    2588:	30 91 2f 20 	lds	r19, 0x202F
    258c:	28 17       	cp	r18, r24
    258e:	39 07       	cpc	r19, r25
    2590:	69 f4       	brne	.+26     	; 0x25ac <free+0x118>
    2592:	30 97       	sbiw	r30, 0x00	; 0
    2594:	29 f4       	brne	.+10     	; 0x25a0 <free+0x10c>
    2596:	10 92 30 20 	sts	0x2030, r1
    259a:	10 92 31 20 	sts	0x2031, r1
    259e:	02 c0       	rjmp	.+4      	; 0x25a4 <free+0x110>
    25a0:	12 82       	std	Z+2, r1	; 0x02
    25a2:	13 82       	std	Z+3, r1	; 0x03
    25a4:	c0 93 2e 20 	sts	0x202E, r28
    25a8:	d0 93 2f 20 	sts	0x202F, r29
    25ac:	df 91       	pop	r29
    25ae:	cf 91       	pop	r28
    25b0:	08 95       	ret

000025b2 <isspace>:
    25b2:	91 11       	cpse	r25, r1
    25b4:	6f c0       	rjmp	.+222    	; 0x2694 <__ctype_isfalse>
    25b6:	80 32       	cpi	r24, 0x20	; 32
    25b8:	19 f0       	breq	.+6      	; 0x25c0 <isspace+0xe>
    25ba:	89 50       	subi	r24, 0x09	; 9
    25bc:	85 50       	subi	r24, 0x05	; 5
    25be:	d0 f7       	brcc	.-12     	; 0x25b4 <isspace+0x2>
    25c0:	08 95       	ret

000025c2 <strchr_P>:
    25c2:	fc 01       	movw	r30, r24
    25c4:	05 90       	lpm	r0, Z+
    25c6:	06 16       	cp	r0, r22
    25c8:	21 f0       	breq	.+8      	; 0x25d2 <strchr_P+0x10>
    25ca:	00 20       	and	r0, r0
    25cc:	d9 f7       	brne	.-10     	; 0x25c4 <strchr_P+0x2>
    25ce:	c0 01       	movw	r24, r0
    25d0:	08 95       	ret
    25d2:	31 97       	sbiw	r30, 0x01	; 1
    25d4:	cf 01       	movw	r24, r30
    25d6:	08 95       	ret

000025d8 <memset>:
    25d8:	dc 01       	movw	r26, r24
    25da:	01 c0       	rjmp	.+2      	; 0x25de <memset+0x6>
    25dc:	6d 93       	st	X+, r22
    25de:	41 50       	subi	r20, 0x01	; 1
    25e0:	50 40       	sbci	r21, 0x00	; 0
    25e2:	e0 f7       	brcc	.-8      	; 0x25dc <memset+0x4>
    25e4:	08 95       	ret

000025e6 <fgetc>:
    25e6:	cf 93       	push	r28
    25e8:	df 93       	push	r29
    25ea:	ec 01       	movw	r28, r24
    25ec:	2b 81       	ldd	r18, Y+3	; 0x03
    25ee:	20 ff       	sbrs	r18, 0
    25f0:	33 c0       	rjmp	.+102    	; 0x2658 <fgetc+0x72>
    25f2:	26 ff       	sbrs	r18, 6
    25f4:	0a c0       	rjmp	.+20     	; 0x260a <fgetc+0x24>
    25f6:	2f 7b       	andi	r18, 0xBF	; 191
    25f8:	2b 83       	std	Y+3, r18	; 0x03
    25fa:	8e 81       	ldd	r24, Y+6	; 0x06
    25fc:	9f 81       	ldd	r25, Y+7	; 0x07
    25fe:	01 96       	adiw	r24, 0x01	; 1
    2600:	8e 83       	std	Y+6, r24	; 0x06
    2602:	9f 83       	std	Y+7, r25	; 0x07
    2604:	8a 81       	ldd	r24, Y+2	; 0x02
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	29 c0       	rjmp	.+82     	; 0x265c <fgetc+0x76>
    260a:	22 ff       	sbrs	r18, 2
    260c:	0f c0       	rjmp	.+30     	; 0x262c <fgetc+0x46>
    260e:	e8 81       	ld	r30, Y
    2610:	f9 81       	ldd	r31, Y+1	; 0x01
    2612:	80 81       	ld	r24, Z
    2614:	99 27       	eor	r25, r25
    2616:	87 fd       	sbrc	r24, 7
    2618:	90 95       	com	r25
    261a:	00 97       	sbiw	r24, 0x00	; 0
    261c:	19 f4       	brne	.+6      	; 0x2624 <fgetc+0x3e>
    261e:	20 62       	ori	r18, 0x20	; 32
    2620:	2b 83       	std	Y+3, r18	; 0x03
    2622:	1a c0       	rjmp	.+52     	; 0x2658 <fgetc+0x72>
    2624:	31 96       	adiw	r30, 0x01	; 1
    2626:	e8 83       	st	Y, r30
    2628:	f9 83       	std	Y+1, r31	; 0x01
    262a:	0e c0       	rjmp	.+28     	; 0x2648 <fgetc+0x62>
    262c:	ea 85       	ldd	r30, Y+10	; 0x0a
    262e:	fb 85       	ldd	r31, Y+11	; 0x0b
    2630:	19 95       	eicall
    2632:	97 ff       	sbrs	r25, 7
    2634:	09 c0       	rjmp	.+18     	; 0x2648 <fgetc+0x62>
    2636:	2b 81       	ldd	r18, Y+3	; 0x03
    2638:	01 96       	adiw	r24, 0x01	; 1
    263a:	11 f4       	brne	.+4      	; 0x2640 <fgetc+0x5a>
    263c:	80 e1       	ldi	r24, 0x10	; 16
    263e:	01 c0       	rjmp	.+2      	; 0x2642 <fgetc+0x5c>
    2640:	80 e2       	ldi	r24, 0x20	; 32
    2642:	82 2b       	or	r24, r18
    2644:	8b 83       	std	Y+3, r24	; 0x03
    2646:	08 c0       	rjmp	.+16     	; 0x2658 <fgetc+0x72>
    2648:	2e 81       	ldd	r18, Y+6	; 0x06
    264a:	3f 81       	ldd	r19, Y+7	; 0x07
    264c:	2f 5f       	subi	r18, 0xFF	; 255
    264e:	3f 4f       	sbci	r19, 0xFF	; 255
    2650:	2e 83       	std	Y+6, r18	; 0x06
    2652:	3f 83       	std	Y+7, r19	; 0x07
    2654:	99 27       	eor	r25, r25
    2656:	02 c0       	rjmp	.+4      	; 0x265c <fgetc+0x76>
    2658:	8f ef       	ldi	r24, 0xFF	; 255
    265a:	9f ef       	ldi	r25, 0xFF	; 255
    265c:	df 91       	pop	r29
    265e:	cf 91       	pop	r28
    2660:	08 95       	ret

00002662 <ungetc>:
    2662:	fb 01       	movw	r30, r22
    2664:	23 81       	ldd	r18, Z+3	; 0x03
    2666:	20 ff       	sbrs	r18, 0
    2668:	12 c0       	rjmp	.+36     	; 0x268e <ungetc+0x2c>
    266a:	26 fd       	sbrc	r18, 6
    266c:	10 c0       	rjmp	.+32     	; 0x268e <ungetc+0x2c>
    266e:	8f 3f       	cpi	r24, 0xFF	; 255
    2670:	3f ef       	ldi	r19, 0xFF	; 255
    2672:	93 07       	cpc	r25, r19
    2674:	61 f0       	breq	.+24     	; 0x268e <ungetc+0x2c>
    2676:	82 83       	std	Z+2, r24	; 0x02
    2678:	2f 7d       	andi	r18, 0xDF	; 223
    267a:	20 64       	ori	r18, 0x40	; 64
    267c:	23 83       	std	Z+3, r18	; 0x03
    267e:	26 81       	ldd	r18, Z+6	; 0x06
    2680:	37 81       	ldd	r19, Z+7	; 0x07
    2682:	21 50       	subi	r18, 0x01	; 1
    2684:	31 09       	sbc	r19, r1
    2686:	26 83       	std	Z+6, r18	; 0x06
    2688:	37 83       	std	Z+7, r19	; 0x07
    268a:	99 27       	eor	r25, r25
    268c:	08 95       	ret
    268e:	8f ef       	ldi	r24, 0xFF	; 255
    2690:	9f ef       	ldi	r25, 0xFF	; 255
    2692:	08 95       	ret

00002694 <__ctype_isfalse>:
    2694:	99 27       	eor	r25, r25
    2696:	88 27       	eor	r24, r24

00002698 <__ctype_istrue>:
    2698:	08 95       	ret

0000269a <_exit>:
    269a:	f8 94       	cli

0000269c <__stop_program>:
    269c:	ff cf       	rjmp	.-2      	; 0x269c <__stop_program>
