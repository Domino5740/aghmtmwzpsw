
ADC_OnDMA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002910  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00802000  00002910  000029a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000276c  00802008  00802008  000029ac  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000029ac  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003e0  00000000  00000000  00002a08  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00009b74  00000000  00000000  00002de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000183c  00000000  00000000  0000c95c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000515b  00000000  00000000  0000e198  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001568  00000000  00000000  000132f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0002b718  00000000  00000000  0001485c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000048d6  00000000  00000000  0003ff74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003b8  00000000  00000000  00044850  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00002041  00000000  00000000  00044c08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7e c1       	rjmp	.+764    	; 0x2fe <__ctors_end>
       2:	00 00       	nop
       4:	9d c1       	rjmp	.+826    	; 0x340 <__bad_interrupt>
       6:	00 00       	nop
       8:	9b c1       	rjmp	.+822    	; 0x340 <__bad_interrupt>
       a:	00 00       	nop
       c:	99 c1       	rjmp	.+818    	; 0x340 <__bad_interrupt>
       e:	00 00       	nop
      10:	97 c1       	rjmp	.+814    	; 0x340 <__bad_interrupt>
      12:	00 00       	nop
      14:	95 c1       	rjmp	.+810    	; 0x340 <__bad_interrupt>
      16:	00 00       	nop
      18:	09 c2       	rjmp	.+1042   	; 0x42c <__vector_6>
      1a:	00 00       	nop
      1c:	2f c2       	rjmp	.+1118   	; 0x47c <__vector_7>
      1e:	00 00       	nop
      20:	55 c2       	rjmp	.+1194   	; 0x4cc <__vector_8>
      22:	00 00       	nop
      24:	7b c2       	rjmp	.+1270   	; 0x51c <__vector_9>
      26:	00 00       	nop
      28:	8b c1       	rjmp	.+790    	; 0x340 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	89 c1       	rjmp	.+786    	; 0x340 <__bad_interrupt>
      2e:	00 00       	nop
      30:	87 c1       	rjmp	.+782    	; 0x340 <__bad_interrupt>
      32:	00 00       	nop
      34:	85 c1       	rjmp	.+778    	; 0x340 <__bad_interrupt>
      36:	00 00       	nop
      38:	d2 c2       	rjmp	.+1444   	; 0x5de <__vector_14>
      3a:	00 00       	nop
      3c:	fd c2       	rjmp	.+1530   	; 0x638 <__vector_15>
      3e:	00 00       	nop
      40:	28 c3       	rjmp	.+1616   	; 0x692 <__vector_16>
      42:	00 00       	nop
      44:	53 c3       	rjmp	.+1702   	; 0x6ec <__vector_17>
      46:	00 00       	nop
      48:	7e c3       	rjmp	.+1788   	; 0x746 <__vector_18>
      4a:	00 00       	nop
      4c:	a9 c3       	rjmp	.+1874   	; 0x7a0 <__vector_19>
      4e:	00 00       	nop
      50:	d4 c3       	rjmp	.+1960   	; 0x7fa <__vector_20>
      52:	00 00       	nop
      54:	ff c3       	rjmp	.+2046   	; 0x854 <__vector_21>
      56:	00 00       	nop
      58:	2a c4       	rjmp	.+2132   	; 0x8ae <__vector_22>
      5a:	00 00       	nop
      5c:	55 c4       	rjmp	.+2218   	; 0x908 <__vector_23>
      5e:	00 00       	nop
      60:	6f c1       	rjmp	.+734    	; 0x340 <__bad_interrupt>
      62:	00 00       	nop
      64:	6d c1       	rjmp	.+730    	; 0x340 <__bad_interrupt>
      66:	00 00       	nop
      68:	6b c1       	rjmp	.+726    	; 0x340 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	69 c1       	rjmp	.+722    	; 0x340 <__bad_interrupt>
      6e:	00 00       	nop
      70:	67 c1       	rjmp	.+718    	; 0x340 <__bad_interrupt>
      72:	00 00       	nop
      74:	65 c1       	rjmp	.+714    	; 0x340 <__bad_interrupt>
      76:	00 00       	nop
      78:	63 c1       	rjmp	.+710    	; 0x340 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	61 c1       	rjmp	.+706    	; 0x340 <__bad_interrupt>
      7e:	00 00       	nop
      80:	5f c1       	rjmp	.+702    	; 0x340 <__bad_interrupt>
      82:	00 00       	nop
      84:	5d c1       	rjmp	.+698    	; 0x340 <__bad_interrupt>
      86:	00 00       	nop
      88:	5b c1       	rjmp	.+694    	; 0x340 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	59 c1       	rjmp	.+690    	; 0x340 <__bad_interrupt>
      8e:	00 00       	nop
      90:	57 c1       	rjmp	.+686    	; 0x340 <__bad_interrupt>
      92:	00 00       	nop
      94:	55 c1       	rjmp	.+682    	; 0x340 <__bad_interrupt>
      96:	00 00       	nop
      98:	53 c1       	rjmp	.+678    	; 0x340 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 a5 0c 	jmp	0x194a	; 0x194a <__vector_39>
      a0:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__vector_40>
      a4:	0c 94 09 0d 	jmp	0x1a12	; 0x1a12 <__vector_41>
      a8:	0c 94 3b 0d 	jmp	0x1a76	; 0x1a76 <__vector_42>
      ac:	49 c1       	rjmp	.+658    	; 0x340 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	47 c1       	rjmp	.+654    	; 0x340 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	45 c1       	rjmp	.+650    	; 0x340 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	43 c1       	rjmp	.+646    	; 0x340 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	14 c6       	rjmp	.+3112   	; 0xce6 <__vector_47>
      be:	00 00       	nop
      c0:	3f c6       	rjmp	.+3198   	; 0xd40 <__vector_48>
      c2:	00 00       	nop
      c4:	6a c6       	rjmp	.+3284   	; 0xd9a <__vector_49>
      c6:	00 00       	nop
      c8:	95 c6       	rjmp	.+3370   	; 0xdf4 <__vector_50>
      ca:	00 00       	nop
      cc:	c0 c6       	rjmp	.+3456   	; 0xe4e <__vector_51>
      ce:	00 00       	nop
      d0:	eb c6       	rjmp	.+3542   	; 0xea8 <__vector_52>
      d2:	00 00       	nop
      d4:	16 c7       	rjmp	.+3628   	; 0xf02 <__vector_53>
      d6:	00 00       	nop
      d8:	41 c7       	rjmp	.+3714   	; 0xf5c <__vector_54>
      da:	00 00       	nop
      dc:	6c c7       	rjmp	.+3800   	; 0xfb6 <__vector_55>
      de:	00 00       	nop
      e0:	97 c7       	rjmp	.+3886   	; 0x1010 <__vector_56>
      e2:	00 00       	nop
      e4:	2d c1       	rjmp	.+602    	; 0x340 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	2b c1       	rjmp	.+598    	; 0x340 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	29 c1       	rjmp	.+594    	; 0x340 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	27 c1       	rjmp	.+590    	; 0x340 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	25 c1       	rjmp	.+586    	; 0x340 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	23 c1       	rjmp	.+582    	; 0x340 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	21 c1       	rjmp	.+578    	; 0x340 <__bad_interrupt>
      fe:	00 00       	nop
     100:	1f c1       	rjmp	.+574    	; 0x340 <__bad_interrupt>
     102:	00 00       	nop
     104:	1d c1       	rjmp	.+570    	; 0x340 <__bad_interrupt>
     106:	00 00       	nop
     108:	1b c1       	rjmp	.+566    	; 0x340 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	19 c1       	rjmp	.+562    	; 0x340 <__bad_interrupt>
     10e:	00 00       	nop
     110:	17 c1       	rjmp	.+558    	; 0x340 <__bad_interrupt>
     112:	00 00       	nop
     114:	15 c1       	rjmp	.+554    	; 0x340 <__bad_interrupt>
     116:	00 00       	nop
     118:	13 c1       	rjmp	.+550    	; 0x340 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	0c 94 dd 0b 	jmp	0x17ba	; 0x17ba <__vector_71>
     120:	0c 94 0f 0c 	jmp	0x181e	; 0x181e <__vector_72>
     124:	0c 94 41 0c 	jmp	0x1882	; 0x1882 <__vector_73>
     128:	0c 94 73 0c 	jmp	0x18e6	; 0x18e6 <__vector_74>
     12c:	09 c1       	rjmp	.+530    	; 0x340 <__bad_interrupt>
     12e:	00 00       	nop
     130:	07 c1       	rjmp	.+526    	; 0x340 <__bad_interrupt>
     132:	00 00       	nop
     134:	16 c4       	rjmp	.+2092   	; 0x962 <__vector_77>
     136:	00 00       	nop
     138:	41 c4       	rjmp	.+2178   	; 0x9bc <__vector_78>
     13a:	00 00       	nop
     13c:	6c c4       	rjmp	.+2264   	; 0xa16 <__vector_79>
     13e:	00 00       	nop
     140:	97 c4       	rjmp	.+2350   	; 0xa70 <__vector_80>
     142:	00 00       	nop
     144:	c2 c4       	rjmp	.+2436   	; 0xaca <__vector_81>
     146:	00 00       	nop
     148:	ed c4       	rjmp	.+2522   	; 0xb24 <__vector_82>
     14a:	00 00       	nop
     14c:	18 c5       	rjmp	.+2608   	; 0xb7e <__vector_83>
     14e:	00 00       	nop
     150:	43 c5       	rjmp	.+2694   	; 0xbd8 <__vector_84>
     152:	00 00       	nop
     154:	6e c5       	rjmp	.+2780   	; 0xc32 <__vector_85>
     156:	00 00       	nop
     158:	99 c5       	rjmp	.+2866   	; 0xc8c <__vector_86>
     15a:	00 00       	nop
     15c:	f1 c0       	rjmp	.+482    	; 0x340 <__bad_interrupt>
     15e:	00 00       	nop
     160:	ef c0       	rjmp	.+478    	; 0x340 <__bad_interrupt>
     162:	00 00       	nop
     164:	ed c0       	rjmp	.+474    	; 0x340 <__bad_interrupt>
     166:	00 00       	nop
     168:	eb c0       	rjmp	.+470    	; 0x340 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	e9 c0       	rjmp	.+466    	; 0x340 <__bad_interrupt>
     16e:	00 00       	nop
     170:	e7 c0       	rjmp	.+462    	; 0x340 <__bad_interrupt>
     172:	00 00       	nop
     174:	e5 c0       	rjmp	.+458    	; 0x340 <__bad_interrupt>
     176:	00 00       	nop
     178:	e3 c0       	rjmp	.+454    	; 0x340 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	e1 c0       	rjmp	.+450    	; 0x340 <__bad_interrupt>
     17e:	00 00       	nop
     180:	df c0       	rjmp	.+446    	; 0x340 <__bad_interrupt>
     182:	00 00       	nop
     184:	dd c0       	rjmp	.+442    	; 0x340 <__bad_interrupt>
     186:	00 00       	nop
     188:	db c0       	rjmp	.+438    	; 0x340 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	d9 c0       	rjmp	.+434    	; 0x340 <__bad_interrupt>
     18e:	00 00       	nop
     190:	d7 c0       	rjmp	.+430    	; 0x340 <__bad_interrupt>
     192:	00 00       	nop
     194:	d5 c0       	rjmp	.+426    	; 0x340 <__bad_interrupt>
     196:	00 00       	nop
     198:	d3 c0       	rjmp	.+422    	; 0x340 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	d1 c0       	rjmp	.+418    	; 0x340 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	cf c0       	rjmp	.+414    	; 0x340 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	cd c0       	rjmp	.+410    	; 0x340 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	cb c0       	rjmp	.+406    	; 0x340 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	c9 c0       	rjmp	.+402    	; 0x340 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	5c c7       	rjmp	.+3768   	; 0x106a <__vector_108>
     1b2:	00 00       	nop
     1b4:	87 c7       	rjmp	.+3854   	; 0x10c4 <__vector_109>
     1b6:	00 00       	nop
     1b8:	b2 c7       	rjmp	.+3940   	; 0x111e <__vector_110>
     1ba:	00 00       	nop
     1bc:	dd c7       	rjmp	.+4026   	; 0x1178 <__vector_111>
     1be:	00 00       	nop
     1c0:	0c 94 e9 08 	jmp	0x11d2	; 0x11d2 <__vector_112>
     1c4:	0c 94 16 09 	jmp	0x122c	; 0x122c <__vector_113>
     1c8:	bb c0       	rjmp	.+374    	; 0x340 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	b9 c0       	rjmp	.+370    	; 0x340 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	b7 c0       	rjmp	.+366    	; 0x340 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	b5 c0       	rjmp	.+362    	; 0x340 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	b3 c0       	rjmp	.+358    	; 0x340 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	b1 c0       	rjmp	.+354    	; 0x340 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	af c0       	rjmp	.+350    	; 0x340 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	ad c0       	rjmp	.+346    	; 0x340 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	ab c0       	rjmp	.+342    	; 0x340 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	a9 c0       	rjmp	.+338    	; 0x340 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	a7 c0       	rjmp	.+334    	; 0x340 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	a5 c0       	rjmp	.+330    	; 0x340 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	a3 c0       	rjmp	.+326    	; 0x340 <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	6e 61       	ori	r22, 0x1E	; 30
     1fe:	6e 00       	.word	0x006e	; ????

00000200 <__c.2159>:
     200:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     210:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     220:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     230:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     240:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     250:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     260:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     270:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     280:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     290:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2a0:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2b0:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2c0:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2d0:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2e0:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2f0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002fe <__ctors_end>:
     2fe:	11 24       	eor	r1, r1
     300:	1f be       	out	0x3f, r1	; 63
     302:	cf ef       	ldi	r28, 0xFF	; 255
     304:	cd bf       	out	0x3d, r28	; 61
     306:	df e5       	ldi	r29, 0x5F	; 95
     308:	de bf       	out	0x3e, r29	; 62
     30a:	00 e0       	ldi	r16, 0x00	; 0
     30c:	0c bf       	out	0x3c, r16	; 60

0000030e <__do_copy_data>:
     30e:	10 e2       	ldi	r17, 0x20	; 32
     310:	a0 e0       	ldi	r26, 0x00	; 0
     312:	b0 e2       	ldi	r27, 0x20	; 32
     314:	e0 e1       	ldi	r30, 0x10	; 16
     316:	f9 e2       	ldi	r31, 0x29	; 41
     318:	00 e0       	ldi	r16, 0x00	; 0
     31a:	0b bf       	out	0x3b, r16	; 59
     31c:	02 c0       	rjmp	.+4      	; 0x322 <__do_copy_data+0x14>
     31e:	07 90       	elpm	r0, Z+
     320:	0d 92       	st	X+, r0
     322:	a8 30       	cpi	r26, 0x08	; 8
     324:	b1 07       	cpc	r27, r17
     326:	d9 f7       	brne	.-10     	; 0x31e <__do_copy_data+0x10>

00000328 <__do_clear_bss>:
     328:	27 e4       	ldi	r18, 0x47	; 71
     32a:	a8 e0       	ldi	r26, 0x08	; 8
     32c:	b0 e2       	ldi	r27, 0x20	; 32
     32e:	01 c0       	rjmp	.+2      	; 0x332 <.do_clear_bss_start>

00000330 <.do_clear_bss_loop>:
     330:	1d 92       	st	X+, r1

00000332 <.do_clear_bss_start>:
     332:	a4 37       	cpi	r26, 0x74	; 116
     334:	b2 07       	cpc	r27, r18
     336:	e1 f7       	brne	.-8      	; 0x330 <.do_clear_bss_loop>
     338:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <main>
     33c:	0c 94 86 14 	jmp	0x290c	; 0x290c <_exit>

00000340 <__bad_interrupt>:
     340:	5f ce       	rjmp	.-834    	; 0x0 <__vectors>

00000342 <dma_interrupt>:
 * \param num \ref dma_channel_num_t
 * \param callback \ref dma_callback_t
 */
void dma_set_callback(dma_channel_num_t num, dma_callback_t callback)
{
	dma_data[num].callback = callback;
     342:	cf 93       	push	r28
     344:	df 93       	push	r29
     346:	28 2f       	mov	r18, r24
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	f9 01       	movw	r30, r18
     34c:	71 96       	adiw	r30, 0x11	; 17
     34e:	e2 95       	swap	r30
     350:	f2 95       	swap	r31
     352:	f0 7f       	andi	r31, 0xF0	; 240
     354:	fe 27       	eor	r31, r30
     356:	e0 7f       	andi	r30, 0xF0	; 240
     358:	fe 27       	eor	r31, r30
     35a:	a0 e0       	ldi	r26, 0x00	; 0
     35c:	b1 e0       	ldi	r27, 0x01	; 1
     35e:	14 96       	adiw	r26, 0x04	; 4
     360:	9c 91       	ld	r25, X
     362:	14 97       	sbiw	r26, 0x04	; 4
     364:	13 96       	adiw	r26, 0x03	; 3
     366:	ac 91       	ld	r26, X
     368:	a9 01       	movw	r20, r18
     36a:	4c 5f       	subi	r20, 0xFC	; 252
     36c:	5f 4f       	sbci	r21, 0xFF	; 255
     36e:	61 e0       	ldi	r22, 0x01	; 1
     370:	70 e0       	ldi	r23, 0x00	; 0
     372:	eb 01       	movw	r28, r22
     374:	04 2e       	mov	r0, r20
     376:	02 c0       	rjmp	.+4      	; 0x37c <dma_interrupt+0x3a>
     378:	cc 0f       	add	r28, r28
     37a:	dd 1f       	adc	r29, r29
     37c:	0a 94       	dec	r0
     37e:	e2 f7       	brpl	.-8      	; 0x378 <dma_interrupt+0x36>
     380:	08 2e       	mov	r0, r24
     382:	02 c0       	rjmp	.+4      	; 0x388 <dma_interrupt+0x46>
     384:	66 0f       	add	r22, r22
     386:	77 1f       	adc	r23, r23
     388:	0a 94       	dec	r0
     38a:	e2 f7       	brpl	.-8      	; 0x384 <dma_interrupt+0x42>
     38c:	6c 2b       	or	r22, r28
     38e:	a6 23       	and	r26, r22
     390:	b0 e0       	ldi	r27, 0x00	; 0
     392:	ed 01       	movw	r28, r26
     394:	04 2e       	mov	r0, r20
     396:	02 c0       	rjmp	.+4      	; 0x39c <dma_interrupt+0x5a>
     398:	d5 95       	asr	r29
     39a:	c7 95       	ror	r28
     39c:	0a 94       	dec	r0
     39e:	e2 f7       	brpl	.-8      	; 0x398 <dma_interrupt+0x56>
     3a0:	c0 fd       	sbrc	r28, 0
     3a2:	1b c0       	rjmp	.+54     	; 0x3da <dma_interrupt+0x98>
     3a4:	08 2e       	mov	r0, r24
     3a6:	02 c0       	rjmp	.+4      	; 0x3ac <dma_interrupt+0x6a>
     3a8:	b5 95       	asr	r27
     3aa:	a7 95       	ror	r26
     3ac:	0a 94       	dec	r0
     3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <dma_interrupt+0x66>
     3b0:	a0 fd       	sbrc	r26, 0
     3b2:	15 c0       	rjmp	.+42     	; 0x3de <dma_interrupt+0x9c>
     3b4:	69 23       	and	r22, r25
     3b6:	70 e0       	ldi	r23, 0x00	; 0
     3b8:	db 01       	movw	r26, r22
     3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <dma_interrupt+0x7e>
     3bc:	b5 95       	asr	r27
     3be:	a7 95       	ror	r26
     3c0:	4a 95       	dec	r20
     3c2:	e2 f7       	brpl	.-8      	; 0x3bc <dma_interrupt+0x7a>
     3c4:	a0 fd       	sbrc	r26, 0
     3c6:	0d c0       	rjmp	.+26     	; 0x3e2 <dma_interrupt+0xa0>
     3c8:	ab 01       	movw	r20, r22
     3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <dma_interrupt+0x8e>
     3cc:	55 95       	asr	r21
     3ce:	47 95       	ror	r20
     3d0:	8a 95       	dec	r24
     3d2:	e2 f7       	brpl	.-8      	; 0x3cc <dma_interrupt+0x8a>
     3d4:	ca 01       	movw	r24, r20
     3d6:	81 70       	andi	r24, 0x01	; 1
     3d8:	05 c0       	rjmp	.+10     	; 0x3e4 <dma_interrupt+0xa2>
     3da:	84 e0       	ldi	r24, 0x04	; 4
     3dc:	03 c0       	rjmp	.+6      	; 0x3e4 <dma_interrupt+0xa2>
     3de:	83 e0       	ldi	r24, 0x03	; 3
     3e0:	01 c0       	rjmp	.+2      	; 0x3e4 <dma_interrupt+0xa2>
     3e2:	82 e0       	ldi	r24, 0x02	; 2
     3e4:	91 81       	ldd	r25, Z+1	; 0x01
     3e6:	90 63       	ori	r25, 0x30	; 48
     3e8:	91 83       	std	Z+1, r25	; 0x01
     3ea:	f9 01       	movw	r30, r18
     3ec:	ee 0f       	add	r30, r30
     3ee:	ff 1f       	adc	r31, r31
     3f0:	ee 5a       	subi	r30, 0xAE	; 174
     3f2:	ff 4d       	sbci	r31, 0xDF	; 223
     3f4:	01 90       	ld	r0, Z+
     3f6:	f0 81       	ld	r31, Z
     3f8:	e0 2d       	mov	r30, r0
     3fa:	30 97       	sbiw	r30, 0x00	; 0
     3fc:	09 f0       	breq	.+2      	; 0x400 <dma_interrupt+0xbe>
     3fe:	19 95       	eicall
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	08 95       	ret

00000406 <dma_enable>:
     406:	61 e0       	ldi	r22, 0x01	; 1
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <sysclk_enable_module>
     40e:	8f b7       	in	r24, 0x3f	; 63
     410:	f8 94       	cli
     412:	ef e5       	ldi	r30, 0x5F	; 95
     414:	f0 e2       	ldi	r31, 0x20	; 32
     416:	90 81       	ld	r25, Z
     418:	9f 5f       	subi	r25, 0xFF	; 255
     41a:	90 83       	st	Z, r25
     41c:	8f bf       	out	0x3f, r24	; 63
     41e:	e0 e0       	ldi	r30, 0x00	; 0
     420:	f1 e0       	ldi	r31, 0x01	; 1
     422:	80 e4       	ldi	r24, 0x40	; 64
     424:	80 83       	st	Z, r24
     426:	80 e8       	ldi	r24, 0x80	; 128
     428:	80 83       	st	Z, r24
     42a:	08 95       	ret

0000042c <__vector_6>:
/**
 * \internal
 * \brief DMA channel 0 interrupt handler
 */
ISR(DMA_CH0_vect)
{
     42c:	1f 92       	push	r1
     42e:	0f 92       	push	r0
     430:	0f b6       	in	r0, 0x3f	; 63
     432:	0f 92       	push	r0
     434:	11 24       	eor	r1, r1
     436:	0b b6       	in	r0, 0x3b	; 59
     438:	0f 92       	push	r0
     43a:	2f 93       	push	r18
     43c:	3f 93       	push	r19
     43e:	4f 93       	push	r20
     440:	5f 93       	push	r21
     442:	6f 93       	push	r22
     444:	7f 93       	push	r23
     446:	8f 93       	push	r24
     448:	9f 93       	push	r25
     44a:	af 93       	push	r26
     44c:	bf 93       	push	r27
     44e:	ef 93       	push	r30
     450:	ff 93       	push	r31
	dma_interrupt(0);
     452:	80 e0       	ldi	r24, 0x00	; 0
     454:	76 df       	rcall	.-276    	; 0x342 <dma_interrupt>
}
     456:	ff 91       	pop	r31
     458:	ef 91       	pop	r30
     45a:	bf 91       	pop	r27
     45c:	af 91       	pop	r26
     45e:	9f 91       	pop	r25
     460:	8f 91       	pop	r24
     462:	7f 91       	pop	r23
     464:	6f 91       	pop	r22
     466:	5f 91       	pop	r21
     468:	4f 91       	pop	r20
     46a:	3f 91       	pop	r19
     46c:	2f 91       	pop	r18
     46e:	0f 90       	pop	r0
     470:	0b be       	out	0x3b, r0	; 59
     472:	0f 90       	pop	r0
     474:	0f be       	out	0x3f, r0	; 63
     476:	0f 90       	pop	r0
     478:	1f 90       	pop	r1
     47a:	18 95       	reti

0000047c <__vector_7>:
/**
 * \internal
 * \brief DMA channel 1 interrupt handler
 */
ISR(DMA_CH1_vect)
{
     47c:	1f 92       	push	r1
     47e:	0f 92       	push	r0
     480:	0f b6       	in	r0, 0x3f	; 63
     482:	0f 92       	push	r0
     484:	11 24       	eor	r1, r1
     486:	0b b6       	in	r0, 0x3b	; 59
     488:	0f 92       	push	r0
     48a:	2f 93       	push	r18
     48c:	3f 93       	push	r19
     48e:	4f 93       	push	r20
     490:	5f 93       	push	r21
     492:	6f 93       	push	r22
     494:	7f 93       	push	r23
     496:	8f 93       	push	r24
     498:	9f 93       	push	r25
     49a:	af 93       	push	r26
     49c:	bf 93       	push	r27
     49e:	ef 93       	push	r30
     4a0:	ff 93       	push	r31
	dma_interrupt(1);
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	4e df       	rcall	.-356    	; 0x342 <dma_interrupt>
}
     4a6:	ff 91       	pop	r31
     4a8:	ef 91       	pop	r30
     4aa:	bf 91       	pop	r27
     4ac:	af 91       	pop	r26
     4ae:	9f 91       	pop	r25
     4b0:	8f 91       	pop	r24
     4b2:	7f 91       	pop	r23
     4b4:	6f 91       	pop	r22
     4b6:	5f 91       	pop	r21
     4b8:	4f 91       	pop	r20
     4ba:	3f 91       	pop	r19
     4bc:	2f 91       	pop	r18
     4be:	0f 90       	pop	r0
     4c0:	0b be       	out	0x3b, r0	; 59
     4c2:	0f 90       	pop	r0
     4c4:	0f be       	out	0x3f, r0	; 63
     4c6:	0f 90       	pop	r0
     4c8:	1f 90       	pop	r1
     4ca:	18 95       	reti

000004cc <__vector_8>:
/**
 * \internal
 * \brief DMA channel 2 interrupt handler
 */
ISR(DMA_CH2_vect)
{
     4cc:	1f 92       	push	r1
     4ce:	0f 92       	push	r0
     4d0:	0f b6       	in	r0, 0x3f	; 63
     4d2:	0f 92       	push	r0
     4d4:	11 24       	eor	r1, r1
     4d6:	0b b6       	in	r0, 0x3b	; 59
     4d8:	0f 92       	push	r0
     4da:	2f 93       	push	r18
     4dc:	3f 93       	push	r19
     4de:	4f 93       	push	r20
     4e0:	5f 93       	push	r21
     4e2:	6f 93       	push	r22
     4e4:	7f 93       	push	r23
     4e6:	8f 93       	push	r24
     4e8:	9f 93       	push	r25
     4ea:	af 93       	push	r26
     4ec:	bf 93       	push	r27
     4ee:	ef 93       	push	r30
     4f0:	ff 93       	push	r31
	dma_interrupt(2);
     4f2:	82 e0       	ldi	r24, 0x02	; 2
     4f4:	26 df       	rcall	.-436    	; 0x342 <dma_interrupt>
}
     4f6:	ff 91       	pop	r31
     4f8:	ef 91       	pop	r30
     4fa:	bf 91       	pop	r27
     4fc:	af 91       	pop	r26
     4fe:	9f 91       	pop	r25
     500:	8f 91       	pop	r24
     502:	7f 91       	pop	r23
     504:	6f 91       	pop	r22
     506:	5f 91       	pop	r21
     508:	4f 91       	pop	r20
     50a:	3f 91       	pop	r19
     50c:	2f 91       	pop	r18
     50e:	0f 90       	pop	r0
     510:	0b be       	out	0x3b, r0	; 59
     512:	0f 90       	pop	r0
     514:	0f be       	out	0x3f, r0	; 63
     516:	0f 90       	pop	r0
     518:	1f 90       	pop	r1
     51a:	18 95       	reti

0000051c <__vector_9>:
/**
 * \internal
 * \brief DMA channel 3 interrupt handler
 */
ISR(DMA_CH3_vect)
{
     51c:	1f 92       	push	r1
     51e:	0f 92       	push	r0
     520:	0f b6       	in	r0, 0x3f	; 63
     522:	0f 92       	push	r0
     524:	11 24       	eor	r1, r1
     526:	0b b6       	in	r0, 0x3b	; 59
     528:	0f 92       	push	r0
     52a:	2f 93       	push	r18
     52c:	3f 93       	push	r19
     52e:	4f 93       	push	r20
     530:	5f 93       	push	r21
     532:	6f 93       	push	r22
     534:	7f 93       	push	r23
     536:	8f 93       	push	r24
     538:	9f 93       	push	r25
     53a:	af 93       	push	r26
     53c:	bf 93       	push	r27
     53e:	ef 93       	push	r30
     540:	ff 93       	push	r31
	dma_interrupt(3);
     542:	83 e0       	ldi	r24, 0x03	; 3
     544:	fe de       	rcall	.-516    	; 0x342 <dma_interrupt>
}
     546:	ff 91       	pop	r31
     548:	ef 91       	pop	r30
     54a:	bf 91       	pop	r27
     54c:	af 91       	pop	r26
     54e:	9f 91       	pop	r25
     550:	8f 91       	pop	r24
     552:	7f 91       	pop	r23
     554:	6f 91       	pop	r22
     556:	5f 91       	pop	r21
     558:	4f 91       	pop	r20
     55a:	3f 91       	pop	r19
     55c:	2f 91       	pop	r18
     55e:	0f 90       	pop	r0
     560:	0b be       	out	0x3b, r0	; 59
     562:	0f 90       	pop	r0
     564:	0f be       	out	0x3f, r0	; 63
     566:	0f 90       	pop	r0
     568:	1f 90       	pop	r1
     56a:	18 95       	reti

0000056c <dma_channel_write_config>:
 * \param config Pointer to a DMA channel config, given by a
 *               \ref dma_channel_config
 */
void dma_channel_write_config(dma_channel_num_t num,
		struct dma_channel_config *config)
{
     56c:	db 01       	movw	r26, r22
	DMA_CH_t *channel = dma_get_channel_address_from_num(num);
     56e:	e8 2f       	mov	r30, r24
     570:	f0 e0       	ldi	r31, 0x00	; 0
     572:	71 96       	adiw	r30, 0x11	; 17
     574:	e2 95       	swap	r30
     576:	f2 95       	swap	r31
     578:	f0 7f       	andi	r31, 0xF0	; 240
     57a:	fe 27       	eor	r31, r30
     57c:	e0 7f       	andi	r30, 0xF0	; 240
     57e:	fe 27       	eor	r31, r30

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     580:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
     582:	f8 94       	cli
#ifdef CONFIG_HAVE_HUGEMEM
	channel->DESTADDR0 = (uint32_t)config->destaddr;
	channel->DESTADDR1 = (uint32_t)config->destaddr >> 8;
	channel->DESTADDR2 = (uint32_t)config->destaddr >> 16;
#else
	channel->DESTADDR0 = (uint32_t)config->destaddr16;
     584:	19 96       	adiw	r26, 0x09	; 9
     586:	8c 91       	ld	r24, X
     588:	19 97       	sbiw	r26, 0x09	; 9
     58a:	84 87       	std	Z+12, r24	; 0x0c
	channel->DESTADDR1 = (uint32_t)config->destaddr16 >> 8;
     58c:	1a 96       	adiw	r26, 0x0a	; 10
     58e:	8c 91       	ld	r24, X
     590:	1a 97       	sbiw	r26, 0x0a	; 10
     592:	85 87       	std	Z+13, r24	; 0x0d
#  if XMEGA_A || XMEGA_AU
	channel->DESTADDR2 = 0;
     594:	16 86       	std	Z+14, r1	; 0x0e
#ifdef CONFIG_HAVE_HUGEMEM
	channel->SRCADDR0 = (uint32_t)config->srcaddr;
	channel->SRCADDR1 = (uint32_t)config->srcaddr >> 8;
	channel->SRCADDR2 = (uint32_t)config->srcaddr >> 16;
#else
	channel->SRCADDR0 = (uint32_t)config->srcaddr16;
     596:	17 96       	adiw	r26, 0x07	; 7
     598:	8c 91       	ld	r24, X
     59a:	17 97       	sbiw	r26, 0x07	; 7
     59c:	80 87       	std	Z+8, r24	; 0x08
	channel->SRCADDR1 = (uint32_t)config->srcaddr16 >> 8;
     59e:	18 96       	adiw	r26, 0x08	; 8
     5a0:	8c 91       	ld	r24, X
     5a2:	18 97       	sbiw	r26, 0x08	; 8
     5a4:	81 87       	std	Z+9, r24	; 0x09
#  if XMEGA_A || XMEGA_AU
	channel->SRCADDR2 = 0;
     5a6:	12 86       	std	Z+10, r1	; 0x0a
#  endif
#endif

	channel->ADDRCTRL = config->addrctrl;
     5a8:	12 96       	adiw	r26, 0x02	; 2
     5aa:	8c 91       	ld	r24, X
     5ac:	12 97       	sbiw	r26, 0x02	; 2
     5ae:	82 83       	std	Z+2, r24	; 0x02
	channel->TRIGSRC = config->trigsrc;
     5b0:	13 96       	adiw	r26, 0x03	; 3
     5b2:	8c 91       	ld	r24, X
     5b4:	13 97       	sbiw	r26, 0x03	; 3
     5b6:	83 83       	std	Z+3, r24	; 0x03
	channel->TRFCNT = config->trfcnt;
     5b8:	14 96       	adiw	r26, 0x04	; 4
     5ba:	8d 91       	ld	r24, X+
     5bc:	9c 91       	ld	r25, X
     5be:	15 97       	sbiw	r26, 0x05	; 5
     5c0:	84 83       	std	Z+4, r24	; 0x04
     5c2:	95 83       	std	Z+5, r25	; 0x05
	channel->REPCNT = config->repcnt;
     5c4:	16 96       	adiw	r26, 0x06	; 6
     5c6:	8c 91       	ld	r24, X
     5c8:	16 97       	sbiw	r26, 0x06	; 6
     5ca:	86 83       	std	Z+6, r24	; 0x06

	channel->CTRLB = config->ctrlb;
     5cc:	11 96       	adiw	r26, 0x01	; 1
     5ce:	8c 91       	ld	r24, X
     5d0:	11 97       	sbiw	r26, 0x01	; 1
     5d2:	81 83       	std	Z+1, r24	; 0x01

	/* Make sure the DMA channel is not enabled before dma_channel_enable()
	 * is called.
	 */
#if XMEGA_A || XMEGA_AU
	channel->CTRLA = config->ctrla & ~DMA_CH_ENABLE_bm;
     5d4:	8c 91       	ld	r24, X
     5d6:	8f 77       	andi	r24, 0x7F	; 127
     5d8:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     5da:	2f bf       	out	0x3f, r18	; 63
     5dc:	08 95       	ret

000005de <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     5de:	1f 92       	push	r1
     5e0:	0f 92       	push	r0
     5e2:	0f b6       	in	r0, 0x3f	; 63
     5e4:	0f 92       	push	r0
     5e6:	11 24       	eor	r1, r1
     5e8:	0b b6       	in	r0, 0x3b	; 59
     5ea:	0f 92       	push	r0
     5ec:	2f 93       	push	r18
     5ee:	3f 93       	push	r19
     5f0:	4f 93       	push	r20
     5f2:	5f 93       	push	r21
     5f4:	6f 93       	push	r22
     5f6:	7f 93       	push	r23
     5f8:	8f 93       	push	r24
     5fa:	9f 93       	push	r25
     5fc:	af 93       	push	r26
     5fe:	bf 93       	push	r27
     600:	ef 93       	push	r30
     602:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     604:	e0 91 4e 20 	lds	r30, 0x204E
     608:	f0 91 4f 20 	lds	r31, 0x204F
     60c:	30 97       	sbiw	r30, 0x00	; 0
     60e:	09 f0       	breq	.+2      	; 0x612 <__vector_14+0x34>
		tc_tcc0_ovf_callback();
     610:	19 95       	eicall
	}
}
     612:	ff 91       	pop	r31
     614:	ef 91       	pop	r30
     616:	bf 91       	pop	r27
     618:	af 91       	pop	r26
     61a:	9f 91       	pop	r25
     61c:	8f 91       	pop	r24
     61e:	7f 91       	pop	r23
     620:	6f 91       	pop	r22
     622:	5f 91       	pop	r21
     624:	4f 91       	pop	r20
     626:	3f 91       	pop	r19
     628:	2f 91       	pop	r18
     62a:	0f 90       	pop	r0
     62c:	0b be       	out	0x3b, r0	; 59
     62e:	0f 90       	pop	r0
     630:	0f be       	out	0x3f, r0	; 63
     632:	0f 90       	pop	r0
     634:	1f 90       	pop	r1
     636:	18 95       	reti

00000638 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     638:	1f 92       	push	r1
     63a:	0f 92       	push	r0
     63c:	0f b6       	in	r0, 0x3f	; 63
     63e:	0f 92       	push	r0
     640:	11 24       	eor	r1, r1
     642:	0b b6       	in	r0, 0x3b	; 59
     644:	0f 92       	push	r0
     646:	2f 93       	push	r18
     648:	3f 93       	push	r19
     64a:	4f 93       	push	r20
     64c:	5f 93       	push	r21
     64e:	6f 93       	push	r22
     650:	7f 93       	push	r23
     652:	8f 93       	push	r24
     654:	9f 93       	push	r25
     656:	af 93       	push	r26
     658:	bf 93       	push	r27
     65a:	ef 93       	push	r30
     65c:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     65e:	e0 91 4c 20 	lds	r30, 0x204C
     662:	f0 91 4d 20 	lds	r31, 0x204D
     666:	30 97       	sbiw	r30, 0x00	; 0
     668:	09 f0       	breq	.+2      	; 0x66c <__vector_15+0x34>
		tc_tcc0_err_callback();
     66a:	19 95       	eicall
	}
}
     66c:	ff 91       	pop	r31
     66e:	ef 91       	pop	r30
     670:	bf 91       	pop	r27
     672:	af 91       	pop	r26
     674:	9f 91       	pop	r25
     676:	8f 91       	pop	r24
     678:	7f 91       	pop	r23
     67a:	6f 91       	pop	r22
     67c:	5f 91       	pop	r21
     67e:	4f 91       	pop	r20
     680:	3f 91       	pop	r19
     682:	2f 91       	pop	r18
     684:	0f 90       	pop	r0
     686:	0b be       	out	0x3b, r0	; 59
     688:	0f 90       	pop	r0
     68a:	0f be       	out	0x3f, r0	; 63
     68c:	0f 90       	pop	r0
     68e:	1f 90       	pop	r1
     690:	18 95       	reti

00000692 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     692:	1f 92       	push	r1
     694:	0f 92       	push	r0
     696:	0f b6       	in	r0, 0x3f	; 63
     698:	0f 92       	push	r0
     69a:	11 24       	eor	r1, r1
     69c:	0b b6       	in	r0, 0x3b	; 59
     69e:	0f 92       	push	r0
     6a0:	2f 93       	push	r18
     6a2:	3f 93       	push	r19
     6a4:	4f 93       	push	r20
     6a6:	5f 93       	push	r21
     6a8:	6f 93       	push	r22
     6aa:	7f 93       	push	r23
     6ac:	8f 93       	push	r24
     6ae:	9f 93       	push	r25
     6b0:	af 93       	push	r26
     6b2:	bf 93       	push	r27
     6b4:	ef 93       	push	r30
     6b6:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     6b8:	e0 91 4a 20 	lds	r30, 0x204A
     6bc:	f0 91 4b 20 	lds	r31, 0x204B
     6c0:	30 97       	sbiw	r30, 0x00	; 0
     6c2:	09 f0       	breq	.+2      	; 0x6c6 <__vector_16+0x34>
		tc_tcc0_cca_callback();
     6c4:	19 95       	eicall
	}
}
     6c6:	ff 91       	pop	r31
     6c8:	ef 91       	pop	r30
     6ca:	bf 91       	pop	r27
     6cc:	af 91       	pop	r26
     6ce:	9f 91       	pop	r25
     6d0:	8f 91       	pop	r24
     6d2:	7f 91       	pop	r23
     6d4:	6f 91       	pop	r22
     6d6:	5f 91       	pop	r21
     6d8:	4f 91       	pop	r20
     6da:	3f 91       	pop	r19
     6dc:	2f 91       	pop	r18
     6de:	0f 90       	pop	r0
     6e0:	0b be       	out	0x3b, r0	; 59
     6e2:	0f 90       	pop	r0
     6e4:	0f be       	out	0x3f, r0	; 63
     6e6:	0f 90       	pop	r0
     6e8:	1f 90       	pop	r1
     6ea:	18 95       	reti

000006ec <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     6ec:	1f 92       	push	r1
     6ee:	0f 92       	push	r0
     6f0:	0f b6       	in	r0, 0x3f	; 63
     6f2:	0f 92       	push	r0
     6f4:	11 24       	eor	r1, r1
     6f6:	0b b6       	in	r0, 0x3b	; 59
     6f8:	0f 92       	push	r0
     6fa:	2f 93       	push	r18
     6fc:	3f 93       	push	r19
     6fe:	4f 93       	push	r20
     700:	5f 93       	push	r21
     702:	6f 93       	push	r22
     704:	7f 93       	push	r23
     706:	8f 93       	push	r24
     708:	9f 93       	push	r25
     70a:	af 93       	push	r26
     70c:	bf 93       	push	r27
     70e:	ef 93       	push	r30
     710:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     712:	e0 91 48 20 	lds	r30, 0x2048
     716:	f0 91 49 20 	lds	r31, 0x2049
     71a:	30 97       	sbiw	r30, 0x00	; 0
     71c:	09 f0       	breq	.+2      	; 0x720 <__vector_17+0x34>
		tc_tcc0_ccb_callback();
     71e:	19 95       	eicall
	}
}
     720:	ff 91       	pop	r31
     722:	ef 91       	pop	r30
     724:	bf 91       	pop	r27
     726:	af 91       	pop	r26
     728:	9f 91       	pop	r25
     72a:	8f 91       	pop	r24
     72c:	7f 91       	pop	r23
     72e:	6f 91       	pop	r22
     730:	5f 91       	pop	r21
     732:	4f 91       	pop	r20
     734:	3f 91       	pop	r19
     736:	2f 91       	pop	r18
     738:	0f 90       	pop	r0
     73a:	0b be       	out	0x3b, r0	; 59
     73c:	0f 90       	pop	r0
     73e:	0f be       	out	0x3f, r0	; 63
     740:	0f 90       	pop	r0
     742:	1f 90       	pop	r1
     744:	18 95       	reti

00000746 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     746:	1f 92       	push	r1
     748:	0f 92       	push	r0
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	0f 92       	push	r0
     74e:	11 24       	eor	r1, r1
     750:	0b b6       	in	r0, 0x3b	; 59
     752:	0f 92       	push	r0
     754:	2f 93       	push	r18
     756:	3f 93       	push	r19
     758:	4f 93       	push	r20
     75a:	5f 93       	push	r21
     75c:	6f 93       	push	r22
     75e:	7f 93       	push	r23
     760:	8f 93       	push	r24
     762:	9f 93       	push	r25
     764:	af 93       	push	r26
     766:	bf 93       	push	r27
     768:	ef 93       	push	r30
     76a:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     76c:	e0 91 46 20 	lds	r30, 0x2046
     770:	f0 91 47 20 	lds	r31, 0x2047
     774:	30 97       	sbiw	r30, 0x00	; 0
     776:	09 f0       	breq	.+2      	; 0x77a <__vector_18+0x34>
		tc_tcc0_ccc_callback();
     778:	19 95       	eicall
	}
}
     77a:	ff 91       	pop	r31
     77c:	ef 91       	pop	r30
     77e:	bf 91       	pop	r27
     780:	af 91       	pop	r26
     782:	9f 91       	pop	r25
     784:	8f 91       	pop	r24
     786:	7f 91       	pop	r23
     788:	6f 91       	pop	r22
     78a:	5f 91       	pop	r21
     78c:	4f 91       	pop	r20
     78e:	3f 91       	pop	r19
     790:	2f 91       	pop	r18
     792:	0f 90       	pop	r0
     794:	0b be       	out	0x3b, r0	; 59
     796:	0f 90       	pop	r0
     798:	0f be       	out	0x3f, r0	; 63
     79a:	0f 90       	pop	r0
     79c:	1f 90       	pop	r1
     79e:	18 95       	reti

000007a0 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     7a0:	1f 92       	push	r1
     7a2:	0f 92       	push	r0
     7a4:	0f b6       	in	r0, 0x3f	; 63
     7a6:	0f 92       	push	r0
     7a8:	11 24       	eor	r1, r1
     7aa:	0b b6       	in	r0, 0x3b	; 59
     7ac:	0f 92       	push	r0
     7ae:	2f 93       	push	r18
     7b0:	3f 93       	push	r19
     7b2:	4f 93       	push	r20
     7b4:	5f 93       	push	r21
     7b6:	6f 93       	push	r22
     7b8:	7f 93       	push	r23
     7ba:	8f 93       	push	r24
     7bc:	9f 93       	push	r25
     7be:	af 93       	push	r26
     7c0:	bf 93       	push	r27
     7c2:	ef 93       	push	r30
     7c4:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     7c6:	e0 91 44 20 	lds	r30, 0x2044
     7ca:	f0 91 45 20 	lds	r31, 0x2045
     7ce:	30 97       	sbiw	r30, 0x00	; 0
     7d0:	09 f0       	breq	.+2      	; 0x7d4 <__vector_19+0x34>
		tc_tcc0_ccd_callback();
     7d2:	19 95       	eicall
	}
}
     7d4:	ff 91       	pop	r31
     7d6:	ef 91       	pop	r30
     7d8:	bf 91       	pop	r27
     7da:	af 91       	pop	r26
     7dc:	9f 91       	pop	r25
     7de:	8f 91       	pop	r24
     7e0:	7f 91       	pop	r23
     7e2:	6f 91       	pop	r22
     7e4:	5f 91       	pop	r21
     7e6:	4f 91       	pop	r20
     7e8:	3f 91       	pop	r19
     7ea:	2f 91       	pop	r18
     7ec:	0f 90       	pop	r0
     7ee:	0b be       	out	0x3b, r0	; 59
     7f0:	0f 90       	pop	r0
     7f2:	0f be       	out	0x3f, r0	; 63
     7f4:	0f 90       	pop	r0
     7f6:	1f 90       	pop	r1
     7f8:	18 95       	reti

000007fa <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     7fa:	1f 92       	push	r1
     7fc:	0f 92       	push	r0
     7fe:	0f b6       	in	r0, 0x3f	; 63
     800:	0f 92       	push	r0
     802:	11 24       	eor	r1, r1
     804:	0b b6       	in	r0, 0x3b	; 59
     806:	0f 92       	push	r0
     808:	2f 93       	push	r18
     80a:	3f 93       	push	r19
     80c:	4f 93       	push	r20
     80e:	5f 93       	push	r21
     810:	6f 93       	push	r22
     812:	7f 93       	push	r23
     814:	8f 93       	push	r24
     816:	9f 93       	push	r25
     818:	af 93       	push	r26
     81a:	bf 93       	push	r27
     81c:	ef 93       	push	r30
     81e:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     820:	e0 91 42 20 	lds	r30, 0x2042
     824:	f0 91 43 20 	lds	r31, 0x2043
     828:	30 97       	sbiw	r30, 0x00	; 0
     82a:	09 f0       	breq	.+2      	; 0x82e <__vector_20+0x34>
		tc_tcc1_ovf_callback();
     82c:	19 95       	eicall
	}
}
     82e:	ff 91       	pop	r31
     830:	ef 91       	pop	r30
     832:	bf 91       	pop	r27
     834:	af 91       	pop	r26
     836:	9f 91       	pop	r25
     838:	8f 91       	pop	r24
     83a:	7f 91       	pop	r23
     83c:	6f 91       	pop	r22
     83e:	5f 91       	pop	r21
     840:	4f 91       	pop	r20
     842:	3f 91       	pop	r19
     844:	2f 91       	pop	r18
     846:	0f 90       	pop	r0
     848:	0b be       	out	0x3b, r0	; 59
     84a:	0f 90       	pop	r0
     84c:	0f be       	out	0x3f, r0	; 63
     84e:	0f 90       	pop	r0
     850:	1f 90       	pop	r1
     852:	18 95       	reti

00000854 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     854:	1f 92       	push	r1
     856:	0f 92       	push	r0
     858:	0f b6       	in	r0, 0x3f	; 63
     85a:	0f 92       	push	r0
     85c:	11 24       	eor	r1, r1
     85e:	0b b6       	in	r0, 0x3b	; 59
     860:	0f 92       	push	r0
     862:	2f 93       	push	r18
     864:	3f 93       	push	r19
     866:	4f 93       	push	r20
     868:	5f 93       	push	r21
     86a:	6f 93       	push	r22
     86c:	7f 93       	push	r23
     86e:	8f 93       	push	r24
     870:	9f 93       	push	r25
     872:	af 93       	push	r26
     874:	bf 93       	push	r27
     876:	ef 93       	push	r30
     878:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     87a:	e0 91 40 20 	lds	r30, 0x2040
     87e:	f0 91 41 20 	lds	r31, 0x2041
     882:	30 97       	sbiw	r30, 0x00	; 0
     884:	09 f0       	breq	.+2      	; 0x888 <__vector_21+0x34>
		tc_tcc1_err_callback();
     886:	19 95       	eicall
	}
}
     888:	ff 91       	pop	r31
     88a:	ef 91       	pop	r30
     88c:	bf 91       	pop	r27
     88e:	af 91       	pop	r26
     890:	9f 91       	pop	r25
     892:	8f 91       	pop	r24
     894:	7f 91       	pop	r23
     896:	6f 91       	pop	r22
     898:	5f 91       	pop	r21
     89a:	4f 91       	pop	r20
     89c:	3f 91       	pop	r19
     89e:	2f 91       	pop	r18
     8a0:	0f 90       	pop	r0
     8a2:	0b be       	out	0x3b, r0	; 59
     8a4:	0f 90       	pop	r0
     8a6:	0f be       	out	0x3f, r0	; 63
     8a8:	0f 90       	pop	r0
     8aa:	1f 90       	pop	r1
     8ac:	18 95       	reti

000008ae <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     8ae:	1f 92       	push	r1
     8b0:	0f 92       	push	r0
     8b2:	0f b6       	in	r0, 0x3f	; 63
     8b4:	0f 92       	push	r0
     8b6:	11 24       	eor	r1, r1
     8b8:	0b b6       	in	r0, 0x3b	; 59
     8ba:	0f 92       	push	r0
     8bc:	2f 93       	push	r18
     8be:	3f 93       	push	r19
     8c0:	4f 93       	push	r20
     8c2:	5f 93       	push	r21
     8c4:	6f 93       	push	r22
     8c6:	7f 93       	push	r23
     8c8:	8f 93       	push	r24
     8ca:	9f 93       	push	r25
     8cc:	af 93       	push	r26
     8ce:	bf 93       	push	r27
     8d0:	ef 93       	push	r30
     8d2:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     8d4:	e0 91 3e 20 	lds	r30, 0x203E
     8d8:	f0 91 3f 20 	lds	r31, 0x203F
     8dc:	30 97       	sbiw	r30, 0x00	; 0
     8de:	09 f0       	breq	.+2      	; 0x8e2 <__vector_22+0x34>
		tc_tcc1_cca_callback();
     8e0:	19 95       	eicall
	}
}
     8e2:	ff 91       	pop	r31
     8e4:	ef 91       	pop	r30
     8e6:	bf 91       	pop	r27
     8e8:	af 91       	pop	r26
     8ea:	9f 91       	pop	r25
     8ec:	8f 91       	pop	r24
     8ee:	7f 91       	pop	r23
     8f0:	6f 91       	pop	r22
     8f2:	5f 91       	pop	r21
     8f4:	4f 91       	pop	r20
     8f6:	3f 91       	pop	r19
     8f8:	2f 91       	pop	r18
     8fa:	0f 90       	pop	r0
     8fc:	0b be       	out	0x3b, r0	; 59
     8fe:	0f 90       	pop	r0
     900:	0f be       	out	0x3f, r0	; 63
     902:	0f 90       	pop	r0
     904:	1f 90       	pop	r1
     906:	18 95       	reti

00000908 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     908:	1f 92       	push	r1
     90a:	0f 92       	push	r0
     90c:	0f b6       	in	r0, 0x3f	; 63
     90e:	0f 92       	push	r0
     910:	11 24       	eor	r1, r1
     912:	0b b6       	in	r0, 0x3b	; 59
     914:	0f 92       	push	r0
     916:	2f 93       	push	r18
     918:	3f 93       	push	r19
     91a:	4f 93       	push	r20
     91c:	5f 93       	push	r21
     91e:	6f 93       	push	r22
     920:	7f 93       	push	r23
     922:	8f 93       	push	r24
     924:	9f 93       	push	r25
     926:	af 93       	push	r26
     928:	bf 93       	push	r27
     92a:	ef 93       	push	r30
     92c:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     92e:	e0 91 3c 20 	lds	r30, 0x203C
     932:	f0 91 3d 20 	lds	r31, 0x203D
     936:	30 97       	sbiw	r30, 0x00	; 0
     938:	09 f0       	breq	.+2      	; 0x93c <__vector_23+0x34>
		tc_tcc1_ccb_callback();
     93a:	19 95       	eicall
	}
}
     93c:	ff 91       	pop	r31
     93e:	ef 91       	pop	r30
     940:	bf 91       	pop	r27
     942:	af 91       	pop	r26
     944:	9f 91       	pop	r25
     946:	8f 91       	pop	r24
     948:	7f 91       	pop	r23
     94a:	6f 91       	pop	r22
     94c:	5f 91       	pop	r21
     94e:	4f 91       	pop	r20
     950:	3f 91       	pop	r19
     952:	2f 91       	pop	r18
     954:	0f 90       	pop	r0
     956:	0b be       	out	0x3b, r0	; 59
     958:	0f 90       	pop	r0
     95a:	0f be       	out	0x3f, r0	; 63
     95c:	0f 90       	pop	r0
     95e:	1f 90       	pop	r1
     960:	18 95       	reti

00000962 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     962:	1f 92       	push	r1
     964:	0f 92       	push	r0
     966:	0f b6       	in	r0, 0x3f	; 63
     968:	0f 92       	push	r0
     96a:	11 24       	eor	r1, r1
     96c:	0b b6       	in	r0, 0x3b	; 59
     96e:	0f 92       	push	r0
     970:	2f 93       	push	r18
     972:	3f 93       	push	r19
     974:	4f 93       	push	r20
     976:	5f 93       	push	r21
     978:	6f 93       	push	r22
     97a:	7f 93       	push	r23
     97c:	8f 93       	push	r24
     97e:	9f 93       	push	r25
     980:	af 93       	push	r26
     982:	bf 93       	push	r27
     984:	ef 93       	push	r30
     986:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     988:	e0 91 3a 20 	lds	r30, 0x203A
     98c:	f0 91 3b 20 	lds	r31, 0x203B
     990:	30 97       	sbiw	r30, 0x00	; 0
     992:	09 f0       	breq	.+2      	; 0x996 <__vector_77+0x34>
		tc_tcd0_ovf_callback();
     994:	19 95       	eicall
	}
}
     996:	ff 91       	pop	r31
     998:	ef 91       	pop	r30
     99a:	bf 91       	pop	r27
     99c:	af 91       	pop	r26
     99e:	9f 91       	pop	r25
     9a0:	8f 91       	pop	r24
     9a2:	7f 91       	pop	r23
     9a4:	6f 91       	pop	r22
     9a6:	5f 91       	pop	r21
     9a8:	4f 91       	pop	r20
     9aa:	3f 91       	pop	r19
     9ac:	2f 91       	pop	r18
     9ae:	0f 90       	pop	r0
     9b0:	0b be       	out	0x3b, r0	; 59
     9b2:	0f 90       	pop	r0
     9b4:	0f be       	out	0x3f, r0	; 63
     9b6:	0f 90       	pop	r0
     9b8:	1f 90       	pop	r1
     9ba:	18 95       	reti

000009bc <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     9bc:	1f 92       	push	r1
     9be:	0f 92       	push	r0
     9c0:	0f b6       	in	r0, 0x3f	; 63
     9c2:	0f 92       	push	r0
     9c4:	11 24       	eor	r1, r1
     9c6:	0b b6       	in	r0, 0x3b	; 59
     9c8:	0f 92       	push	r0
     9ca:	2f 93       	push	r18
     9cc:	3f 93       	push	r19
     9ce:	4f 93       	push	r20
     9d0:	5f 93       	push	r21
     9d2:	6f 93       	push	r22
     9d4:	7f 93       	push	r23
     9d6:	8f 93       	push	r24
     9d8:	9f 93       	push	r25
     9da:	af 93       	push	r26
     9dc:	bf 93       	push	r27
     9de:	ef 93       	push	r30
     9e0:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     9e2:	e0 91 38 20 	lds	r30, 0x2038
     9e6:	f0 91 39 20 	lds	r31, 0x2039
     9ea:	30 97       	sbiw	r30, 0x00	; 0
     9ec:	09 f0       	breq	.+2      	; 0x9f0 <__vector_78+0x34>
		tc_tcd0_err_callback();
     9ee:	19 95       	eicall
	}
}
     9f0:	ff 91       	pop	r31
     9f2:	ef 91       	pop	r30
     9f4:	bf 91       	pop	r27
     9f6:	af 91       	pop	r26
     9f8:	9f 91       	pop	r25
     9fa:	8f 91       	pop	r24
     9fc:	7f 91       	pop	r23
     9fe:	6f 91       	pop	r22
     a00:	5f 91       	pop	r21
     a02:	4f 91       	pop	r20
     a04:	3f 91       	pop	r19
     a06:	2f 91       	pop	r18
     a08:	0f 90       	pop	r0
     a0a:	0b be       	out	0x3b, r0	; 59
     a0c:	0f 90       	pop	r0
     a0e:	0f be       	out	0x3f, r0	; 63
     a10:	0f 90       	pop	r0
     a12:	1f 90       	pop	r1
     a14:	18 95       	reti

00000a16 <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     a16:	1f 92       	push	r1
     a18:	0f 92       	push	r0
     a1a:	0f b6       	in	r0, 0x3f	; 63
     a1c:	0f 92       	push	r0
     a1e:	11 24       	eor	r1, r1
     a20:	0b b6       	in	r0, 0x3b	; 59
     a22:	0f 92       	push	r0
     a24:	2f 93       	push	r18
     a26:	3f 93       	push	r19
     a28:	4f 93       	push	r20
     a2a:	5f 93       	push	r21
     a2c:	6f 93       	push	r22
     a2e:	7f 93       	push	r23
     a30:	8f 93       	push	r24
     a32:	9f 93       	push	r25
     a34:	af 93       	push	r26
     a36:	bf 93       	push	r27
     a38:	ef 93       	push	r30
     a3a:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
     a3c:	e0 91 36 20 	lds	r30, 0x2036
     a40:	f0 91 37 20 	lds	r31, 0x2037
     a44:	30 97       	sbiw	r30, 0x00	; 0
     a46:	09 f0       	breq	.+2      	; 0xa4a <__vector_79+0x34>
		tc_tcd0_cca_callback();
     a48:	19 95       	eicall
	}
}
     a4a:	ff 91       	pop	r31
     a4c:	ef 91       	pop	r30
     a4e:	bf 91       	pop	r27
     a50:	af 91       	pop	r26
     a52:	9f 91       	pop	r25
     a54:	8f 91       	pop	r24
     a56:	7f 91       	pop	r23
     a58:	6f 91       	pop	r22
     a5a:	5f 91       	pop	r21
     a5c:	4f 91       	pop	r20
     a5e:	3f 91       	pop	r19
     a60:	2f 91       	pop	r18
     a62:	0f 90       	pop	r0
     a64:	0b be       	out	0x3b, r0	; 59
     a66:	0f 90       	pop	r0
     a68:	0f be       	out	0x3f, r0	; 63
     a6a:	0f 90       	pop	r0
     a6c:	1f 90       	pop	r1
     a6e:	18 95       	reti

00000a70 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
     a70:	1f 92       	push	r1
     a72:	0f 92       	push	r0
     a74:	0f b6       	in	r0, 0x3f	; 63
     a76:	0f 92       	push	r0
     a78:	11 24       	eor	r1, r1
     a7a:	0b b6       	in	r0, 0x3b	; 59
     a7c:	0f 92       	push	r0
     a7e:	2f 93       	push	r18
     a80:	3f 93       	push	r19
     a82:	4f 93       	push	r20
     a84:	5f 93       	push	r21
     a86:	6f 93       	push	r22
     a88:	7f 93       	push	r23
     a8a:	8f 93       	push	r24
     a8c:	9f 93       	push	r25
     a8e:	af 93       	push	r26
     a90:	bf 93       	push	r27
     a92:	ef 93       	push	r30
     a94:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
     a96:	e0 91 34 20 	lds	r30, 0x2034
     a9a:	f0 91 35 20 	lds	r31, 0x2035
     a9e:	30 97       	sbiw	r30, 0x00	; 0
     aa0:	09 f0       	breq	.+2      	; 0xaa4 <__vector_80+0x34>
		tc_tcd0_ccb_callback();
     aa2:	19 95       	eicall
	}
}
     aa4:	ff 91       	pop	r31
     aa6:	ef 91       	pop	r30
     aa8:	bf 91       	pop	r27
     aaa:	af 91       	pop	r26
     aac:	9f 91       	pop	r25
     aae:	8f 91       	pop	r24
     ab0:	7f 91       	pop	r23
     ab2:	6f 91       	pop	r22
     ab4:	5f 91       	pop	r21
     ab6:	4f 91       	pop	r20
     ab8:	3f 91       	pop	r19
     aba:	2f 91       	pop	r18
     abc:	0f 90       	pop	r0
     abe:	0b be       	out	0x3b, r0	; 59
     ac0:	0f 90       	pop	r0
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	0f 90       	pop	r0
     ac6:	1f 90       	pop	r1
     ac8:	18 95       	reti

00000aca <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
     aca:	1f 92       	push	r1
     acc:	0f 92       	push	r0
     ace:	0f b6       	in	r0, 0x3f	; 63
     ad0:	0f 92       	push	r0
     ad2:	11 24       	eor	r1, r1
     ad4:	0b b6       	in	r0, 0x3b	; 59
     ad6:	0f 92       	push	r0
     ad8:	2f 93       	push	r18
     ada:	3f 93       	push	r19
     adc:	4f 93       	push	r20
     ade:	5f 93       	push	r21
     ae0:	6f 93       	push	r22
     ae2:	7f 93       	push	r23
     ae4:	8f 93       	push	r24
     ae6:	9f 93       	push	r25
     ae8:	af 93       	push	r26
     aea:	bf 93       	push	r27
     aec:	ef 93       	push	r30
     aee:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
     af0:	e0 91 32 20 	lds	r30, 0x2032
     af4:	f0 91 33 20 	lds	r31, 0x2033
     af8:	30 97       	sbiw	r30, 0x00	; 0
     afa:	09 f0       	breq	.+2      	; 0xafe <__vector_81+0x34>
		tc_tcd0_ccc_callback();
     afc:	19 95       	eicall
	}
}
     afe:	ff 91       	pop	r31
     b00:	ef 91       	pop	r30
     b02:	bf 91       	pop	r27
     b04:	af 91       	pop	r26
     b06:	9f 91       	pop	r25
     b08:	8f 91       	pop	r24
     b0a:	7f 91       	pop	r23
     b0c:	6f 91       	pop	r22
     b0e:	5f 91       	pop	r21
     b10:	4f 91       	pop	r20
     b12:	3f 91       	pop	r19
     b14:	2f 91       	pop	r18
     b16:	0f 90       	pop	r0
     b18:	0b be       	out	0x3b, r0	; 59
     b1a:	0f 90       	pop	r0
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	0f 90       	pop	r0
     b20:	1f 90       	pop	r1
     b22:	18 95       	reti

00000b24 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
     b24:	1f 92       	push	r1
     b26:	0f 92       	push	r0
     b28:	0f b6       	in	r0, 0x3f	; 63
     b2a:	0f 92       	push	r0
     b2c:	11 24       	eor	r1, r1
     b2e:	0b b6       	in	r0, 0x3b	; 59
     b30:	0f 92       	push	r0
     b32:	2f 93       	push	r18
     b34:	3f 93       	push	r19
     b36:	4f 93       	push	r20
     b38:	5f 93       	push	r21
     b3a:	6f 93       	push	r22
     b3c:	7f 93       	push	r23
     b3e:	8f 93       	push	r24
     b40:	9f 93       	push	r25
     b42:	af 93       	push	r26
     b44:	bf 93       	push	r27
     b46:	ef 93       	push	r30
     b48:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
     b4a:	e0 91 30 20 	lds	r30, 0x2030
     b4e:	f0 91 31 20 	lds	r31, 0x2031
     b52:	30 97       	sbiw	r30, 0x00	; 0
     b54:	09 f0       	breq	.+2      	; 0xb58 <__vector_82+0x34>
		tc_tcd0_ccd_callback();
     b56:	19 95       	eicall
	}
}
     b58:	ff 91       	pop	r31
     b5a:	ef 91       	pop	r30
     b5c:	bf 91       	pop	r27
     b5e:	af 91       	pop	r26
     b60:	9f 91       	pop	r25
     b62:	8f 91       	pop	r24
     b64:	7f 91       	pop	r23
     b66:	6f 91       	pop	r22
     b68:	5f 91       	pop	r21
     b6a:	4f 91       	pop	r20
     b6c:	3f 91       	pop	r19
     b6e:	2f 91       	pop	r18
     b70:	0f 90       	pop	r0
     b72:	0b be       	out	0x3b, r0	; 59
     b74:	0f 90       	pop	r0
     b76:	0f be       	out	0x3f, r0	; 63
     b78:	0f 90       	pop	r0
     b7a:	1f 90       	pop	r1
     b7c:	18 95       	reti

00000b7e <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
     b7e:	1f 92       	push	r1
     b80:	0f 92       	push	r0
     b82:	0f b6       	in	r0, 0x3f	; 63
     b84:	0f 92       	push	r0
     b86:	11 24       	eor	r1, r1
     b88:	0b b6       	in	r0, 0x3b	; 59
     b8a:	0f 92       	push	r0
     b8c:	2f 93       	push	r18
     b8e:	3f 93       	push	r19
     b90:	4f 93       	push	r20
     b92:	5f 93       	push	r21
     b94:	6f 93       	push	r22
     b96:	7f 93       	push	r23
     b98:	8f 93       	push	r24
     b9a:	9f 93       	push	r25
     b9c:	af 93       	push	r26
     b9e:	bf 93       	push	r27
     ba0:	ef 93       	push	r30
     ba2:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
     ba4:	e0 91 2e 20 	lds	r30, 0x202E
     ba8:	f0 91 2f 20 	lds	r31, 0x202F
     bac:	30 97       	sbiw	r30, 0x00	; 0
     bae:	09 f0       	breq	.+2      	; 0xbb2 <__vector_83+0x34>
		tc_tcd1_ovf_callback();
     bb0:	19 95       	eicall
	}
}
     bb2:	ff 91       	pop	r31
     bb4:	ef 91       	pop	r30
     bb6:	bf 91       	pop	r27
     bb8:	af 91       	pop	r26
     bba:	9f 91       	pop	r25
     bbc:	8f 91       	pop	r24
     bbe:	7f 91       	pop	r23
     bc0:	6f 91       	pop	r22
     bc2:	5f 91       	pop	r21
     bc4:	4f 91       	pop	r20
     bc6:	3f 91       	pop	r19
     bc8:	2f 91       	pop	r18
     bca:	0f 90       	pop	r0
     bcc:	0b be       	out	0x3b, r0	; 59
     bce:	0f 90       	pop	r0
     bd0:	0f be       	out	0x3f, r0	; 63
     bd2:	0f 90       	pop	r0
     bd4:	1f 90       	pop	r1
     bd6:	18 95       	reti

00000bd8 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
     bd8:	1f 92       	push	r1
     bda:	0f 92       	push	r0
     bdc:	0f b6       	in	r0, 0x3f	; 63
     bde:	0f 92       	push	r0
     be0:	11 24       	eor	r1, r1
     be2:	0b b6       	in	r0, 0x3b	; 59
     be4:	0f 92       	push	r0
     be6:	2f 93       	push	r18
     be8:	3f 93       	push	r19
     bea:	4f 93       	push	r20
     bec:	5f 93       	push	r21
     bee:	6f 93       	push	r22
     bf0:	7f 93       	push	r23
     bf2:	8f 93       	push	r24
     bf4:	9f 93       	push	r25
     bf6:	af 93       	push	r26
     bf8:	bf 93       	push	r27
     bfa:	ef 93       	push	r30
     bfc:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
     bfe:	e0 91 2c 20 	lds	r30, 0x202C
     c02:	f0 91 2d 20 	lds	r31, 0x202D
     c06:	30 97       	sbiw	r30, 0x00	; 0
     c08:	09 f0       	breq	.+2      	; 0xc0c <__vector_84+0x34>
		tc_tcd1_err_callback();
     c0a:	19 95       	eicall
	}
}
     c0c:	ff 91       	pop	r31
     c0e:	ef 91       	pop	r30
     c10:	bf 91       	pop	r27
     c12:	af 91       	pop	r26
     c14:	9f 91       	pop	r25
     c16:	8f 91       	pop	r24
     c18:	7f 91       	pop	r23
     c1a:	6f 91       	pop	r22
     c1c:	5f 91       	pop	r21
     c1e:	4f 91       	pop	r20
     c20:	3f 91       	pop	r19
     c22:	2f 91       	pop	r18
     c24:	0f 90       	pop	r0
     c26:	0b be       	out	0x3b, r0	; 59
     c28:	0f 90       	pop	r0
     c2a:	0f be       	out	0x3f, r0	; 63
     c2c:	0f 90       	pop	r0
     c2e:	1f 90       	pop	r1
     c30:	18 95       	reti

00000c32 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
     c32:	1f 92       	push	r1
     c34:	0f 92       	push	r0
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	0f 92       	push	r0
     c3a:	11 24       	eor	r1, r1
     c3c:	0b b6       	in	r0, 0x3b	; 59
     c3e:	0f 92       	push	r0
     c40:	2f 93       	push	r18
     c42:	3f 93       	push	r19
     c44:	4f 93       	push	r20
     c46:	5f 93       	push	r21
     c48:	6f 93       	push	r22
     c4a:	7f 93       	push	r23
     c4c:	8f 93       	push	r24
     c4e:	9f 93       	push	r25
     c50:	af 93       	push	r26
     c52:	bf 93       	push	r27
     c54:	ef 93       	push	r30
     c56:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
     c58:	e0 91 2a 20 	lds	r30, 0x202A
     c5c:	f0 91 2b 20 	lds	r31, 0x202B
     c60:	30 97       	sbiw	r30, 0x00	; 0
     c62:	09 f0       	breq	.+2      	; 0xc66 <__vector_85+0x34>
		tc_tcd1_cca_callback();
     c64:	19 95       	eicall
	}
}
     c66:	ff 91       	pop	r31
     c68:	ef 91       	pop	r30
     c6a:	bf 91       	pop	r27
     c6c:	af 91       	pop	r26
     c6e:	9f 91       	pop	r25
     c70:	8f 91       	pop	r24
     c72:	7f 91       	pop	r23
     c74:	6f 91       	pop	r22
     c76:	5f 91       	pop	r21
     c78:	4f 91       	pop	r20
     c7a:	3f 91       	pop	r19
     c7c:	2f 91       	pop	r18
     c7e:	0f 90       	pop	r0
     c80:	0b be       	out	0x3b, r0	; 59
     c82:	0f 90       	pop	r0
     c84:	0f be       	out	0x3f, r0	; 63
     c86:	0f 90       	pop	r0
     c88:	1f 90       	pop	r1
     c8a:	18 95       	reti

00000c8c <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
     c8c:	1f 92       	push	r1
     c8e:	0f 92       	push	r0
     c90:	0f b6       	in	r0, 0x3f	; 63
     c92:	0f 92       	push	r0
     c94:	11 24       	eor	r1, r1
     c96:	0b b6       	in	r0, 0x3b	; 59
     c98:	0f 92       	push	r0
     c9a:	2f 93       	push	r18
     c9c:	3f 93       	push	r19
     c9e:	4f 93       	push	r20
     ca0:	5f 93       	push	r21
     ca2:	6f 93       	push	r22
     ca4:	7f 93       	push	r23
     ca6:	8f 93       	push	r24
     ca8:	9f 93       	push	r25
     caa:	af 93       	push	r26
     cac:	bf 93       	push	r27
     cae:	ef 93       	push	r30
     cb0:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
     cb2:	e0 91 28 20 	lds	r30, 0x2028
     cb6:	f0 91 29 20 	lds	r31, 0x2029
     cba:	30 97       	sbiw	r30, 0x00	; 0
     cbc:	09 f0       	breq	.+2      	; 0xcc0 <__vector_86+0x34>
		tc_tcd1_ccb_callback();
     cbe:	19 95       	eicall
	}
}
     cc0:	ff 91       	pop	r31
     cc2:	ef 91       	pop	r30
     cc4:	bf 91       	pop	r27
     cc6:	af 91       	pop	r26
     cc8:	9f 91       	pop	r25
     cca:	8f 91       	pop	r24
     ccc:	7f 91       	pop	r23
     cce:	6f 91       	pop	r22
     cd0:	5f 91       	pop	r21
     cd2:	4f 91       	pop	r20
     cd4:	3f 91       	pop	r19
     cd6:	2f 91       	pop	r18
     cd8:	0f 90       	pop	r0
     cda:	0b be       	out	0x3b, r0	; 59
     cdc:	0f 90       	pop	r0
     cde:	0f be       	out	0x3f, r0	; 63
     ce0:	0f 90       	pop	r0
     ce2:	1f 90       	pop	r1
     ce4:	18 95       	reti

00000ce6 <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
     ce6:	1f 92       	push	r1
     ce8:	0f 92       	push	r0
     cea:	0f b6       	in	r0, 0x3f	; 63
     cec:	0f 92       	push	r0
     cee:	11 24       	eor	r1, r1
     cf0:	0b b6       	in	r0, 0x3b	; 59
     cf2:	0f 92       	push	r0
     cf4:	2f 93       	push	r18
     cf6:	3f 93       	push	r19
     cf8:	4f 93       	push	r20
     cfa:	5f 93       	push	r21
     cfc:	6f 93       	push	r22
     cfe:	7f 93       	push	r23
     d00:	8f 93       	push	r24
     d02:	9f 93       	push	r25
     d04:	af 93       	push	r26
     d06:	bf 93       	push	r27
     d08:	ef 93       	push	r30
     d0a:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
     d0c:	e0 91 26 20 	lds	r30, 0x2026
     d10:	f0 91 27 20 	lds	r31, 0x2027
     d14:	30 97       	sbiw	r30, 0x00	; 0
     d16:	09 f0       	breq	.+2      	; 0xd1a <__vector_47+0x34>
		tc_tce0_ovf_callback();
     d18:	19 95       	eicall
	}
}
     d1a:	ff 91       	pop	r31
     d1c:	ef 91       	pop	r30
     d1e:	bf 91       	pop	r27
     d20:	af 91       	pop	r26
     d22:	9f 91       	pop	r25
     d24:	8f 91       	pop	r24
     d26:	7f 91       	pop	r23
     d28:	6f 91       	pop	r22
     d2a:	5f 91       	pop	r21
     d2c:	4f 91       	pop	r20
     d2e:	3f 91       	pop	r19
     d30:	2f 91       	pop	r18
     d32:	0f 90       	pop	r0
     d34:	0b be       	out	0x3b, r0	; 59
     d36:	0f 90       	pop	r0
     d38:	0f be       	out	0x3f, r0	; 63
     d3a:	0f 90       	pop	r0
     d3c:	1f 90       	pop	r1
     d3e:	18 95       	reti

00000d40 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
     d40:	1f 92       	push	r1
     d42:	0f 92       	push	r0
     d44:	0f b6       	in	r0, 0x3f	; 63
     d46:	0f 92       	push	r0
     d48:	11 24       	eor	r1, r1
     d4a:	0b b6       	in	r0, 0x3b	; 59
     d4c:	0f 92       	push	r0
     d4e:	2f 93       	push	r18
     d50:	3f 93       	push	r19
     d52:	4f 93       	push	r20
     d54:	5f 93       	push	r21
     d56:	6f 93       	push	r22
     d58:	7f 93       	push	r23
     d5a:	8f 93       	push	r24
     d5c:	9f 93       	push	r25
     d5e:	af 93       	push	r26
     d60:	bf 93       	push	r27
     d62:	ef 93       	push	r30
     d64:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
     d66:	e0 91 24 20 	lds	r30, 0x2024
     d6a:	f0 91 25 20 	lds	r31, 0x2025
     d6e:	30 97       	sbiw	r30, 0x00	; 0
     d70:	09 f0       	breq	.+2      	; 0xd74 <__vector_48+0x34>
		tc_tce0_err_callback();
     d72:	19 95       	eicall
	}
}
     d74:	ff 91       	pop	r31
     d76:	ef 91       	pop	r30
     d78:	bf 91       	pop	r27
     d7a:	af 91       	pop	r26
     d7c:	9f 91       	pop	r25
     d7e:	8f 91       	pop	r24
     d80:	7f 91       	pop	r23
     d82:	6f 91       	pop	r22
     d84:	5f 91       	pop	r21
     d86:	4f 91       	pop	r20
     d88:	3f 91       	pop	r19
     d8a:	2f 91       	pop	r18
     d8c:	0f 90       	pop	r0
     d8e:	0b be       	out	0x3b, r0	; 59
     d90:	0f 90       	pop	r0
     d92:	0f be       	out	0x3f, r0	; 63
     d94:	0f 90       	pop	r0
     d96:	1f 90       	pop	r1
     d98:	18 95       	reti

00000d9a <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
     d9a:	1f 92       	push	r1
     d9c:	0f 92       	push	r0
     d9e:	0f b6       	in	r0, 0x3f	; 63
     da0:	0f 92       	push	r0
     da2:	11 24       	eor	r1, r1
     da4:	0b b6       	in	r0, 0x3b	; 59
     da6:	0f 92       	push	r0
     da8:	2f 93       	push	r18
     daa:	3f 93       	push	r19
     dac:	4f 93       	push	r20
     dae:	5f 93       	push	r21
     db0:	6f 93       	push	r22
     db2:	7f 93       	push	r23
     db4:	8f 93       	push	r24
     db6:	9f 93       	push	r25
     db8:	af 93       	push	r26
     dba:	bf 93       	push	r27
     dbc:	ef 93       	push	r30
     dbe:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
     dc0:	e0 91 22 20 	lds	r30, 0x2022
     dc4:	f0 91 23 20 	lds	r31, 0x2023
     dc8:	30 97       	sbiw	r30, 0x00	; 0
     dca:	09 f0       	breq	.+2      	; 0xdce <__vector_49+0x34>
		tc_tce0_cca_callback();
     dcc:	19 95       	eicall
	}
}
     dce:	ff 91       	pop	r31
     dd0:	ef 91       	pop	r30
     dd2:	bf 91       	pop	r27
     dd4:	af 91       	pop	r26
     dd6:	9f 91       	pop	r25
     dd8:	8f 91       	pop	r24
     dda:	7f 91       	pop	r23
     ddc:	6f 91       	pop	r22
     dde:	5f 91       	pop	r21
     de0:	4f 91       	pop	r20
     de2:	3f 91       	pop	r19
     de4:	2f 91       	pop	r18
     de6:	0f 90       	pop	r0
     de8:	0b be       	out	0x3b, r0	; 59
     dea:	0f 90       	pop	r0
     dec:	0f be       	out	0x3f, r0	; 63
     dee:	0f 90       	pop	r0
     df0:	1f 90       	pop	r1
     df2:	18 95       	reti

00000df4 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
     df4:	1f 92       	push	r1
     df6:	0f 92       	push	r0
     df8:	0f b6       	in	r0, 0x3f	; 63
     dfa:	0f 92       	push	r0
     dfc:	11 24       	eor	r1, r1
     dfe:	0b b6       	in	r0, 0x3b	; 59
     e00:	0f 92       	push	r0
     e02:	2f 93       	push	r18
     e04:	3f 93       	push	r19
     e06:	4f 93       	push	r20
     e08:	5f 93       	push	r21
     e0a:	6f 93       	push	r22
     e0c:	7f 93       	push	r23
     e0e:	8f 93       	push	r24
     e10:	9f 93       	push	r25
     e12:	af 93       	push	r26
     e14:	bf 93       	push	r27
     e16:	ef 93       	push	r30
     e18:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
     e1a:	e0 91 20 20 	lds	r30, 0x2020
     e1e:	f0 91 21 20 	lds	r31, 0x2021
     e22:	30 97       	sbiw	r30, 0x00	; 0
     e24:	09 f0       	breq	.+2      	; 0xe28 <__vector_50+0x34>
		tc_tce0_ccb_callback();
     e26:	19 95       	eicall
	}
}
     e28:	ff 91       	pop	r31
     e2a:	ef 91       	pop	r30
     e2c:	bf 91       	pop	r27
     e2e:	af 91       	pop	r26
     e30:	9f 91       	pop	r25
     e32:	8f 91       	pop	r24
     e34:	7f 91       	pop	r23
     e36:	6f 91       	pop	r22
     e38:	5f 91       	pop	r21
     e3a:	4f 91       	pop	r20
     e3c:	3f 91       	pop	r19
     e3e:	2f 91       	pop	r18
     e40:	0f 90       	pop	r0
     e42:	0b be       	out	0x3b, r0	; 59
     e44:	0f 90       	pop	r0
     e46:	0f be       	out	0x3f, r0	; 63
     e48:	0f 90       	pop	r0
     e4a:	1f 90       	pop	r1
     e4c:	18 95       	reti

00000e4e <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
     e4e:	1f 92       	push	r1
     e50:	0f 92       	push	r0
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	0f 92       	push	r0
     e56:	11 24       	eor	r1, r1
     e58:	0b b6       	in	r0, 0x3b	; 59
     e5a:	0f 92       	push	r0
     e5c:	2f 93       	push	r18
     e5e:	3f 93       	push	r19
     e60:	4f 93       	push	r20
     e62:	5f 93       	push	r21
     e64:	6f 93       	push	r22
     e66:	7f 93       	push	r23
     e68:	8f 93       	push	r24
     e6a:	9f 93       	push	r25
     e6c:	af 93       	push	r26
     e6e:	bf 93       	push	r27
     e70:	ef 93       	push	r30
     e72:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
     e74:	e0 91 1e 20 	lds	r30, 0x201E
     e78:	f0 91 1f 20 	lds	r31, 0x201F
     e7c:	30 97       	sbiw	r30, 0x00	; 0
     e7e:	09 f0       	breq	.+2      	; 0xe82 <__vector_51+0x34>
		tc_tce0_ccc_callback();
     e80:	19 95       	eicall
	}
}
     e82:	ff 91       	pop	r31
     e84:	ef 91       	pop	r30
     e86:	bf 91       	pop	r27
     e88:	af 91       	pop	r26
     e8a:	9f 91       	pop	r25
     e8c:	8f 91       	pop	r24
     e8e:	7f 91       	pop	r23
     e90:	6f 91       	pop	r22
     e92:	5f 91       	pop	r21
     e94:	4f 91       	pop	r20
     e96:	3f 91       	pop	r19
     e98:	2f 91       	pop	r18
     e9a:	0f 90       	pop	r0
     e9c:	0b be       	out	0x3b, r0	; 59
     e9e:	0f 90       	pop	r0
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	0f 90       	pop	r0
     ea4:	1f 90       	pop	r1
     ea6:	18 95       	reti

00000ea8 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
     ea8:	1f 92       	push	r1
     eaa:	0f 92       	push	r0
     eac:	0f b6       	in	r0, 0x3f	; 63
     eae:	0f 92       	push	r0
     eb0:	11 24       	eor	r1, r1
     eb2:	0b b6       	in	r0, 0x3b	; 59
     eb4:	0f 92       	push	r0
     eb6:	2f 93       	push	r18
     eb8:	3f 93       	push	r19
     eba:	4f 93       	push	r20
     ebc:	5f 93       	push	r21
     ebe:	6f 93       	push	r22
     ec0:	7f 93       	push	r23
     ec2:	8f 93       	push	r24
     ec4:	9f 93       	push	r25
     ec6:	af 93       	push	r26
     ec8:	bf 93       	push	r27
     eca:	ef 93       	push	r30
     ecc:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
     ece:	e0 91 1c 20 	lds	r30, 0x201C
     ed2:	f0 91 1d 20 	lds	r31, 0x201D
     ed6:	30 97       	sbiw	r30, 0x00	; 0
     ed8:	09 f0       	breq	.+2      	; 0xedc <__vector_52+0x34>
		tc_tce0_ccd_callback();
     eda:	19 95       	eicall
	}
}
     edc:	ff 91       	pop	r31
     ede:	ef 91       	pop	r30
     ee0:	bf 91       	pop	r27
     ee2:	af 91       	pop	r26
     ee4:	9f 91       	pop	r25
     ee6:	8f 91       	pop	r24
     ee8:	7f 91       	pop	r23
     eea:	6f 91       	pop	r22
     eec:	5f 91       	pop	r21
     eee:	4f 91       	pop	r20
     ef0:	3f 91       	pop	r19
     ef2:	2f 91       	pop	r18
     ef4:	0f 90       	pop	r0
     ef6:	0b be       	out	0x3b, r0	; 59
     ef8:	0f 90       	pop	r0
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	0f 90       	pop	r0
     efe:	1f 90       	pop	r1
     f00:	18 95       	reti

00000f02 <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
     f02:	1f 92       	push	r1
     f04:	0f 92       	push	r0
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	0f 92       	push	r0
     f0a:	11 24       	eor	r1, r1
     f0c:	0b b6       	in	r0, 0x3b	; 59
     f0e:	0f 92       	push	r0
     f10:	2f 93       	push	r18
     f12:	3f 93       	push	r19
     f14:	4f 93       	push	r20
     f16:	5f 93       	push	r21
     f18:	6f 93       	push	r22
     f1a:	7f 93       	push	r23
     f1c:	8f 93       	push	r24
     f1e:	9f 93       	push	r25
     f20:	af 93       	push	r26
     f22:	bf 93       	push	r27
     f24:	ef 93       	push	r30
     f26:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
     f28:	e0 91 1a 20 	lds	r30, 0x201A
     f2c:	f0 91 1b 20 	lds	r31, 0x201B
     f30:	30 97       	sbiw	r30, 0x00	; 0
     f32:	09 f0       	breq	.+2      	; 0xf36 <__vector_53+0x34>
		tc_tce1_ovf_callback();
     f34:	19 95       	eicall
	}
}
     f36:	ff 91       	pop	r31
     f38:	ef 91       	pop	r30
     f3a:	bf 91       	pop	r27
     f3c:	af 91       	pop	r26
     f3e:	9f 91       	pop	r25
     f40:	8f 91       	pop	r24
     f42:	7f 91       	pop	r23
     f44:	6f 91       	pop	r22
     f46:	5f 91       	pop	r21
     f48:	4f 91       	pop	r20
     f4a:	3f 91       	pop	r19
     f4c:	2f 91       	pop	r18
     f4e:	0f 90       	pop	r0
     f50:	0b be       	out	0x3b, r0	; 59
     f52:	0f 90       	pop	r0
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	0f 90       	pop	r0
     f58:	1f 90       	pop	r1
     f5a:	18 95       	reti

00000f5c <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
     f5c:	1f 92       	push	r1
     f5e:	0f 92       	push	r0
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	0f 92       	push	r0
     f64:	11 24       	eor	r1, r1
     f66:	0b b6       	in	r0, 0x3b	; 59
     f68:	0f 92       	push	r0
     f6a:	2f 93       	push	r18
     f6c:	3f 93       	push	r19
     f6e:	4f 93       	push	r20
     f70:	5f 93       	push	r21
     f72:	6f 93       	push	r22
     f74:	7f 93       	push	r23
     f76:	8f 93       	push	r24
     f78:	9f 93       	push	r25
     f7a:	af 93       	push	r26
     f7c:	bf 93       	push	r27
     f7e:	ef 93       	push	r30
     f80:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
     f82:	e0 91 18 20 	lds	r30, 0x2018
     f86:	f0 91 19 20 	lds	r31, 0x2019
     f8a:	30 97       	sbiw	r30, 0x00	; 0
     f8c:	09 f0       	breq	.+2      	; 0xf90 <__vector_54+0x34>
		tc_tce1_err_callback();
     f8e:	19 95       	eicall
	}
}
     f90:	ff 91       	pop	r31
     f92:	ef 91       	pop	r30
     f94:	bf 91       	pop	r27
     f96:	af 91       	pop	r26
     f98:	9f 91       	pop	r25
     f9a:	8f 91       	pop	r24
     f9c:	7f 91       	pop	r23
     f9e:	6f 91       	pop	r22
     fa0:	5f 91       	pop	r21
     fa2:	4f 91       	pop	r20
     fa4:	3f 91       	pop	r19
     fa6:	2f 91       	pop	r18
     fa8:	0f 90       	pop	r0
     faa:	0b be       	out	0x3b, r0	; 59
     fac:	0f 90       	pop	r0
     fae:	0f be       	out	0x3f, r0	; 63
     fb0:	0f 90       	pop	r0
     fb2:	1f 90       	pop	r1
     fb4:	18 95       	reti

00000fb6 <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
     fb6:	1f 92       	push	r1
     fb8:	0f 92       	push	r0
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	0f 92       	push	r0
     fbe:	11 24       	eor	r1, r1
     fc0:	0b b6       	in	r0, 0x3b	; 59
     fc2:	0f 92       	push	r0
     fc4:	2f 93       	push	r18
     fc6:	3f 93       	push	r19
     fc8:	4f 93       	push	r20
     fca:	5f 93       	push	r21
     fcc:	6f 93       	push	r22
     fce:	7f 93       	push	r23
     fd0:	8f 93       	push	r24
     fd2:	9f 93       	push	r25
     fd4:	af 93       	push	r26
     fd6:	bf 93       	push	r27
     fd8:	ef 93       	push	r30
     fda:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
     fdc:	e0 91 16 20 	lds	r30, 0x2016
     fe0:	f0 91 17 20 	lds	r31, 0x2017
     fe4:	30 97       	sbiw	r30, 0x00	; 0
     fe6:	09 f0       	breq	.+2      	; 0xfea <__vector_55+0x34>
		tc_tce1_cca_callback();
     fe8:	19 95       	eicall
	}
}
     fea:	ff 91       	pop	r31
     fec:	ef 91       	pop	r30
     fee:	bf 91       	pop	r27
     ff0:	af 91       	pop	r26
     ff2:	9f 91       	pop	r25
     ff4:	8f 91       	pop	r24
     ff6:	7f 91       	pop	r23
     ff8:	6f 91       	pop	r22
     ffa:	5f 91       	pop	r21
     ffc:	4f 91       	pop	r20
     ffe:	3f 91       	pop	r19
    1000:	2f 91       	pop	r18
    1002:	0f 90       	pop	r0
    1004:	0b be       	out	0x3b, r0	; 59
    1006:	0f 90       	pop	r0
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	0f 90       	pop	r0
    100c:	1f 90       	pop	r1
    100e:	18 95       	reti

00001010 <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    1010:	1f 92       	push	r1
    1012:	0f 92       	push	r0
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	0f 92       	push	r0
    1018:	11 24       	eor	r1, r1
    101a:	0b b6       	in	r0, 0x3b	; 59
    101c:	0f 92       	push	r0
    101e:	2f 93       	push	r18
    1020:	3f 93       	push	r19
    1022:	4f 93       	push	r20
    1024:	5f 93       	push	r21
    1026:	6f 93       	push	r22
    1028:	7f 93       	push	r23
    102a:	8f 93       	push	r24
    102c:	9f 93       	push	r25
    102e:	af 93       	push	r26
    1030:	bf 93       	push	r27
    1032:	ef 93       	push	r30
    1034:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    1036:	e0 91 14 20 	lds	r30, 0x2014
    103a:	f0 91 15 20 	lds	r31, 0x2015
    103e:	30 97       	sbiw	r30, 0x00	; 0
    1040:	09 f0       	breq	.+2      	; 0x1044 <__vector_56+0x34>
		tc_tce1_ccb_callback();
    1042:	19 95       	eicall
	}
}
    1044:	ff 91       	pop	r31
    1046:	ef 91       	pop	r30
    1048:	bf 91       	pop	r27
    104a:	af 91       	pop	r26
    104c:	9f 91       	pop	r25
    104e:	8f 91       	pop	r24
    1050:	7f 91       	pop	r23
    1052:	6f 91       	pop	r22
    1054:	5f 91       	pop	r21
    1056:	4f 91       	pop	r20
    1058:	3f 91       	pop	r19
    105a:	2f 91       	pop	r18
    105c:	0f 90       	pop	r0
    105e:	0b be       	out	0x3b, r0	; 59
    1060:	0f 90       	pop	r0
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	0f 90       	pop	r0
    1066:	1f 90       	pop	r1
    1068:	18 95       	reti

0000106a <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    106a:	1f 92       	push	r1
    106c:	0f 92       	push	r0
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	0f 92       	push	r0
    1072:	11 24       	eor	r1, r1
    1074:	0b b6       	in	r0, 0x3b	; 59
    1076:	0f 92       	push	r0
    1078:	2f 93       	push	r18
    107a:	3f 93       	push	r19
    107c:	4f 93       	push	r20
    107e:	5f 93       	push	r21
    1080:	6f 93       	push	r22
    1082:	7f 93       	push	r23
    1084:	8f 93       	push	r24
    1086:	9f 93       	push	r25
    1088:	af 93       	push	r26
    108a:	bf 93       	push	r27
    108c:	ef 93       	push	r30
    108e:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    1090:	e0 91 12 20 	lds	r30, 0x2012
    1094:	f0 91 13 20 	lds	r31, 0x2013
    1098:	30 97       	sbiw	r30, 0x00	; 0
    109a:	09 f0       	breq	.+2      	; 0x109e <__vector_108+0x34>
		tc_tcf0_ovf_callback();
    109c:	19 95       	eicall
	}
}
    109e:	ff 91       	pop	r31
    10a0:	ef 91       	pop	r30
    10a2:	bf 91       	pop	r27
    10a4:	af 91       	pop	r26
    10a6:	9f 91       	pop	r25
    10a8:	8f 91       	pop	r24
    10aa:	7f 91       	pop	r23
    10ac:	6f 91       	pop	r22
    10ae:	5f 91       	pop	r21
    10b0:	4f 91       	pop	r20
    10b2:	3f 91       	pop	r19
    10b4:	2f 91       	pop	r18
    10b6:	0f 90       	pop	r0
    10b8:	0b be       	out	0x3b, r0	; 59
    10ba:	0f 90       	pop	r0
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	0f 90       	pop	r0
    10c0:	1f 90       	pop	r1
    10c2:	18 95       	reti

000010c4 <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    10c4:	1f 92       	push	r1
    10c6:	0f 92       	push	r0
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	0f 92       	push	r0
    10cc:	11 24       	eor	r1, r1
    10ce:	0b b6       	in	r0, 0x3b	; 59
    10d0:	0f 92       	push	r0
    10d2:	2f 93       	push	r18
    10d4:	3f 93       	push	r19
    10d6:	4f 93       	push	r20
    10d8:	5f 93       	push	r21
    10da:	6f 93       	push	r22
    10dc:	7f 93       	push	r23
    10de:	8f 93       	push	r24
    10e0:	9f 93       	push	r25
    10e2:	af 93       	push	r26
    10e4:	bf 93       	push	r27
    10e6:	ef 93       	push	r30
    10e8:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    10ea:	e0 91 10 20 	lds	r30, 0x2010
    10ee:	f0 91 11 20 	lds	r31, 0x2011
    10f2:	30 97       	sbiw	r30, 0x00	; 0
    10f4:	09 f0       	breq	.+2      	; 0x10f8 <__vector_109+0x34>
		tc_tcf0_err_callback();
    10f6:	19 95       	eicall
	}
}
    10f8:	ff 91       	pop	r31
    10fa:	ef 91       	pop	r30
    10fc:	bf 91       	pop	r27
    10fe:	af 91       	pop	r26
    1100:	9f 91       	pop	r25
    1102:	8f 91       	pop	r24
    1104:	7f 91       	pop	r23
    1106:	6f 91       	pop	r22
    1108:	5f 91       	pop	r21
    110a:	4f 91       	pop	r20
    110c:	3f 91       	pop	r19
    110e:	2f 91       	pop	r18
    1110:	0f 90       	pop	r0
    1112:	0b be       	out	0x3b, r0	; 59
    1114:	0f 90       	pop	r0
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	0f 90       	pop	r0
    111a:	1f 90       	pop	r1
    111c:	18 95       	reti

0000111e <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    111e:	1f 92       	push	r1
    1120:	0f 92       	push	r0
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	0f 92       	push	r0
    1126:	11 24       	eor	r1, r1
    1128:	0b b6       	in	r0, 0x3b	; 59
    112a:	0f 92       	push	r0
    112c:	2f 93       	push	r18
    112e:	3f 93       	push	r19
    1130:	4f 93       	push	r20
    1132:	5f 93       	push	r21
    1134:	6f 93       	push	r22
    1136:	7f 93       	push	r23
    1138:	8f 93       	push	r24
    113a:	9f 93       	push	r25
    113c:	af 93       	push	r26
    113e:	bf 93       	push	r27
    1140:	ef 93       	push	r30
    1142:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    1144:	e0 91 0e 20 	lds	r30, 0x200E
    1148:	f0 91 0f 20 	lds	r31, 0x200F
    114c:	30 97       	sbiw	r30, 0x00	; 0
    114e:	09 f0       	breq	.+2      	; 0x1152 <__vector_110+0x34>
		tc_tcf0_cca_callback();
    1150:	19 95       	eicall
	}
}
    1152:	ff 91       	pop	r31
    1154:	ef 91       	pop	r30
    1156:	bf 91       	pop	r27
    1158:	af 91       	pop	r26
    115a:	9f 91       	pop	r25
    115c:	8f 91       	pop	r24
    115e:	7f 91       	pop	r23
    1160:	6f 91       	pop	r22
    1162:	5f 91       	pop	r21
    1164:	4f 91       	pop	r20
    1166:	3f 91       	pop	r19
    1168:	2f 91       	pop	r18
    116a:	0f 90       	pop	r0
    116c:	0b be       	out	0x3b, r0	; 59
    116e:	0f 90       	pop	r0
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	0f 90       	pop	r0
    1174:	1f 90       	pop	r1
    1176:	18 95       	reti

00001178 <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    1178:	1f 92       	push	r1
    117a:	0f 92       	push	r0
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	0f 92       	push	r0
    1180:	11 24       	eor	r1, r1
    1182:	0b b6       	in	r0, 0x3b	; 59
    1184:	0f 92       	push	r0
    1186:	2f 93       	push	r18
    1188:	3f 93       	push	r19
    118a:	4f 93       	push	r20
    118c:	5f 93       	push	r21
    118e:	6f 93       	push	r22
    1190:	7f 93       	push	r23
    1192:	8f 93       	push	r24
    1194:	9f 93       	push	r25
    1196:	af 93       	push	r26
    1198:	bf 93       	push	r27
    119a:	ef 93       	push	r30
    119c:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    119e:	e0 91 0c 20 	lds	r30, 0x200C
    11a2:	f0 91 0d 20 	lds	r31, 0x200D
    11a6:	30 97       	sbiw	r30, 0x00	; 0
    11a8:	09 f0       	breq	.+2      	; 0x11ac <__vector_111+0x34>
		tc_tcf0_ccb_callback();
    11aa:	19 95       	eicall
	}
}
    11ac:	ff 91       	pop	r31
    11ae:	ef 91       	pop	r30
    11b0:	bf 91       	pop	r27
    11b2:	af 91       	pop	r26
    11b4:	9f 91       	pop	r25
    11b6:	8f 91       	pop	r24
    11b8:	7f 91       	pop	r23
    11ba:	6f 91       	pop	r22
    11bc:	5f 91       	pop	r21
    11be:	4f 91       	pop	r20
    11c0:	3f 91       	pop	r19
    11c2:	2f 91       	pop	r18
    11c4:	0f 90       	pop	r0
    11c6:	0b be       	out	0x3b, r0	; 59
    11c8:	0f 90       	pop	r0
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	0f 90       	pop	r0
    11ce:	1f 90       	pop	r1
    11d0:	18 95       	reti

000011d2 <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    11d2:	1f 92       	push	r1
    11d4:	0f 92       	push	r0
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	0f 92       	push	r0
    11da:	11 24       	eor	r1, r1
    11dc:	0b b6       	in	r0, 0x3b	; 59
    11de:	0f 92       	push	r0
    11e0:	2f 93       	push	r18
    11e2:	3f 93       	push	r19
    11e4:	4f 93       	push	r20
    11e6:	5f 93       	push	r21
    11e8:	6f 93       	push	r22
    11ea:	7f 93       	push	r23
    11ec:	8f 93       	push	r24
    11ee:	9f 93       	push	r25
    11f0:	af 93       	push	r26
    11f2:	bf 93       	push	r27
    11f4:	ef 93       	push	r30
    11f6:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    11f8:	e0 91 0a 20 	lds	r30, 0x200A
    11fc:	f0 91 0b 20 	lds	r31, 0x200B
    1200:	30 97       	sbiw	r30, 0x00	; 0
    1202:	09 f0       	breq	.+2      	; 0x1206 <__vector_112+0x34>
		tc_tcf0_ccc_callback();
    1204:	19 95       	eicall
	}
}
    1206:	ff 91       	pop	r31
    1208:	ef 91       	pop	r30
    120a:	bf 91       	pop	r27
    120c:	af 91       	pop	r26
    120e:	9f 91       	pop	r25
    1210:	8f 91       	pop	r24
    1212:	7f 91       	pop	r23
    1214:	6f 91       	pop	r22
    1216:	5f 91       	pop	r21
    1218:	4f 91       	pop	r20
    121a:	3f 91       	pop	r19
    121c:	2f 91       	pop	r18
    121e:	0f 90       	pop	r0
    1220:	0b be       	out	0x3b, r0	; 59
    1222:	0f 90       	pop	r0
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	0f 90       	pop	r0
    1228:	1f 90       	pop	r1
    122a:	18 95       	reti

0000122c <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    122c:	1f 92       	push	r1
    122e:	0f 92       	push	r0
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	0f 92       	push	r0
    1234:	11 24       	eor	r1, r1
    1236:	0b b6       	in	r0, 0x3b	; 59
    1238:	0f 92       	push	r0
    123a:	2f 93       	push	r18
    123c:	3f 93       	push	r19
    123e:	4f 93       	push	r20
    1240:	5f 93       	push	r21
    1242:	6f 93       	push	r22
    1244:	7f 93       	push	r23
    1246:	8f 93       	push	r24
    1248:	9f 93       	push	r25
    124a:	af 93       	push	r26
    124c:	bf 93       	push	r27
    124e:	ef 93       	push	r30
    1250:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    1252:	e0 91 08 20 	lds	r30, 0x2008
    1256:	f0 91 09 20 	lds	r31, 0x2009
    125a:	30 97       	sbiw	r30, 0x00	; 0
    125c:	09 f0       	breq	.+2      	; 0x1260 <__vector_113+0x34>
		tc_tcf0_ccd_callback();
    125e:	19 95       	eicall
	}
}
    1260:	ff 91       	pop	r31
    1262:	ef 91       	pop	r30
    1264:	bf 91       	pop	r27
    1266:	af 91       	pop	r26
    1268:	9f 91       	pop	r25
    126a:	8f 91       	pop	r24
    126c:	7f 91       	pop	r23
    126e:	6f 91       	pop	r22
    1270:	5f 91       	pop	r21
    1272:	4f 91       	pop	r20
    1274:	3f 91       	pop	r19
    1276:	2f 91       	pop	r18
    1278:	0f 90       	pop	r0
    127a:	0b be       	out	0x3b, r0	; 59
    127c:	0f 90       	pop	r0
    127e:	0f be       	out	0x3f, r0	; 63
    1280:	0f 90       	pop	r0
    1282:	1f 90       	pop	r1
    1284:	18 95       	reti

00001286 <usart_serial_write_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
    1286:	ef 92       	push	r14
    1288:	ff 92       	push	r15
    128a:	0f 93       	push	r16
    128c:	1f 93       	push	r17
    128e:	cf 93       	push	r28
    1290:	df 93       	push	r29
    1292:	7c 01       	movw	r14, r24
    1294:	8b 01       	movw	r16, r22
    1296:	ea 01       	movw	r28, r20
	while (len) {
    1298:	20 97       	sbiw	r28, 0x00	; 0
    129a:	41 f0       	breq	.+16     	; 0x12ac <usart_serial_write_packet+0x26>
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    129c:	f8 01       	movw	r30, r16
    129e:	61 91       	ld	r22, Z+
    12a0:	8f 01       	movw	r16, r30
    12a2:	c7 01       	movw	r24, r14
    12a4:	0b d0       	rcall	.+22     	; 0x12bc <usart_putchar>
		usart_serial_putchar(usart, *data);
		len--;
    12a6:	21 97       	sbiw	r28, 0x01	; 1
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
    12a8:	20 97       	sbiw	r28, 0x00	; 0
    12aa:	c1 f7       	brne	.-16     	; 0x129c <usart_serial_write_packet+0x16>
		usart_serial_putchar(usart, *data);
		len--;
		data++;
	}
	return STATUS_OK;
}
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	df 91       	pop	r29
    12b0:	cf 91       	pop	r28
    12b2:	1f 91       	pop	r17
    12b4:	0f 91       	pop	r16
    12b6:	ff 90       	pop	r15
    12b8:	ef 90       	pop	r14
    12ba:	08 95       	ret

000012bc <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    12bc:	fc 01       	movw	r30, r24
    12be:	81 81       	ldd	r24, Z+1	; 0x01
    12c0:	85 ff       	sbrs	r24, 5
    12c2:	fd cf       	rjmp	.-6      	; 0x12be <usart_putchar+0x2>
    12c4:	60 83       	st	Z, r22
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	08 95       	ret

000012cc <usart_getchar>:
    12cc:	fc 01       	movw	r30, r24
    12ce:	81 81       	ldd	r24, Z+1	; 0x01
    12d0:	88 23       	and	r24, r24
    12d2:	ec f7       	brge	.-6      	; 0x12ce <usart_getchar+0x2>
    12d4:	80 81       	ld	r24, Z
    12d6:	08 95       	ret

000012d8 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    12d8:	4f 92       	push	r4
    12da:	5f 92       	push	r5
    12dc:	6f 92       	push	r6
    12de:	7f 92       	push	r7
    12e0:	8f 92       	push	r8
    12e2:	9f 92       	push	r9
    12e4:	af 92       	push	r10
    12e6:	bf 92       	push	r11
    12e8:	cf 92       	push	r12
    12ea:	df 92       	push	r13
    12ec:	ef 92       	push	r14
    12ee:	ff 92       	push	r15
    12f0:	0f 93       	push	r16
    12f2:	1f 93       	push	r17
    12f4:	cf 93       	push	r28
    12f6:	df 93       	push	r29
    12f8:	ec 01       	movw	r28, r24
    12fa:	4a 01       	movw	r8, r20
    12fc:	5b 01       	movw	r10, r22
    12fe:	28 01       	movw	r4, r16
    1300:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    1302:	d9 01       	movw	r26, r18
    1304:	c8 01       	movw	r24, r16
    1306:	68 94       	set
    1308:	12 f8       	bld	r1, 2
    130a:	b6 95       	lsr	r27
    130c:	a7 95       	ror	r26
    130e:	97 95       	ror	r25
    1310:	87 95       	ror	r24
    1312:	16 94       	lsr	r1
    1314:	d1 f7       	brne	.-12     	; 0x130a <usart_set_baudrate+0x32>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    1316:	b9 01       	movw	r22, r18
    1318:	a8 01       	movw	r20, r16
    131a:	03 2e       	mov	r0, r19
    131c:	36 e1       	ldi	r19, 0x16	; 22
    131e:	76 95       	lsr	r23
    1320:	67 95       	ror	r22
    1322:	57 95       	ror	r21
    1324:	47 95       	ror	r20
    1326:	3a 95       	dec	r19
    1328:	d1 f7       	brne	.-12     	; 0x131e <usart_set_baudrate+0x46>
    132a:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    132c:	2c 81       	ldd	r18, Y+4	; 0x04
    132e:	22 fd       	sbrc	r18, 2
    1330:	08 c0       	rjmp	.+16     	; 0x1342 <usart_set_baudrate+0x6a>
		max_rate /= 2;
    1332:	b6 95       	lsr	r27
    1334:	a7 95       	ror	r26
    1336:	97 95       	ror	r25
    1338:	87 95       	ror	r24
		min_rate /= 2;
    133a:	76 95       	lsr	r23
    133c:	67 95       	ror	r22
    133e:	57 95       	ror	r21
    1340:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    1342:	88 15       	cp	r24, r8
    1344:	99 05       	cpc	r25, r9
    1346:	aa 05       	cpc	r26, r10
    1348:	bb 05       	cpc	r27, r11
    134a:	08 f4       	brcc	.+2      	; 0x134e <usart_set_baudrate+0x76>
    134c:	a6 c0       	rjmp	.+332    	; 0x149a <usart_set_baudrate+0x1c2>
    134e:	84 16       	cp	r8, r20
    1350:	95 06       	cpc	r9, r21
    1352:	a6 06       	cpc	r10, r22
    1354:	b7 06       	cpc	r11, r23
    1356:	08 f4       	brcc	.+2      	; 0x135a <usart_set_baudrate+0x82>
    1358:	a2 c0       	rjmp	.+324    	; 0x149e <usart_set_baudrate+0x1c6>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    135a:	8c 81       	ldd	r24, Y+4	; 0x04
    135c:	82 fd       	sbrc	r24, 2
    135e:	04 c0       	rjmp	.+8      	; 0x1368 <usart_set_baudrate+0x90>
		baud *= 2;
    1360:	88 0c       	add	r8, r8
    1362:	99 1c       	adc	r9, r9
    1364:	aa 1c       	adc	r10, r10
    1366:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    1368:	c3 01       	movw	r24, r6
    136a:	b2 01       	movw	r22, r4
    136c:	a5 01       	movw	r20, r10
    136e:	94 01       	movw	r18, r8
    1370:	0e 94 e6 12 	call	0x25cc	; 0x25cc <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    1374:	2f 3f       	cpi	r18, 0xFF	; 255
    1376:	31 05       	cpc	r19, r1
    1378:	41 05       	cpc	r20, r1
    137a:	51 05       	cpc	r21, r1
    137c:	08 f4       	brcc	.+2      	; 0x1380 <usart_set_baudrate+0xa8>
    137e:	91 c0       	rjmp	.+290    	; 0x14a2 <usart_set_baudrate+0x1ca>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
    1380:	c1 2c       	mov	r12, r1
    1382:	d1 2c       	mov	r13, r1
    1384:	76 01       	movw	r14, r12
    1386:	ca 94       	dec	r12
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1388:	19 ef       	ldi	r17, 0xF9	; 249
    138a:	05 c0       	rjmp	.+10     	; 0x1396 <usart_set_baudrate+0xbe>
		if (ratio < limit) {
    138c:	2c 15       	cp	r18, r12
    138e:	3d 05       	cpc	r19, r13
    1390:	4e 05       	cpc	r20, r14
    1392:	5f 05       	cpc	r21, r15
    1394:	68 f0       	brcs	.+26     	; 0x13b0 <usart_set_baudrate+0xd8>
			break;
		}

		limit <<= 1;
    1396:	cc 0c       	add	r12, r12
    1398:	dd 1c       	adc	r13, r13
    139a:	ee 1c       	adc	r14, r14
    139c:	ff 1c       	adc	r15, r15

		if (exp < -3) {
    139e:	1d 3f       	cpi	r17, 0xFD	; 253
    13a0:	14 f4       	brge	.+4      	; 0x13a6 <usart_set_baudrate+0xce>
			limit |= 1;
    13a2:	68 94       	set
    13a4:	c0 f8       	bld	r12, 0

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    13a6:	1f 5f       	subi	r17, 0xFF	; 255
    13a8:	17 30       	cpi	r17, 0x07	; 7
    13aa:	81 f7       	brne	.-32     	; 0x138c <usart_set_baudrate+0xb4>
    13ac:	21 2f       	mov	r18, r17
    13ae:	50 c0       	rjmp	.+160    	; 0x1450 <usart_set_baudrate+0x178>
    13b0:	21 2f       	mov	r18, r17
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    13b2:	11 23       	and	r17, r17
    13b4:	0c f0       	brlt	.+2      	; 0x13b8 <usart_set_baudrate+0xe0>
    13b6:	4c c0       	rjmp	.+152    	; 0x1450 <usart_set_baudrate+0x178>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    13b8:	d5 01       	movw	r26, r10
    13ba:	c4 01       	movw	r24, r8
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	aa 1f       	adc	r26, r26
    13c2:	bb 1f       	adc	r27, r27
    13c4:	88 0f       	add	r24, r24
    13c6:	99 1f       	adc	r25, r25
    13c8:	aa 1f       	adc	r26, r26
    13ca:	bb 1f       	adc	r27, r27
    13cc:	88 0f       	add	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	aa 1f       	adc	r26, r26
    13d2:	bb 1f       	adc	r27, r27
    13d4:	48 1a       	sub	r4, r24
    13d6:	59 0a       	sbc	r5, r25
    13d8:	6a 0a       	sbc	r6, r26
    13da:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    13dc:	1e 3f       	cpi	r17, 0xFE	; 254
    13de:	f4 f4       	brge	.+60     	; 0x141c <usart_set_baudrate+0x144>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    13e0:	6d ef       	ldi	r22, 0xFD	; 253
    13e2:	7f ef       	ldi	r23, 0xFF	; 255
    13e4:	61 1b       	sub	r22, r17
    13e6:	71 09       	sbc	r23, r1
    13e8:	17 fd       	sbrc	r17, 7
    13ea:	73 95       	inc	r23
    13ec:	04 c0       	rjmp	.+8      	; 0x13f6 <usart_set_baudrate+0x11e>
    13ee:	44 0c       	add	r4, r4
    13f0:	55 1c       	adc	r5, r5
    13f2:	66 1c       	adc	r6, r6
    13f4:	77 1c       	adc	r7, r7
    13f6:	6a 95       	dec	r22
    13f8:	d2 f7       	brpl	.-12     	; 0x13ee <usart_set_baudrate+0x116>
    13fa:	d5 01       	movw	r26, r10
    13fc:	c4 01       	movw	r24, r8
    13fe:	b6 95       	lsr	r27
    1400:	a7 95       	ror	r26
    1402:	97 95       	ror	r25
    1404:	87 95       	ror	r24
    1406:	bc 01       	movw	r22, r24
    1408:	cd 01       	movw	r24, r26
    140a:	64 0d       	add	r22, r4
    140c:	75 1d       	adc	r23, r5
    140e:	86 1d       	adc	r24, r6
    1410:	97 1d       	adc	r25, r7
    1412:	a5 01       	movw	r20, r10
    1414:	94 01       	movw	r18, r8
    1416:	0e 94 e6 12 	call	0x25cc	; 0x25cc <__udivmodsi4>
    141a:	36 c0       	rjmp	.+108    	; 0x1488 <usart_set_baudrate+0x1b0>
		} else {
			baud <<= exp + 3;
    141c:	23 e0       	ldi	r18, 0x03	; 3
    141e:	21 0f       	add	r18, r17
    1420:	d5 01       	movw	r26, r10
    1422:	c4 01       	movw	r24, r8
    1424:	04 c0       	rjmp	.+8      	; 0x142e <usart_set_baudrate+0x156>
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	aa 1f       	adc	r26, r26
    142c:	bb 1f       	adc	r27, r27
    142e:	2a 95       	dec	r18
    1430:	d2 f7       	brpl	.-12     	; 0x1426 <usart_set_baudrate+0x14e>
    1432:	9c 01       	movw	r18, r24
    1434:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
    1436:	b6 95       	lsr	r27
    1438:	a7 95       	ror	r26
    143a:	97 95       	ror	r25
    143c:	87 95       	ror	r24
    143e:	bc 01       	movw	r22, r24
    1440:	cd 01       	movw	r24, r26
    1442:	64 0d       	add	r22, r4
    1444:	75 1d       	adc	r23, r5
    1446:	86 1d       	adc	r24, r6
    1448:	97 1d       	adc	r25, r7
    144a:	0e 94 e6 12 	call	0x25cc	; 0x25cc <__udivmodsi4>
    144e:	1c c0       	rjmp	.+56     	; 0x1488 <usart_set_baudrate+0x1b0>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    1450:	2d 5f       	subi	r18, 0xFD	; 253
    1452:	d5 01       	movw	r26, r10
    1454:	c4 01       	movw	r24, r8
    1456:	04 c0       	rjmp	.+8      	; 0x1460 <usart_set_baudrate+0x188>
    1458:	88 0f       	add	r24, r24
    145a:	99 1f       	adc	r25, r25
    145c:	aa 1f       	adc	r26, r26
    145e:	bb 1f       	adc	r27, r27
    1460:	2a 95       	dec	r18
    1462:	d2 f7       	brpl	.-12     	; 0x1458 <usart_set_baudrate+0x180>
    1464:	9c 01       	movw	r18, r24
    1466:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
    1468:	b6 95       	lsr	r27
    146a:	a7 95       	ror	r26
    146c:	97 95       	ror	r25
    146e:	87 95       	ror	r24
    1470:	bc 01       	movw	r22, r24
    1472:	cd 01       	movw	r24, r26
    1474:	64 0d       	add	r22, r4
    1476:	75 1d       	adc	r23, r5
    1478:	86 1d       	adc	r24, r6
    147a:	97 1d       	adc	r25, r7
    147c:	0e 94 e6 12 	call	0x25cc	; 0x25cc <__udivmodsi4>
    1480:	21 50       	subi	r18, 0x01	; 1
    1482:	31 09       	sbc	r19, r1
    1484:	41 09       	sbc	r20, r1
    1486:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    1488:	83 2f       	mov	r24, r19
    148a:	8f 70       	andi	r24, 0x0F	; 15
    148c:	12 95       	swap	r17
    148e:	10 7f       	andi	r17, 0xF0	; 240
    1490:	18 2b       	or	r17, r24
    1492:	1f 83       	std	Y+7, r17	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    1494:	2e 83       	std	Y+6, r18	; 0x06

	return true;
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	18 c0       	rjmp	.+48     	; 0x14ca <usart_set_baudrate+0x1f2>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	16 c0       	rjmp	.+44     	; 0x14ca <usart_set_baudrate+0x1f2>
    149e:	80 e0       	ldi	r24, 0x00	; 0
    14a0:	14 c0       	rjmp	.+40     	; 0x14ca <usart_set_baudrate+0x1f2>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    14a2:	d5 01       	movw	r26, r10
    14a4:	c4 01       	movw	r24, r8
    14a6:	88 0f       	add	r24, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	aa 1f       	adc	r26, r26
    14ac:	bb 1f       	adc	r27, r27
    14ae:	88 0f       	add	r24, r24
    14b0:	99 1f       	adc	r25, r25
    14b2:	aa 1f       	adc	r26, r26
    14b4:	bb 1f       	adc	r27, r27
    14b6:	88 0f       	add	r24, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	aa 1f       	adc	r26, r26
    14bc:	bb 1f       	adc	r27, r27
    14be:	48 1a       	sub	r4, r24
    14c0:	59 0a       	sbc	r5, r25
    14c2:	6a 0a       	sbc	r6, r26
    14c4:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    14c6:	19 ef       	ldi	r17, 0xF9	; 249
    14c8:	8b cf       	rjmp	.-234    	; 0x13e0 <usart_set_baudrate+0x108>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    14ca:	df 91       	pop	r29
    14cc:	cf 91       	pop	r28
    14ce:	1f 91       	pop	r17
    14d0:	0f 91       	pop	r16
    14d2:	ff 90       	pop	r15
    14d4:	ef 90       	pop	r14
    14d6:	df 90       	pop	r13
    14d8:	cf 90       	pop	r12
    14da:	bf 90       	pop	r11
    14dc:	af 90       	pop	r10
    14de:	9f 90       	pop	r9
    14e0:	8f 90       	pop	r8
    14e2:	7f 90       	pop	r7
    14e4:	6f 90       	pop	r6
    14e6:	5f 90       	pop	r5
    14e8:	4f 90       	pop	r4
    14ea:	08 95       	ret

000014ec <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    14ec:	0f 93       	push	r16
    14ee:	1f 93       	push	r17
    14f0:	cf 93       	push	r28
    14f2:	df 93       	push	r29
    14f4:	ec 01       	movw	r28, r24
    14f6:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    14f8:	00 97       	sbiw	r24, 0x00	; 0
    14fa:	09 f4       	brne	.+2      	; 0x14fe <usart_init_rs232+0x12>
    14fc:	e6 c0       	rjmp	.+460    	; 0x16ca <usart_init_rs232+0x1de>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    14fe:	80 3c       	cpi	r24, 0xC0	; 192
    1500:	91 05       	cpc	r25, r1
    1502:	21 f4       	brne	.+8      	; 0x150c <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1504:	60 e1       	ldi	r22, 0x10	; 16
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	f6 d3       	rcall	.+2028   	; 0x1cf6 <sysclk_enable_module>
    150a:	df c0       	rjmp	.+446    	; 0x16ca <usart_init_rs232+0x1de>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    150c:	c0 38       	cpi	r28, 0x80	; 128
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	d8 07       	cpc	r29, r24
    1512:	21 f4       	brne	.+8      	; 0x151c <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1514:	62 e0       	ldi	r22, 0x02	; 2
    1516:	80 e0       	ldi	r24, 0x00	; 0
    1518:	ee d3       	rcall	.+2012   	; 0x1cf6 <sysclk_enable_module>
    151a:	d7 c0       	rjmp	.+430    	; 0x16ca <usart_init_rs232+0x1de>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    151c:	c1 15       	cp	r28, r1
    151e:	e1 e0       	ldi	r30, 0x01	; 1
    1520:	de 07       	cpc	r29, r30
    1522:	21 f4       	brne	.+8      	; 0x152c <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1524:	61 e0       	ldi	r22, 0x01	; 1
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	e6 d3       	rcall	.+1996   	; 0x1cf6 <sysclk_enable_module>
    152a:	cf c0       	rjmp	.+414    	; 0x16ca <usart_init_rs232+0x1de>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    152c:	c0 38       	cpi	r28, 0x80	; 128
    152e:	f3 e0       	ldi	r31, 0x03	; 3
    1530:	df 07       	cpc	r29, r31
    1532:	21 f4       	brne	.+8      	; 0x153c <usart_init_rs232+0x50>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1534:	61 e0       	ldi	r22, 0x01	; 1
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	de d3       	rcall	.+1980   	; 0x1cf6 <sysclk_enable_module>
    153a:	c7 c0       	rjmp	.+398    	; 0x16ca <usart_init_rs232+0x1de>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    153c:	c0 39       	cpi	r28, 0x90	; 144
    153e:	83 e0       	ldi	r24, 0x03	; 3
    1540:	d8 07       	cpc	r29, r24
    1542:	21 f4       	brne	.+8      	; 0x154c <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    1544:	61 e0       	ldi	r22, 0x01	; 1
    1546:	82 e0       	ldi	r24, 0x02	; 2
    1548:	d6 d3       	rcall	.+1964   	; 0x1cf6 <sysclk_enable_module>
    154a:	bf c0       	rjmp	.+382    	; 0x16ca <usart_init_rs232+0x1de>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    154c:	c1 15       	cp	r28, r1
    154e:	e2 e0       	ldi	r30, 0x02	; 2
    1550:	de 07       	cpc	r29, r30
    1552:	21 f4       	brne	.+8      	; 0x155c <usart_init_rs232+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1554:	62 e0       	ldi	r22, 0x02	; 2
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	ce d3       	rcall	.+1948   	; 0x1cf6 <sysclk_enable_module>
    155a:	b7 c0       	rjmp	.+366    	; 0x16ca <usart_init_rs232+0x1de>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    155c:	c0 34       	cpi	r28, 0x40	; 64
    155e:	f2 e0       	ldi	r31, 0x02	; 2
    1560:	df 07       	cpc	r29, r31
    1562:	21 f4       	brne	.+8      	; 0x156c <usart_init_rs232+0x80>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1564:	62 e0       	ldi	r22, 0x02	; 2
    1566:	82 e0       	ldi	r24, 0x02	; 2
    1568:	c6 d3       	rcall	.+1932   	; 0x1cf6 <sysclk_enable_module>
    156a:	af c0       	rjmp	.+350    	; 0x16ca <usart_init_rs232+0x1de>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    156c:	c0 32       	cpi	r28, 0x20	; 32
    156e:	83 e0       	ldi	r24, 0x03	; 3
    1570:	d8 07       	cpc	r29, r24
    1572:	21 f4       	brne	.+8      	; 0x157c <usart_init_rs232+0x90>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1574:	64 e0       	ldi	r22, 0x04	; 4
    1576:	82 e0       	ldi	r24, 0x02	; 2
    1578:	be d3       	rcall	.+1916   	; 0x1cf6 <sysclk_enable_module>
    157a:	a7 c0       	rjmp	.+334    	; 0x16ca <usart_init_rs232+0x1de>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    157c:	c1 15       	cp	r28, r1
    157e:	e8 e0       	ldi	r30, 0x08	; 8
    1580:	de 07       	cpc	r29, r30
    1582:	21 f4       	brne	.+8      	; 0x158c <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1584:	61 e0       	ldi	r22, 0x01	; 1
    1586:	83 e0       	ldi	r24, 0x03	; 3
    1588:	b6 d3       	rcall	.+1900   	; 0x1cf6 <sysclk_enable_module>
    158a:	9f c0       	rjmp	.+318    	; 0x16ca <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    158c:	c1 15       	cp	r28, r1
    158e:	f9 e0       	ldi	r31, 0x09	; 9
    1590:	df 07       	cpc	r29, r31
    1592:	21 f4       	brne	.+8      	; 0x159c <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1594:	61 e0       	ldi	r22, 0x01	; 1
    1596:	84 e0       	ldi	r24, 0x04	; 4
    1598:	ae d3       	rcall	.+1884   	; 0x1cf6 <sysclk_enable_module>
    159a:	97 c0       	rjmp	.+302    	; 0x16ca <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    159c:	c1 15       	cp	r28, r1
    159e:	8a e0       	ldi	r24, 0x0A	; 10
    15a0:	d8 07       	cpc	r29, r24
    15a2:	21 f4       	brne	.+8      	; 0x15ac <usart_init_rs232+0xc0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    15a4:	61 e0       	ldi	r22, 0x01	; 1
    15a6:	85 e0       	ldi	r24, 0x05	; 5
    15a8:	a6 d3       	rcall	.+1868   	; 0x1cf6 <sysclk_enable_module>
    15aa:	8f c0       	rjmp	.+286    	; 0x16ca <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    15ac:	c1 15       	cp	r28, r1
    15ae:	eb e0       	ldi	r30, 0x0B	; 11
    15b0:	de 07       	cpc	r29, r30
    15b2:	21 f4       	brne	.+8      	; 0x15bc <usart_init_rs232+0xd0>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    15b4:	61 e0       	ldi	r22, 0x01	; 1
    15b6:	86 e0       	ldi	r24, 0x06	; 6
    15b8:	9e d3       	rcall	.+1852   	; 0x1cf6 <sysclk_enable_module>
    15ba:	87 c0       	rjmp	.+270    	; 0x16ca <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    15bc:	c0 34       	cpi	r28, 0x40	; 64
    15be:	f8 e0       	ldi	r31, 0x08	; 8
    15c0:	df 07       	cpc	r29, r31
    15c2:	21 f4       	brne	.+8      	; 0x15cc <usart_init_rs232+0xe0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    15c4:	62 e0       	ldi	r22, 0x02	; 2
    15c6:	83 e0       	ldi	r24, 0x03	; 3
    15c8:	96 d3       	rcall	.+1836   	; 0x1cf6 <sysclk_enable_module>
    15ca:	7f c0       	rjmp	.+254    	; 0x16ca <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    15cc:	c0 34       	cpi	r28, 0x40	; 64
    15ce:	89 e0       	ldi	r24, 0x09	; 9
    15d0:	d8 07       	cpc	r29, r24
    15d2:	21 f4       	brne	.+8      	; 0x15dc <usart_init_rs232+0xf0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    15d4:	62 e0       	ldi	r22, 0x02	; 2
    15d6:	84 e0       	ldi	r24, 0x04	; 4
    15d8:	8e d3       	rcall	.+1820   	; 0x1cf6 <sysclk_enable_module>
    15da:	77 c0       	rjmp	.+238    	; 0x16ca <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    15dc:	c0 34       	cpi	r28, 0x40	; 64
    15de:	ea e0       	ldi	r30, 0x0A	; 10
    15e0:	de 07       	cpc	r29, r30
    15e2:	21 f4       	brne	.+8      	; 0x15ec <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    15e4:	62 e0       	ldi	r22, 0x02	; 2
    15e6:	85 e0       	ldi	r24, 0x05	; 5
    15e8:	86 d3       	rcall	.+1804   	; 0x1cf6 <sysclk_enable_module>
    15ea:	6f c0       	rjmp	.+222    	; 0x16ca <usart_init_rs232+0x1de>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    15ec:	c0 39       	cpi	r28, 0x90	; 144
    15ee:	f8 e0       	ldi	r31, 0x08	; 8
    15f0:	df 07       	cpc	r29, r31
    15f2:	21 f4       	brne	.+8      	; 0x15fc <usart_init_rs232+0x110>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    15f4:	64 e0       	ldi	r22, 0x04	; 4
    15f6:	83 e0       	ldi	r24, 0x03	; 3
    15f8:	7e d3       	rcall	.+1788   	; 0x1cf6 <sysclk_enable_module>
    15fa:	67 c0       	rjmp	.+206    	; 0x16ca <usart_init_rs232+0x1de>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    15fc:	c0 39       	cpi	r28, 0x90	; 144
    15fe:	89 e0       	ldi	r24, 0x09	; 9
    1600:	d8 07       	cpc	r29, r24
    1602:	21 f4       	brne	.+8      	; 0x160c <usart_init_rs232+0x120>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1604:	64 e0       	ldi	r22, 0x04	; 4
    1606:	84 e0       	ldi	r24, 0x04	; 4
    1608:	76 d3       	rcall	.+1772   	; 0x1cf6 <sysclk_enable_module>
    160a:	5f c0       	rjmp	.+190    	; 0x16ca <usart_init_rs232+0x1de>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    160c:	c0 39       	cpi	r28, 0x90	; 144
    160e:	ea e0       	ldi	r30, 0x0A	; 10
    1610:	de 07       	cpc	r29, r30
    1612:	21 f4       	brne	.+8      	; 0x161c <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1614:	64 e0       	ldi	r22, 0x04	; 4
    1616:	85 e0       	ldi	r24, 0x05	; 5
    1618:	6e d3       	rcall	.+1756   	; 0x1cf6 <sysclk_enable_module>
    161a:	57 c0       	rjmp	.+174    	; 0x16ca <usart_init_rs232+0x1de>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    161c:	c0 39       	cpi	r28, 0x90	; 144
    161e:	fb e0       	ldi	r31, 0x0B	; 11
    1620:	df 07       	cpc	r29, r31
    1622:	21 f4       	brne	.+8      	; 0x162c <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1624:	64 e0       	ldi	r22, 0x04	; 4
    1626:	86 e0       	ldi	r24, 0x06	; 6
    1628:	66 d3       	rcall	.+1740   	; 0x1cf6 <sysclk_enable_module>
    162a:	4f c0       	rjmp	.+158    	; 0x16ca <usart_init_rs232+0x1de>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    162c:	c0 3c       	cpi	r28, 0xC0	; 192
    162e:	88 e0       	ldi	r24, 0x08	; 8
    1630:	d8 07       	cpc	r29, r24
    1632:	21 f4       	brne	.+8      	; 0x163c <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1634:	68 e0       	ldi	r22, 0x08	; 8
    1636:	83 e0       	ldi	r24, 0x03	; 3
    1638:	5e d3       	rcall	.+1724   	; 0x1cf6 <sysclk_enable_module>
    163a:	47 c0       	rjmp	.+142    	; 0x16ca <usart_init_rs232+0x1de>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    163c:	c0 3c       	cpi	r28, 0xC0	; 192
    163e:	e9 e0       	ldi	r30, 0x09	; 9
    1640:	de 07       	cpc	r29, r30
    1642:	21 f4       	brne	.+8      	; 0x164c <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1644:	68 e0       	ldi	r22, 0x08	; 8
    1646:	84 e0       	ldi	r24, 0x04	; 4
    1648:	56 d3       	rcall	.+1708   	; 0x1cf6 <sysclk_enable_module>
    164a:	3f c0       	rjmp	.+126    	; 0x16ca <usart_init_rs232+0x1de>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    164c:	c0 3a       	cpi	r28, 0xA0	; 160
    164e:	f8 e0       	ldi	r31, 0x08	; 8
    1650:	df 07       	cpc	r29, r31
    1652:	21 f4       	brne	.+8      	; 0x165c <usart_init_rs232+0x170>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1654:	60 e1       	ldi	r22, 0x10	; 16
    1656:	83 e0       	ldi	r24, 0x03	; 3
    1658:	4e d3       	rcall	.+1692   	; 0x1cf6 <sysclk_enable_module>
    165a:	37 c0       	rjmp	.+110    	; 0x16ca <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    165c:	c0 3a       	cpi	r28, 0xA0	; 160
    165e:	89 e0       	ldi	r24, 0x09	; 9
    1660:	d8 07       	cpc	r29, r24
    1662:	21 f4       	brne	.+8      	; 0x166c <usart_init_rs232+0x180>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1664:	60 e1       	ldi	r22, 0x10	; 16
    1666:	84 e0       	ldi	r24, 0x04	; 4
    1668:	46 d3       	rcall	.+1676   	; 0x1cf6 <sysclk_enable_module>
    166a:	2f c0       	rjmp	.+94     	; 0x16ca <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    166c:	c0 3a       	cpi	r28, 0xA0	; 160
    166e:	ea e0       	ldi	r30, 0x0A	; 10
    1670:	de 07       	cpc	r29, r30
    1672:	21 f4       	brne	.+8      	; 0x167c <usart_init_rs232+0x190>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1674:	60 e1       	ldi	r22, 0x10	; 16
    1676:	85 e0       	ldi	r24, 0x05	; 5
    1678:	3e d3       	rcall	.+1660   	; 0x1cf6 <sysclk_enable_module>
    167a:	27 c0       	rjmp	.+78     	; 0x16ca <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    167c:	c0 3a       	cpi	r28, 0xA0	; 160
    167e:	fb e0       	ldi	r31, 0x0B	; 11
    1680:	df 07       	cpc	r29, r31
    1682:	21 f4       	brne	.+8      	; 0x168c <usart_init_rs232+0x1a0>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1684:	60 e1       	ldi	r22, 0x10	; 16
    1686:	86 e0       	ldi	r24, 0x06	; 6
    1688:	36 d3       	rcall	.+1644   	; 0x1cf6 <sysclk_enable_module>
    168a:	1f c0       	rjmp	.+62     	; 0x16ca <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    168c:	c0 3b       	cpi	r28, 0xB0	; 176
    168e:	88 e0       	ldi	r24, 0x08	; 8
    1690:	d8 07       	cpc	r29, r24
    1692:	21 f4       	brne	.+8      	; 0x169c <usart_init_rs232+0x1b0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1694:	60 e2       	ldi	r22, 0x20	; 32
    1696:	83 e0       	ldi	r24, 0x03	; 3
    1698:	2e d3       	rcall	.+1628   	; 0x1cf6 <sysclk_enable_module>
    169a:	17 c0       	rjmp	.+46     	; 0x16ca <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    169c:	c0 3b       	cpi	r28, 0xB0	; 176
    169e:	e9 e0       	ldi	r30, 0x09	; 9
    16a0:	de 07       	cpc	r29, r30
    16a2:	21 f4       	brne	.+8      	; 0x16ac <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    16a4:	60 e2       	ldi	r22, 0x20	; 32
    16a6:	84 e0       	ldi	r24, 0x04	; 4
    16a8:	26 d3       	rcall	.+1612   	; 0x1cf6 <sysclk_enable_module>
    16aa:	0f c0       	rjmp	.+30     	; 0x16ca <usart_init_rs232+0x1de>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    16ac:	c0 38       	cpi	r28, 0x80	; 128
    16ae:	f4 e0       	ldi	r31, 0x04	; 4
    16b0:	df 07       	cpc	r29, r31
    16b2:	21 f4       	brne	.+8      	; 0x16bc <usart_init_rs232+0x1d0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    16b4:	60 e4       	ldi	r22, 0x40	; 64
    16b6:	83 e0       	ldi	r24, 0x03	; 3
    16b8:	1e d3       	rcall	.+1596   	; 0x1cf6 <sysclk_enable_module>
    16ba:	07 c0       	rjmp	.+14     	; 0x16ca <usart_init_rs232+0x1de>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    16bc:	c0 3a       	cpi	r28, 0xA0	; 160
    16be:	84 e0       	ldi	r24, 0x04	; 4
    16c0:	d8 07       	cpc	r29, r24
    16c2:	19 f4       	brne	.+6      	; 0x16ca <usart_init_rs232+0x1de>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    16c4:	60 e4       	ldi	r22, 0x40	; 64
    16c6:	85 e0       	ldi	r24, 0x05	; 5
    16c8:	16 d3       	rcall	.+1580   	; 0x1cf6 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    16ca:	8d 81       	ldd	r24, Y+5	; 0x05
    16cc:	8f 73       	andi	r24, 0x3F	; 63
    16ce:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    16d0:	f8 01       	movw	r30, r16
    16d2:	94 81       	ldd	r25, Z+4	; 0x04
    16d4:	85 81       	ldd	r24, Z+5	; 0x05
    16d6:	89 2b       	or	r24, r25
    16d8:	96 81       	ldd	r25, Z+6	; 0x06
    16da:	99 23       	and	r25, r25
    16dc:	11 f0       	breq	.+4      	; 0x16e2 <usart_init_rs232+0x1f6>
    16de:	98 e0       	ldi	r25, 0x08	; 8
    16e0:	01 c0       	rjmp	.+2      	; 0x16e4 <usart_init_rs232+0x1f8>
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	89 2b       	or	r24, r25
    16e6:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    16e8:	f8 01       	movw	r30, r16
    16ea:	40 81       	ld	r20, Z
    16ec:	51 81       	ldd	r21, Z+1	; 0x01
    16ee:	62 81       	ldd	r22, Z+2	; 0x02
    16f0:	73 81       	ldd	r23, Z+3	; 0x03
    16f2:	00 e0       	ldi	r16, 0x00	; 0
    16f4:	18 e4       	ldi	r17, 0x48	; 72
    16f6:	28 ee       	ldi	r18, 0xE8	; 232
    16f8:	31 e0       	ldi	r19, 0x01	; 1
    16fa:	ce 01       	movw	r24, r28
    16fc:	ed dd       	rcall	.-1062   	; 0x12d8 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    16fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1700:	98 60       	ori	r25, 0x08	; 8
    1702:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1704:	9c 81       	ldd	r25, Y+4	; 0x04
    1706:	90 61       	ori	r25, 0x10	; 16
    1708:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    170a:	df 91       	pop	r29
    170c:	cf 91       	pop	r28
    170e:	1f 91       	pop	r17
    1710:	0f 91       	pop	r16
    1712:	08 95       	ret

00001714 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    1714:	81 15       	cp	r24, r1
    1716:	22 e0       	ldi	r18, 0x02	; 2
    1718:	92 07       	cpc	r25, r18
    171a:	61 f4       	brne	.+24     	; 0x1734 <adc_enable_clock+0x20>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    171c:	80 91 51 20 	lds	r24, 0x2051
    1720:	91 e0       	ldi	r25, 0x01	; 1
    1722:	98 0f       	add	r25, r24
    1724:	90 93 51 20 	sts	0x2051, r25
    1728:	81 11       	cpse	r24, r1
    172a:	12 c0       	rjmp	.+36     	; 0x1750 <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    172c:	62 e0       	ldi	r22, 0x02	; 2
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	e2 c2       	rjmp	.+1476   	; 0x1cf6 <sysclk_enable_module>
    1732:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    1734:	80 34       	cpi	r24, 0x40	; 64
    1736:	92 40       	sbci	r25, 0x02	; 2
    1738:	59 f4       	brne	.+22     	; 0x1750 <adc_enable_clock+0x3c>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
    173a:	80 91 50 20 	lds	r24, 0x2050
    173e:	91 e0       	ldi	r25, 0x01	; 1
    1740:	98 0f       	add	r25, r24
    1742:	90 93 50 20 	sts	0x2050, r25
    1746:	81 11       	cpse	r24, r1
    1748:	03 c0       	rjmp	.+6      	; 0x1750 <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    174a:	62 e0       	ldi	r22, 0x02	; 2
    174c:	82 e0       	ldi	r24, 0x02	; 2
    174e:	d3 c2       	rjmp	.+1446   	; 0x1cf6 <sysclk_enable_module>
    1750:	08 95       	ret

00001752 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    1752:	81 15       	cp	r24, r1
    1754:	22 e0       	ldi	r18, 0x02	; 2
    1756:	92 07       	cpc	r25, r18
    1758:	59 f4       	brne	.+22     	; 0x1770 <adc_disable_clock+0x1e>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    175a:	80 91 51 20 	lds	r24, 0x2051
    175e:	81 50       	subi	r24, 0x01	; 1
    1760:	80 93 51 20 	sts	0x2051, r24
    1764:	81 11       	cpse	r24, r1
    1766:	11 c0       	rjmp	.+34     	; 0x178a <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1768:	62 e0       	ldi	r22, 0x02	; 2
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	d0 c2       	rjmp	.+1440   	; 0x1d0e <sysclk_disable_module>
    176e:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    1770:	80 34       	cpi	r24, 0x40	; 64
    1772:	92 40       	sbci	r25, 0x02	; 2
    1774:	51 f4       	brne	.+20     	; 0x178a <adc_disable_clock+0x38>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
    1776:	80 91 50 20 	lds	r24, 0x2050
    177a:	81 50       	subi	r24, 0x01	; 1
    177c:	80 93 50 20 	sts	0x2050, r24
    1780:	81 11       	cpse	r24, r1
    1782:	03 c0       	rjmp	.+6      	; 0x178a <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1784:	62 e0       	ldi	r22, 0x02	; 2
    1786:	82 e0       	ldi	r24, 0x02	; 2
    1788:	c2 c2       	rjmp	.+1412   	; 0x1d0e <sysclk_disable_module>
    178a:	08 95       	ret

0000178c <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    178c:	1f 93       	push	r17
    178e:	cf 93       	push	r28
    1790:	df 93       	push	r29
    1792:	ec 01       	movw	r28, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1794:	1f b7       	in	r17, 0x3f	; 63
	cpu_irq_disable();
    1796:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
    1798:	bd df       	rcall	.-134    	; 0x1714 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    179a:	88 81       	ld	r24, Y
    179c:	81 60       	ori	r24, 0x01	; 1
    179e:	88 83       	st	Y, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    17a0:	1f bf       	out	0x3f, r17	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    17a2:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    17a4:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    17a6:	ef e5       	ldi	r30, 0x5F	; 95
    17a8:	f0 e2       	ldi	r31, 0x20	; 32
    17aa:	90 81       	ld	r25, Z
    17ac:	9f 5f       	subi	r25, 0xFF	; 255
    17ae:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    17b0:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
    17b2:	df 91       	pop	r29
    17b4:	cf 91       	pop	r28
    17b6:	1f 91       	pop	r17
    17b8:	08 95       	ret

000017ba <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    17ba:	1f 92       	push	r1
    17bc:	0f 92       	push	r0
    17be:	0f b6       	in	r0, 0x3f	; 63
    17c0:	0f 92       	push	r0
    17c2:	11 24       	eor	r1, r1
    17c4:	0b b6       	in	r0, 0x3b	; 59
    17c6:	0f 92       	push	r0
    17c8:	2f 93       	push	r18
    17ca:	3f 93       	push	r19
    17cc:	4f 93       	push	r20
    17ce:	5f 93       	push	r21
    17d0:	6f 93       	push	r22
    17d2:	7f 93       	push	r23
    17d4:	8f 93       	push	r24
    17d6:	9f 93       	push	r25
    17d8:	af 93       	push	r26
    17da:	bf 93       	push	r27
    17dc:	ef 93       	push	r30
    17de:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    17e0:	e0 e0       	ldi	r30, 0x00	; 0
    17e2:	f2 e0       	ldi	r31, 0x02	; 2
    17e4:	44 a1       	ldd	r20, Z+36	; 0x24
    17e6:	55 a1       	ldd	r21, Z+37	; 0x25
    17e8:	e0 91 5c 20 	lds	r30, 0x205C
    17ec:	f0 91 5d 20 	lds	r31, 0x205D
    17f0:	61 e0       	ldi	r22, 0x01	; 1
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	92 e0       	ldi	r25, 0x02	; 2
    17f6:	19 95       	eicall
}
    17f8:	ff 91       	pop	r31
    17fa:	ef 91       	pop	r30
    17fc:	bf 91       	pop	r27
    17fe:	af 91       	pop	r26
    1800:	9f 91       	pop	r25
    1802:	8f 91       	pop	r24
    1804:	7f 91       	pop	r23
    1806:	6f 91       	pop	r22
    1808:	5f 91       	pop	r21
    180a:	4f 91       	pop	r20
    180c:	3f 91       	pop	r19
    180e:	2f 91       	pop	r18
    1810:	0f 90       	pop	r0
    1812:	0b be       	out	0x3b, r0	; 59
    1814:	0f 90       	pop	r0
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	0f 90       	pop	r0
    181a:	1f 90       	pop	r1
    181c:	18 95       	reti

0000181e <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    181e:	1f 92       	push	r1
    1820:	0f 92       	push	r0
    1822:	0f b6       	in	r0, 0x3f	; 63
    1824:	0f 92       	push	r0
    1826:	11 24       	eor	r1, r1
    1828:	0b b6       	in	r0, 0x3b	; 59
    182a:	0f 92       	push	r0
    182c:	2f 93       	push	r18
    182e:	3f 93       	push	r19
    1830:	4f 93       	push	r20
    1832:	5f 93       	push	r21
    1834:	6f 93       	push	r22
    1836:	7f 93       	push	r23
    1838:	8f 93       	push	r24
    183a:	9f 93       	push	r25
    183c:	af 93       	push	r26
    183e:	bf 93       	push	r27
    1840:	ef 93       	push	r30
    1842:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    1844:	e8 e2       	ldi	r30, 0x28	; 40
    1846:	f2 e0       	ldi	r31, 0x02	; 2
    1848:	44 81       	ldd	r20, Z+4	; 0x04
    184a:	55 81       	ldd	r21, Z+5	; 0x05
    184c:	e0 91 5c 20 	lds	r30, 0x205C
    1850:	f0 91 5d 20 	lds	r31, 0x205D
    1854:	62 e0       	ldi	r22, 0x02	; 2
    1856:	80 e0       	ldi	r24, 0x00	; 0
    1858:	92 e0       	ldi	r25, 0x02	; 2
    185a:	19 95       	eicall
}
    185c:	ff 91       	pop	r31
    185e:	ef 91       	pop	r30
    1860:	bf 91       	pop	r27
    1862:	af 91       	pop	r26
    1864:	9f 91       	pop	r25
    1866:	8f 91       	pop	r24
    1868:	7f 91       	pop	r23
    186a:	6f 91       	pop	r22
    186c:	5f 91       	pop	r21
    186e:	4f 91       	pop	r20
    1870:	3f 91       	pop	r19
    1872:	2f 91       	pop	r18
    1874:	0f 90       	pop	r0
    1876:	0b be       	out	0x3b, r0	; 59
    1878:	0f 90       	pop	r0
    187a:	0f be       	out	0x3f, r0	; 63
    187c:	0f 90       	pop	r0
    187e:	1f 90       	pop	r1
    1880:	18 95       	reti

00001882 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    1882:	1f 92       	push	r1
    1884:	0f 92       	push	r0
    1886:	0f b6       	in	r0, 0x3f	; 63
    1888:	0f 92       	push	r0
    188a:	11 24       	eor	r1, r1
    188c:	0b b6       	in	r0, 0x3b	; 59
    188e:	0f 92       	push	r0
    1890:	2f 93       	push	r18
    1892:	3f 93       	push	r19
    1894:	4f 93       	push	r20
    1896:	5f 93       	push	r21
    1898:	6f 93       	push	r22
    189a:	7f 93       	push	r23
    189c:	8f 93       	push	r24
    189e:	9f 93       	push	r25
    18a0:	af 93       	push	r26
    18a2:	bf 93       	push	r27
    18a4:	ef 93       	push	r30
    18a6:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    18a8:	e0 e3       	ldi	r30, 0x30	; 48
    18aa:	f2 e0       	ldi	r31, 0x02	; 2
    18ac:	44 81       	ldd	r20, Z+4	; 0x04
    18ae:	55 81       	ldd	r21, Z+5	; 0x05
    18b0:	e0 91 5c 20 	lds	r30, 0x205C
    18b4:	f0 91 5d 20 	lds	r31, 0x205D
    18b8:	64 e0       	ldi	r22, 0x04	; 4
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	92 e0       	ldi	r25, 0x02	; 2
    18be:	19 95       	eicall
}
    18c0:	ff 91       	pop	r31
    18c2:	ef 91       	pop	r30
    18c4:	bf 91       	pop	r27
    18c6:	af 91       	pop	r26
    18c8:	9f 91       	pop	r25
    18ca:	8f 91       	pop	r24
    18cc:	7f 91       	pop	r23
    18ce:	6f 91       	pop	r22
    18d0:	5f 91       	pop	r21
    18d2:	4f 91       	pop	r20
    18d4:	3f 91       	pop	r19
    18d6:	2f 91       	pop	r18
    18d8:	0f 90       	pop	r0
    18da:	0b be       	out	0x3b, r0	; 59
    18dc:	0f 90       	pop	r0
    18de:	0f be       	out	0x3f, r0	; 63
    18e0:	0f 90       	pop	r0
    18e2:	1f 90       	pop	r1
    18e4:	18 95       	reti

000018e6 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    18e6:	1f 92       	push	r1
    18e8:	0f 92       	push	r0
    18ea:	0f b6       	in	r0, 0x3f	; 63
    18ec:	0f 92       	push	r0
    18ee:	11 24       	eor	r1, r1
    18f0:	0b b6       	in	r0, 0x3b	; 59
    18f2:	0f 92       	push	r0
    18f4:	2f 93       	push	r18
    18f6:	3f 93       	push	r19
    18f8:	4f 93       	push	r20
    18fa:	5f 93       	push	r21
    18fc:	6f 93       	push	r22
    18fe:	7f 93       	push	r23
    1900:	8f 93       	push	r24
    1902:	9f 93       	push	r25
    1904:	af 93       	push	r26
    1906:	bf 93       	push	r27
    1908:	ef 93       	push	r30
    190a:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    190c:	e8 e3       	ldi	r30, 0x38	; 56
    190e:	f2 e0       	ldi	r31, 0x02	; 2
    1910:	44 81       	ldd	r20, Z+4	; 0x04
    1912:	55 81       	ldd	r21, Z+5	; 0x05
    1914:	e0 91 5c 20 	lds	r30, 0x205C
    1918:	f0 91 5d 20 	lds	r31, 0x205D
    191c:	68 e0       	ldi	r22, 0x08	; 8
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	92 e0       	ldi	r25, 0x02	; 2
    1922:	19 95       	eicall
}
    1924:	ff 91       	pop	r31
    1926:	ef 91       	pop	r30
    1928:	bf 91       	pop	r27
    192a:	af 91       	pop	r26
    192c:	9f 91       	pop	r25
    192e:	8f 91       	pop	r24
    1930:	7f 91       	pop	r23
    1932:	6f 91       	pop	r22
    1934:	5f 91       	pop	r21
    1936:	4f 91       	pop	r20
    1938:	3f 91       	pop	r19
    193a:	2f 91       	pop	r18
    193c:	0f 90       	pop	r0
    193e:	0b be       	out	0x3b, r0	; 59
    1940:	0f 90       	pop	r0
    1942:	0f be       	out	0x3f, r0	; 63
    1944:	0f 90       	pop	r0
    1946:	1f 90       	pop	r1
    1948:	18 95       	reti

0000194a <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    194a:	1f 92       	push	r1
    194c:	0f 92       	push	r0
    194e:	0f b6       	in	r0, 0x3f	; 63
    1950:	0f 92       	push	r0
    1952:	11 24       	eor	r1, r1
    1954:	0b b6       	in	r0, 0x3b	; 59
    1956:	0f 92       	push	r0
    1958:	2f 93       	push	r18
    195a:	3f 93       	push	r19
    195c:	4f 93       	push	r20
    195e:	5f 93       	push	r21
    1960:	6f 93       	push	r22
    1962:	7f 93       	push	r23
    1964:	8f 93       	push	r24
    1966:	9f 93       	push	r25
    1968:	af 93       	push	r26
    196a:	bf 93       	push	r27
    196c:	ef 93       	push	r30
    196e:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    1970:	e0 e4       	ldi	r30, 0x40	; 64
    1972:	f2 e0       	ldi	r31, 0x02	; 2
    1974:	44 a1       	ldd	r20, Z+36	; 0x24
    1976:	55 a1       	ldd	r21, Z+37	; 0x25
    1978:	e0 91 5a 20 	lds	r30, 0x205A
    197c:	f0 91 5b 20 	lds	r31, 0x205B
    1980:	61 e0       	ldi	r22, 0x01	; 1
    1982:	80 e4       	ldi	r24, 0x40	; 64
    1984:	92 e0       	ldi	r25, 0x02	; 2
    1986:	19 95       	eicall
}
    1988:	ff 91       	pop	r31
    198a:	ef 91       	pop	r30
    198c:	bf 91       	pop	r27
    198e:	af 91       	pop	r26
    1990:	9f 91       	pop	r25
    1992:	8f 91       	pop	r24
    1994:	7f 91       	pop	r23
    1996:	6f 91       	pop	r22
    1998:	5f 91       	pop	r21
    199a:	4f 91       	pop	r20
    199c:	3f 91       	pop	r19
    199e:	2f 91       	pop	r18
    19a0:	0f 90       	pop	r0
    19a2:	0b be       	out	0x3b, r0	; 59
    19a4:	0f 90       	pop	r0
    19a6:	0f be       	out	0x3f, r0	; 63
    19a8:	0f 90       	pop	r0
    19aa:	1f 90       	pop	r1
    19ac:	18 95       	reti

000019ae <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    19ae:	1f 92       	push	r1
    19b0:	0f 92       	push	r0
    19b2:	0f b6       	in	r0, 0x3f	; 63
    19b4:	0f 92       	push	r0
    19b6:	11 24       	eor	r1, r1
    19b8:	0b b6       	in	r0, 0x3b	; 59
    19ba:	0f 92       	push	r0
    19bc:	2f 93       	push	r18
    19be:	3f 93       	push	r19
    19c0:	4f 93       	push	r20
    19c2:	5f 93       	push	r21
    19c4:	6f 93       	push	r22
    19c6:	7f 93       	push	r23
    19c8:	8f 93       	push	r24
    19ca:	9f 93       	push	r25
    19cc:	af 93       	push	r26
    19ce:	bf 93       	push	r27
    19d0:	ef 93       	push	r30
    19d2:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    19d4:	e8 e6       	ldi	r30, 0x68	; 104
    19d6:	f2 e0       	ldi	r31, 0x02	; 2
    19d8:	44 81       	ldd	r20, Z+4	; 0x04
    19da:	55 81       	ldd	r21, Z+5	; 0x05
    19dc:	e0 91 5a 20 	lds	r30, 0x205A
    19e0:	f0 91 5b 20 	lds	r31, 0x205B
    19e4:	62 e0       	ldi	r22, 0x02	; 2
    19e6:	80 e4       	ldi	r24, 0x40	; 64
    19e8:	92 e0       	ldi	r25, 0x02	; 2
    19ea:	19 95       	eicall
}
    19ec:	ff 91       	pop	r31
    19ee:	ef 91       	pop	r30
    19f0:	bf 91       	pop	r27
    19f2:	af 91       	pop	r26
    19f4:	9f 91       	pop	r25
    19f6:	8f 91       	pop	r24
    19f8:	7f 91       	pop	r23
    19fa:	6f 91       	pop	r22
    19fc:	5f 91       	pop	r21
    19fe:	4f 91       	pop	r20
    1a00:	3f 91       	pop	r19
    1a02:	2f 91       	pop	r18
    1a04:	0f 90       	pop	r0
    1a06:	0b be       	out	0x3b, r0	; 59
    1a08:	0f 90       	pop	r0
    1a0a:	0f be       	out	0x3f, r0	; 63
    1a0c:	0f 90       	pop	r0
    1a0e:	1f 90       	pop	r1
    1a10:	18 95       	reti

00001a12 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    1a12:	1f 92       	push	r1
    1a14:	0f 92       	push	r0
    1a16:	0f b6       	in	r0, 0x3f	; 63
    1a18:	0f 92       	push	r0
    1a1a:	11 24       	eor	r1, r1
    1a1c:	0b b6       	in	r0, 0x3b	; 59
    1a1e:	0f 92       	push	r0
    1a20:	2f 93       	push	r18
    1a22:	3f 93       	push	r19
    1a24:	4f 93       	push	r20
    1a26:	5f 93       	push	r21
    1a28:	6f 93       	push	r22
    1a2a:	7f 93       	push	r23
    1a2c:	8f 93       	push	r24
    1a2e:	9f 93       	push	r25
    1a30:	af 93       	push	r26
    1a32:	bf 93       	push	r27
    1a34:	ef 93       	push	r30
    1a36:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    1a38:	e0 e7       	ldi	r30, 0x70	; 112
    1a3a:	f2 e0       	ldi	r31, 0x02	; 2
    1a3c:	44 81       	ldd	r20, Z+4	; 0x04
    1a3e:	55 81       	ldd	r21, Z+5	; 0x05
    1a40:	e0 91 5a 20 	lds	r30, 0x205A
    1a44:	f0 91 5b 20 	lds	r31, 0x205B
    1a48:	64 e0       	ldi	r22, 0x04	; 4
    1a4a:	80 e4       	ldi	r24, 0x40	; 64
    1a4c:	92 e0       	ldi	r25, 0x02	; 2
    1a4e:	19 95       	eicall
}
    1a50:	ff 91       	pop	r31
    1a52:	ef 91       	pop	r30
    1a54:	bf 91       	pop	r27
    1a56:	af 91       	pop	r26
    1a58:	9f 91       	pop	r25
    1a5a:	8f 91       	pop	r24
    1a5c:	7f 91       	pop	r23
    1a5e:	6f 91       	pop	r22
    1a60:	5f 91       	pop	r21
    1a62:	4f 91       	pop	r20
    1a64:	3f 91       	pop	r19
    1a66:	2f 91       	pop	r18
    1a68:	0f 90       	pop	r0
    1a6a:	0b be       	out	0x3b, r0	; 59
    1a6c:	0f 90       	pop	r0
    1a6e:	0f be       	out	0x3f, r0	; 63
    1a70:	0f 90       	pop	r0
    1a72:	1f 90       	pop	r1
    1a74:	18 95       	reti

00001a76 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    1a76:	1f 92       	push	r1
    1a78:	0f 92       	push	r0
    1a7a:	0f b6       	in	r0, 0x3f	; 63
    1a7c:	0f 92       	push	r0
    1a7e:	11 24       	eor	r1, r1
    1a80:	0b b6       	in	r0, 0x3b	; 59
    1a82:	0f 92       	push	r0
    1a84:	2f 93       	push	r18
    1a86:	3f 93       	push	r19
    1a88:	4f 93       	push	r20
    1a8a:	5f 93       	push	r21
    1a8c:	6f 93       	push	r22
    1a8e:	7f 93       	push	r23
    1a90:	8f 93       	push	r24
    1a92:	9f 93       	push	r25
    1a94:	af 93       	push	r26
    1a96:	bf 93       	push	r27
    1a98:	ef 93       	push	r30
    1a9a:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    1a9c:	e8 e7       	ldi	r30, 0x78	; 120
    1a9e:	f2 e0       	ldi	r31, 0x02	; 2
    1aa0:	44 81       	ldd	r20, Z+4	; 0x04
    1aa2:	55 81       	ldd	r21, Z+5	; 0x05
    1aa4:	e0 91 5a 20 	lds	r30, 0x205A
    1aa8:	f0 91 5b 20 	lds	r31, 0x205B
    1aac:	68 e0       	ldi	r22, 0x08	; 8
    1aae:	80 e4       	ldi	r24, 0x40	; 64
    1ab0:	92 e0       	ldi	r25, 0x02	; 2
    1ab2:	19 95       	eicall
}
    1ab4:	ff 91       	pop	r31
    1ab6:	ef 91       	pop	r30
    1ab8:	bf 91       	pop	r27
    1aba:	af 91       	pop	r26
    1abc:	9f 91       	pop	r25
    1abe:	8f 91       	pop	r24
    1ac0:	7f 91       	pop	r23
    1ac2:	6f 91       	pop	r22
    1ac4:	5f 91       	pop	r21
    1ac6:	4f 91       	pop	r20
    1ac8:	3f 91       	pop	r19
    1aca:	2f 91       	pop	r18
    1acc:	0f 90       	pop	r0
    1ace:	0b be       	out	0x3b, r0	; 59
    1ad0:	0f 90       	pop	r0
    1ad2:	0f be       	out	0x3f, r0	; 63
    1ad4:	0f 90       	pop	r0
    1ad6:	1f 90       	pop	r1
    1ad8:	18 95       	reti

00001ada <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    1ada:	df 92       	push	r13
    1adc:	ef 92       	push	r14
    1ade:	ff 92       	push	r15
    1ae0:	0f 93       	push	r16
    1ae2:	1f 93       	push	r17
    1ae4:	cf 93       	push	r28
    1ae6:	df 93       	push	r29
    1ae8:	ec 01       	movw	r28, r24
    1aea:	8b 01       	movw	r16, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    1aec:	c1 15       	cp	r28, r1
    1aee:	22 e0       	ldi	r18, 0x02	; 2
    1af0:	d2 07       	cpc	r29, r18
    1af2:	71 f4       	brne	.+28     	; 0x1b10 <adc_write_configuration+0x36>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    1af4:	61 e2       	ldi	r22, 0x21	; 33
    1af6:	70 e0       	ldi	r23, 0x00	; 0
    1af8:	82 e0       	ldi	r24, 0x02	; 2
    1afa:	14 d1       	rcall	.+552    	; 0x1d24 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    1afc:	e8 2e       	mov	r14, r24
    1afe:	f1 2c       	mov	r15, r1
    1b00:	60 e2       	ldi	r22, 0x20	; 32
    1b02:	70 e0       	ldi	r23, 0x00	; 0
    1b04:	82 e0       	ldi	r24, 0x02	; 2
    1b06:	0e d1       	rcall	.+540    	; 0x1d24 <nvm_read_byte>
		data <<= 8;
    1b08:	fe 2c       	mov	r15, r14
    1b0a:	ee 24       	eor	r14, r14
		data |= nvm_read_production_signature_row(ADCACAL0);
    1b0c:	e8 2a       	or	r14, r24
    1b0e:	10 c0       	rjmp	.+32     	; 0x1b30 <adc_write_configuration+0x56>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    1b10:	80 34       	cpi	r24, 0x40	; 64
    1b12:	92 40       	sbci	r25, 0x02	; 2
    1b14:	59 f5       	brne	.+86     	; 0x1b6c <adc_write_configuration+0x92>
    1b16:	65 e2       	ldi	r22, 0x25	; 37
    1b18:	70 e0       	ldi	r23, 0x00	; 0
    1b1a:	82 e0       	ldi	r24, 0x02	; 2
    1b1c:	03 d1       	rcall	.+518    	; 0x1d24 <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    1b1e:	e8 2e       	mov	r14, r24
    1b20:	f1 2c       	mov	r15, r1
    1b22:	64 e2       	ldi	r22, 0x24	; 36
    1b24:	70 e0       	ldi	r23, 0x00	; 0
    1b26:	82 e0       	ldi	r24, 0x02	; 2
    1b28:	fd d0       	rcall	.+506    	; 0x1d24 <nvm_read_byte>
		data <<= 8;
    1b2a:	fe 2c       	mov	r15, r14
    1b2c:	ee 24       	eor	r14, r14
		data |= nvm_read_production_signature_row(ADCBCAL0);
    1b2e:	e8 2a       	or	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1b30:	df b6       	in	r13, 0x3f	; 63
	cpu_irq_disable();
    1b32:	f8 94       	cli
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    1b34:	ce 01       	movw	r24, r28
    1b36:	ee dd       	rcall	.-1060   	; 0x1714 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    1b38:	28 81       	ld	r18, Y

	adc->CTRLA = ADC_FLUSH_bm;
    1b3a:	82 e0       	ldi	r24, 0x02	; 2
    1b3c:	88 83       	st	Y, r24
	adc->CAL = cal;
    1b3e:	ec 86       	std	Y+12, r14	; 0x0c
    1b40:	fd 86       	std	Y+13, r15	; 0x0d
	adc->CMP = conf->cmp;
    1b42:	f8 01       	movw	r30, r16
    1b44:	85 81       	ldd	r24, Z+5	; 0x05
    1b46:	96 81       	ldd	r25, Z+6	; 0x06
    1b48:	88 8f       	std	Y+24, r24	; 0x18
    1b4a:	99 8f       	std	Y+25, r25	; 0x19
	adc->REFCTRL = conf->refctrl;
    1b4c:	82 81       	ldd	r24, Z+2	; 0x02
    1b4e:	8a 83       	std	Y+2, r24	; 0x02
	adc->PRESCALER = conf->prescaler;
    1b50:	84 81       	ldd	r24, Z+4	; 0x04
    1b52:	8c 83       	std	Y+4, r24	; 0x04
	adc->EVCTRL = conf->evctrl;
    1b54:	83 81       	ldd	r24, Z+3	; 0x03
    1b56:	8b 83       	std	Y+3, r24	; 0x03
	adc->CTRLB = conf->ctrlb;
    1b58:	81 81       	ldd	r24, Z+1	; 0x01
    1b5a:	89 83       	std	Y+1, r24	; 0x01
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
	enable = adc->CTRLA & ADC_ENABLE_bm;
    1b5c:	82 2f       	mov	r24, r18
    1b5e:	81 70       	andi	r24, 0x01	; 1
	adc->REFCTRL = conf->refctrl;
	adc->PRESCALER = conf->prescaler;
	adc->EVCTRL = conf->evctrl;
	adc->CTRLB = conf->ctrlb;

	adc->CTRLA = enable | conf->ctrla;
    1b60:	90 81       	ld	r25, Z
    1b62:	89 2b       	or	r24, r25
    1b64:	88 83       	st	Y, r24

	adc_disable_clock(adc);
    1b66:	ce 01       	movw	r24, r28
    1b68:	f4 dd       	rcall	.-1048   	; 0x1752 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1b6a:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
    1b6c:	df 91       	pop	r29
    1b6e:	cf 91       	pop	r28
    1b70:	1f 91       	pop	r17
    1b72:	0f 91       	pop	r16
    1b74:	ff 90       	pop	r15
    1b76:	ef 90       	pop	r14
    1b78:	df 90       	pop	r13
    1b7a:	08 95       	ret

00001b7c <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    1b7c:	ff 92       	push	r15
    1b7e:	0f 93       	push	r16
    1b80:	1f 93       	push	r17
    1b82:	cf 93       	push	r28
    1b84:	df 93       	push	r29
    1b86:	ec 01       	movw	r28, r24
    1b88:	8b 01       	movw	r16, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1b8a:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
    1b8c:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    1b8e:	c2 dd       	rcall	.-1148   	; 0x1714 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    1b90:	88 81       	ld	r24, Y
    1b92:	80 7c       	andi	r24, 0xC0	; 192
    1b94:	f8 01       	movw	r30, r16
    1b96:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    1b98:	88 8d       	ldd	r24, Y+24	; 0x18
    1b9a:	99 8d       	ldd	r25, Y+25	; 0x19
    1b9c:	85 83       	std	Z+5, r24	; 0x05
    1b9e:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    1ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba2:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    1ba4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba6:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    1bac:	89 81       	ldd	r24, Y+1	; 0x01
    1bae:	81 83       	std	Z+1, r24	; 0x01

	adc_disable_clock(adc);
    1bb0:	ce 01       	movw	r24, r28
    1bb2:	cf dd       	rcall	.-1122   	; 0x1752 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1bb4:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
    1bb6:	df 91       	pop	r29
    1bb8:	cf 91       	pop	r28
    1bba:	1f 91       	pop	r17
    1bbc:	0f 91       	pop	r16
    1bbe:	ff 90       	pop	r15
    1bc0:	08 95       	ret

00001bc2 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    1bc2:	cf 92       	push	r12
    1bc4:	df 92       	push	r13
    1bc6:	ef 92       	push	r14
    1bc8:	ff 92       	push	r15
    1bca:	0f 93       	push	r16
    1bcc:	1f 93       	push	r17
    1bce:	cf 93       	push	r28
    1bd0:	df 93       	push	r29
    1bd2:	7c 01       	movw	r14, r24
    1bd4:	d6 2e       	mov	r13, r22
    1bd6:	8a 01       	movw	r16, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1bd8:	86 2f       	mov	r24, r22
    1bda:	83 70       	andi	r24, 0x03	; 3
    1bdc:	29 f4       	brne	.+10     	; 0x1be8 <adcch_write_configuration+0x26>
		index += 2;
		ch_mask >>= 2;
    1bde:	96 2f       	mov	r25, r22
    1be0:	96 95       	lsr	r25
    1be2:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    1be4:	82 e0       	ldi	r24, 0x02	; 2
    1be6:	02 c0       	rjmp	.+4      	; 0x1bec <adcch_write_configuration+0x2a>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1be8:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
static __always_inline ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1bea:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1bec:	90 ff       	sbrs	r25, 0
		index++;
    1bee:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    1bf0:	e7 01       	movw	r28, r14
    1bf2:	a0 96       	adiw	r28, 0x20	; 32
    1bf4:	98 e0       	ldi	r25, 0x08	; 8
    1bf6:	89 9f       	mul	r24, r25
    1bf8:	c0 0d       	add	r28, r0
    1bfa:	d1 1d       	adc	r29, r1
    1bfc:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1bfe:	cf b6       	in	r12, 0x3f	; 63
	cpu_irq_disable();
    1c00:	f8 94       	cli
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    1c02:	c7 01       	movw	r24, r14
    1c04:	87 dd       	rcall	.-1266   	; 0x1714 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    1c06:	f8 01       	movw	r30, r16
    1c08:	80 81       	ld	r24, Z
    1c0a:	88 83       	st	Y, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    1c0c:	82 81       	ldd	r24, Z+2	; 0x02
    1c0e:	8a 83       	std	Y+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    1c10:	81 81       	ldd	r24, Z+1	; 0x01
    1c12:	89 83       	std	Y+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    1c14:	d0 fe       	sbrs	r13, 0
    1c16:	02 c0       	rjmp	.+4      	; 0x1c1c <adcch_write_configuration+0x5a>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    1c18:	83 81       	ldd	r24, Z+3	; 0x03
    1c1a:	8e 83       	std	Y+6, r24	; 0x06
	}
	adc_disable_clock(adc);
    1c1c:	c7 01       	movw	r24, r14
    1c1e:	99 dd       	rcall	.-1230   	; 0x1752 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1c20:	cf be       	out	0x3f, r12	; 63

	cpu_irq_restore(flags);
}
    1c22:	df 91       	pop	r29
    1c24:	cf 91       	pop	r28
    1c26:	1f 91       	pop	r17
    1c28:	0f 91       	pop	r16
    1c2a:	ff 90       	pop	r15
    1c2c:	ef 90       	pop	r14
    1c2e:	df 90       	pop	r13
    1c30:	cf 90       	pop	r12
    1c32:	08 95       	ret

00001c34 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    1c34:	cf 92       	push	r12
    1c36:	df 92       	push	r13
    1c38:	ef 92       	push	r14
    1c3a:	ff 92       	push	r15
    1c3c:	0f 93       	push	r16
    1c3e:	1f 93       	push	r17
    1c40:	cf 93       	push	r28
    1c42:	df 93       	push	r29
    1c44:	7c 01       	movw	r14, r24
    1c46:	d6 2e       	mov	r13, r22
    1c48:	ea 01       	movw	r28, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1c4a:	86 2f       	mov	r24, r22
    1c4c:	83 70       	andi	r24, 0x03	; 3
    1c4e:	29 f4       	brne	.+10     	; 0x1c5a <adcch_read_configuration+0x26>
		index += 2;
		ch_mask >>= 2;
    1c50:	96 2f       	mov	r25, r22
    1c52:	96 95       	lsr	r25
    1c54:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    1c56:	82 e0       	ldi	r24, 0x02	; 2
    1c58:	02 c0       	rjmp	.+4      	; 0x1c5e <adcch_read_configuration+0x2a>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1c5a:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
static __always_inline ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1c5e:	90 ff       	sbrs	r25, 0
		index++;
    1c60:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    1c62:	87 01       	movw	r16, r14
    1c64:	00 5e       	subi	r16, 0xE0	; 224
    1c66:	1f 4f       	sbci	r17, 0xFF	; 255
    1c68:	98 e0       	ldi	r25, 0x08	; 8
    1c6a:	89 9f       	mul	r24, r25
    1c6c:	00 0d       	add	r16, r0
    1c6e:	11 1d       	adc	r17, r1
    1c70:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1c72:	cf b6       	in	r12, 0x3f	; 63
	cpu_irq_disable();
    1c74:	f8 94       	cli

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    1c76:	c7 01       	movw	r24, r14
    1c78:	4d dd       	rcall	.-1382   	; 0x1714 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    1c7a:	f8 01       	movw	r30, r16
    1c7c:	80 81       	ld	r24, Z
    1c7e:	88 83       	st	Y, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    1c80:	82 81       	ldd	r24, Z+2	; 0x02
    1c82:	8a 83       	std	Y+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    1c84:	81 81       	ldd	r24, Z+1	; 0x01
    1c86:	89 83       	std	Y+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    1c88:	d0 fe       	sbrs	r13, 0
    1c8a:	02 c0       	rjmp	.+4      	; 0x1c90 <adcch_read_configuration+0x5c>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    1c8c:	86 81       	ldd	r24, Z+6	; 0x06
    1c8e:	8b 83       	std	Y+3, r24	; 0x03
	}
	adc_disable_clock(adc);
    1c90:	c7 01       	movw	r24, r14
    1c92:	5f dd       	rcall	.-1346   	; 0x1752 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1c94:	cf be       	out	0x3f, r12	; 63

	cpu_irq_restore(flags);
}
    1c96:	df 91       	pop	r29
    1c98:	cf 91       	pop	r28
    1c9a:	1f 91       	pop	r17
    1c9c:	0f 91       	pop	r16
    1c9e:	ff 90       	pop	r15
    1ca0:	ef 90       	pop	r14
    1ca2:	df 90       	pop	r13
    1ca4:	cf 90       	pop	r12
    1ca6:	08 95       	ret

00001ca8 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    1ca8:	8f ef       	ldi	r24, 0xFF	; 255
    1caa:	80 93 70 00 	sts	0x0070, r24
    1cae:	80 93 71 00 	sts	0x0071, r24
    1cb2:	80 93 72 00 	sts	0x0072, r24
    1cb6:	80 93 73 00 	sts	0x0073, r24
    1cba:	80 93 74 00 	sts	0x0074, r24
    1cbe:	80 93 75 00 	sts	0x0075, r24
    1cc2:	80 93 76 00 	sts	0x0076, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1cc6:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1cc8:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    1cca:	e0 e5       	ldi	r30, 0x50	; 80
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	90 81       	ld	r25, Z
    1cd0:	92 60       	ori	r25, 0x02	; 2
    1cd2:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1cd4:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1cd6:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1cd8:	81 ff       	sbrs	r24, 1
    1cda:	fd cf       	rjmp	.-6      	; 0x1cd6 <sysclk_init+0x2e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    1cdc:	61 e0       	ldi	r22, 0x01	; 1
    1cde:	80 e4       	ldi	r24, 0x40	; 64
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	2a d0       	rcall	.+84     	; 0x1d38 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1ce4:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1ce6:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    1ce8:	e0 e5       	ldi	r30, 0x50	; 80
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	90 81       	ld	r25, Z
    1cee:	9e 7f       	andi	r25, 0xFE	; 254
    1cf0:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1cf2:	8f bf       	out	0x3f, r24	; 63
    1cf4:	08 95       	ret

00001cf6 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1cf6:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1cf8:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    1cfa:	e8 2f       	mov	r30, r24
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	e0 59       	subi	r30, 0x90	; 144
    1d00:	ff 4f       	sbci	r31, 0xFF	; 255
    1d02:	60 95       	com	r22
    1d04:	80 81       	ld	r24, Z
    1d06:	68 23       	and	r22, r24
    1d08:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1d0a:	9f bf       	out	0x3f, r25	; 63
    1d0c:	08 95       	ret

00001d0e <sysclk_disable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1d0e:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1d10:	f8 94       	cli

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    1d12:	e8 2f       	mov	r30, r24
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	e0 59       	subi	r30, 0x90	; 144
    1d18:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1a:	80 81       	ld	r24, Z
    1d1c:	68 2b       	or	r22, r24
    1d1e:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1d20:	9f bf       	out	0x3f, r25	; 63
    1d22:	08 95       	ret

00001d24 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1d24:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    1d28:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1d2a:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1d2c:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    1d30:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1d32:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1d36:	08 95       	ret

00001d38 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1d38:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1d3a:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1d3c:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1d3e:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1d40:	60 83       	st	Z, r22
	ret                             // Return to caller
    1d42:	08 95       	ret

00001d44 <main>:
	dma_channel_set_interrupt_level(&dmach_conf, DMA_INT_LVL_LO);
	dma_channel_write_config(DMA_CHANNEL, &dmach_conf);
	dma_channel_enable(DMA_CHANNEL);
}

int main (void) {
    1d44:	cf 93       	push	r28
    1d46:	df 93       	push	r29
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	2f 97       	sbiw	r28, 0x0f	; 15
    1d4e:	cd bf       	out	0x3d, r28	; 61
    1d50:	de bf       	out	0x3e, r29	; 62
	// CLK
	sysclk_init();
    1d52:	aa df       	rcall	.-172    	; 0x1ca8 <sysclk_init>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    1d54:	80 e2       	ldi	r24, 0x20	; 32
    1d56:	e0 e6       	ldi	r30, 0x60	; 96
    1d58:	f6 e0       	ldi	r31, 0x06	; 6
    1d5a:	81 83       	std	Z+1, r24	; 0x01
    1d5c:	80 e8       	ldi	r24, 0x80	; 128
    1d5e:	e0 e0       	ldi	r30, 0x00	; 0
    1d60:	f6 e0       	ldi	r31, 0x06	; 6
    1d62:	81 83       	std	Z+1, r24	; 0x01
    1d64:	68 94       	set
    1d66:	ff 24       	eor	r15, r15
    1d68:	f3 f8       	bld	r15, 3
    1d6a:	e0 e8       	ldi	r30, 0x80	; 128
    1d6c:	f6 e0       	ldi	r31, 0x06	; 6
    1d6e:	f1 82       	std	Z+1, r15	; 0x01
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    1d70:	80 91 04 20 	lds	r24, 0x2004
    1d74:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    1d76:	80 91 05 20 	lds	r24, 0x2005
    1d7a:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    1d7c:	80 91 06 20 	lds	r24, 0x2006
    1d80:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    1d82:	80 91 00 20 	lds	r24, 0x2000
    1d86:	90 91 01 20 	lds	r25, 0x2001
    1d8a:	a0 91 02 20 	lds	r26, 0x2002
    1d8e:	b0 91 03 20 	lds	r27, 0x2003
    1d92:	89 83       	std	Y+1, r24	; 0x01
    1d94:	9a 83       	std	Y+2, r25	; 0x02
    1d96:	ab 83       	std	Y+3, r26	; 0x03
    1d98:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
    1d9a:	60 e1       	ldi	r22, 0x10	; 16
    1d9c:	85 e0       	ldi	r24, 0x05	; 5
    1d9e:	ab df       	rcall	.-170    	; 0x1cf6 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    1da0:	8e 01       	movw	r16, r28
    1da2:	0f 5f       	subi	r16, 0xFF	; 255
    1da4:	1f 4f       	sbci	r17, 0xFF	; 255
    1da6:	b8 01       	movw	r22, r16
    1da8:	80 ea       	ldi	r24, 0xA0	; 160
    1daa:	9a e0       	ldi	r25, 0x0A	; 10
    1dac:	9f db       	rcall	.-2242   	; 0x14ec <usart_init_rs232>

static void adc_init(void) {
	struct adc_config adc_conf;
	struct adc_channel_config adcch_conf;
	
	adc_read_configuration(&MY_ADC, &adc_conf);
    1dae:	b8 01       	movw	r22, r16
    1db0:	80 e0       	ldi	r24, 0x00	; 0
    1db2:	92 e0       	ldi	r25, 0x02	; 2
    1db4:	e3 de       	rcall	.-570    	; 0x1b7c <adc_read_configuration>
	adcch_read_configuration(&MY_ADC, MY_ADC_CH, &adcch_conf);
    1db6:	ae 01       	movw	r20, r28
    1db8:	44 5f       	subi	r20, 0xF4	; 244
    1dba:	5f 4f       	sbci	r21, 0xFF	; 255
    1dbc:	61 e0       	ldi	r22, 0x01	; 1
    1dbe:	80 e0       	ldi	r24, 0x00	; 0
    1dc0:	92 e0       	ldi	r25, 0x02	; 2
    1dc2:	38 df       	rcall	.-400    	; 0x1c34 <adcch_read_configuration>
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    1dc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc6:	89 7e       	andi	r24, 0xE9	; 233
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    1dc8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dca:	9f 78       	andi	r25, 0x8F	; 143
	conf->refctrl |= ref;
    1dcc:	90 62       	ori	r25, 0x20	; 32
    1dce:	9b 83       	std	Y+3, r25	; 0x03
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
				(nr_of_ch << ADC_EVACT_gp);
		break;

	case ADC_TRIG_FREERUN:
		conf->ctrlb |= ADC_FREERUN_bm;
    1dd0:	8c 60       	ori	r24, 0x0C	; 12
    1dd2:	8a 83       	std	Y+2, r24	; 0x02
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    1dd4:	83 e0       	ldi	r24, 0x03	; 3
    1dd6:	8d 83       	std	Y+5, r24	; 0x05
 *
 * \param ch_conf Pointer to ADC channel configuration.
 */
static inline void adcch_enable_interrupt(struct adc_channel_config *ch_conf)
{
	ch_conf->intctrl &= ~ADC_CH_INTLVL_gm;
    1dd8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dda:	8c 7f       	andi	r24, 0xFC	; 252
	ch_conf->intctrl |= CONFIG_ADC_INTLVL;
    1ddc:	81 60       	ori	r24, 0x01	; 1
    1dde:	8e 87       	std	Y+14, r24	; 0x0e
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	8c 87       	std	Y+12, r24	; 0x0c
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    1de4:	fd 86       	std	Y+13, r15	; 0x0d
	adc_set_clock_rate(&adc_conf, 1000000UL);

	adcch_enable_interrupt(&adcch_conf);
	adcch_set_input(&adcch_conf, ADCCH_POS_PIN1, ADCCH_NEG_NONE, ADC_GAIN);
	
	adc_write_configuration(&MY_ADC, &adc_conf);
    1de6:	b8 01       	movw	r22, r16
    1de8:	80 e0       	ldi	r24, 0x00	; 0
    1dea:	92 e0       	ldi	r25, 0x02	; 2
    1dec:	76 de       	rcall	.-788    	; 0x1ada <adc_write_configuration>
	adcch_write_configuration(&MY_ADC, MY_ADC_CH, &adcch_conf);
    1dee:	ae 01       	movw	r20, r28
    1df0:	44 5f       	subi	r20, 0xF4	; 244
    1df2:	5f 4f       	sbci	r21, 0xFF	; 255
    1df4:	61 e0       	ldi	r22, 0x01	; 1
    1df6:	80 e0       	ldi	r24, 0x00	; 0
    1df8:	92 e0       	ldi	r25, 0x02	; 2
    1dfa:	e3 de       	rcall	.-570    	; 0x1bc2 <adcch_write_configuration>
		.stopbits = false
	};
	usart_serial_init(&USARTE0, &USART_SERIAL_OPTIONS);
	// ADC
	adc_init();
	adc_enable(&MY_ADC);
    1dfc:	80 e0       	ldi	r24, 0x00	; 0
    1dfe:	92 e0       	ldi	r25, 0x02	; 2
    1e00:	c5 dc       	rcall	.-1654   	; 0x178c <adc_enable>
}

static void dma_init(void)
{
	struct dma_channel_config dmach_conf;
	memset(&dmach_conf, 0, sizeof(dmach_conf));
    1e02:	8b e0       	ldi	r24, 0x0B	; 11
    1e04:	f8 01       	movw	r30, r16
    1e06:	11 92       	st	Z+, r1
    1e08:	8a 95       	dec	r24
    1e0a:	e9 f7       	brne	.-6      	; 0x1e06 <main+0xc2>
 */
static inline void dma_channel_set_transfer_count(
		struct dma_channel_config *config,
		uint16_t count)
{
	config->trfcnt = count;
    1e0c:	80 e1       	ldi	r24, 0x10	; 16
    1e0e:	97 e2       	ldi	r25, 0x27	; 39
    1e10:	8d 83       	std	Y+5, r24	; 0x05
    1e12:	9e 83       	std	Y+6, r25	; 0x06
static inline void dma_channel_set_dest_dir_mode(
		struct dma_channel_config *config,
		DMA_CH_DESTDIR_t mode)
{
	config->addrctrl &= ~DMA_CH_DESTDIR_gm;
	config->addrctrl |= mode;
    1e14:	8d e9       	ldi	r24, 0x9D	; 157
    1e16:	8b 83       	std	Y+3, r24	; 0x03
 */
static inline void dma_channel_set_source_address(
		struct dma_channel_config *config,
		uint16_t source)
{
	config->srcaddr16 = source;
    1e18:	80 e1       	ldi	r24, 0x10	; 16
    1e1a:	92 e0       	ldi	r25, 0x02	; 2
    1e1c:	88 87       	std	Y+8, r24	; 0x08
    1e1e:	99 87       	std	Y+9, r25	; 0x09
 */
static inline void dma_channel_set_destination_address(
		struct dma_channel_config *config,
		uint16_t destination)
{
	config->destaddr16 = destination;
    1e20:	84 e6       	ldi	r24, 0x64	; 100
    1e22:	90 e2       	ldi	r25, 0x20	; 32
    1e24:	8a 87       	std	Y+10, r24	; 0x0a
    1e26:	9b 87       	std	Y+11, r25	; 0x0b
 */
static inline void dma_channel_set_trigger_source(
		struct dma_channel_config *config,
		DMA_CH_TRIGSRC_t source)
{
	config->trigsrc = source;
    1e28:	80 e1       	ldi	r24, 0x10	; 16
    1e2a:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param config Pointer to a \ref dma_channel_config variable
 */
static inline void dma_channel_set_single_shot(struct dma_channel_config *config)
{
	config->ctrla |= DMA_CH_SINGLE_bm;
    1e2c:	84 e0       	ldi	r24, 0x04	; 4
    1e2e:	89 83       	std	Y+1, r24	; 0x01
	dma_channel_set_destination_address(&dmach_conf, (uint16_t)(uintptr_t)Samples);
	
	dma_channel_set_trigger_source(&dmach_conf, DMA_CH_TRIGSRC_ADCA_CH0_gc);
	dma_channel_set_single_shot(&dmach_conf);
	
	dma_enable();
    1e30:	0e 94 03 02 	call	0x406	; 0x406 <dma_enable>
 * \param level Interrupt level given by a \ref dma_int_level_t type
 */
static inline void dma_channel_set_interrupt_level(struct dma_channel_config
		*config, enum dma_int_level_t level)
{
	config->ctrlb &= ~(DMA_CH_ERRINTLVL_gm | DMA_CH_TRNINTLVL_gm);
    1e34:	8a 81       	ldd	r24, Y+2	; 0x02
    1e36:	80 7f       	andi	r24, 0xF0	; 240
	config->ctrlb |= (level << DMA_CH_ERRINTLVL_gp)
    1e38:	85 60       	ori	r24, 0x05	; 5
    1e3a:	8a 83       	std	Y+2, r24	; 0x02
	dma_channel_set_interrupt_level(&dmach_conf, DMA_INT_LVL_LO);
	dma_channel_write_config(DMA_CHANNEL, &dmach_conf);
    1e3c:	b8 01       	movw	r22, r16
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
    1e40:	0e 94 b6 02 	call	0x56c	; 0x56c <dma_channel_write_config>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1e44:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1e46:	f8 94       	cli
{
	irqflags_t iflags = cpu_irq_save();
	DMA_CH_t *channel = dma_get_channel_address_from_num(num);

#if XMEGA_A || XMEGA_AU
	channel->CTRLA |= DMA_CH_ENABLE_bm;
    1e48:	e0 e1       	ldi	r30, 0x10	; 16
    1e4a:	f1 e0       	ldi	r31, 0x01	; 1
    1e4c:	90 81       	ld	r25, Z
    1e4e:	90 68       	ori	r25, 0x80	; 128
    1e50:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1e52:	8f bf       	out	0x3f, r24	; 63
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1e54:	0f 2e       	mov	r0, r31
    1e56:	c1 2c       	mov	r12, r1
    1e58:	f6 e0       	ldi	r31, 0x06	; 6
    1e5a:	df 2e       	mov	r13, r31
    1e5c:	f0 2d       	mov	r31, r0
    1e5e:	68 94       	set
    1e60:	99 24       	eor	r9, r9
    1e62:	97 f8       	bld	r9, 7

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    1e64:	0f 2e       	mov	r0, r31
    1e66:	f0 e6       	ldi	r31, 0x60	; 96
    1e68:	af 2e       	mov	r10, r31
    1e6a:	f6 e0       	ldi	r31, 0x06	; 6
    1e6c:	bf 2e       	mov	r11, r31
    1e6e:	f0 2d       	mov	r31, r0
    1e70:	68 94       	set
    1e72:	88 24       	eor	r8, r8
    1e74:	85 f8       	bld	r8, 5
    1e76:	68 94       	set
    1e78:	ee 24       	eor	r14, r14
    1e7a:	e4 f8       	bld	r14, 4
    1e7c:	ff 24       	eor	r15, r15
    1e7e:	f3 94       	inc	r15
 * \retval true DMA channel is busy or have a block transfer pending
 * \retval false DMA channel is not busy or have a block transfer pending
 */
static inline bool dma_channel_is_busy(dma_channel_num_t num)
{
	uint8_t busy_pending = DMA.STATUS;
    1e80:	00 e0       	ldi	r16, 0x00	; 0
    1e82:	11 e0       	ldi	r17, 0x01	; 1
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
	*data = usart_getchar(usart);
    1e84:	80 ea       	ldi	r24, 0xA0	; 160
    1e86:	9a e0       	ldi	r25, 0x0A	; 10
    1e88:	21 da       	rcall	.-3006   	; 0x12cc <usart_getchar>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1e8a:	f6 01       	movw	r30, r12
    1e8c:	95 82       	std	Z+5, r9	; 0x05
    1e8e:	80 e0       	ldi	r24, 0x00	; 0
    1e90:	90 e0       	ldi	r25, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    1e92:	01 96       	adiw	r24, 0x01	; 1
    1e94:	85 3d       	cpi	r24, 0xD5	; 213
    1e96:	f4 e1       	ldi	r31, 0x14	; 20
    1e98:	9f 07       	cpc	r25, r31
    1e9a:	d9 f7       	brne	.-10     	; 0x1e92 <main+0x14e>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1e9c:	f6 01       	movw	r30, r12
    1e9e:	96 82       	std	Z+6, r9	; 0x06

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->OUTTGL = arch_ioport_pin_to_mask(pin);
    1ea0:	f5 01       	movw	r30, r10
    1ea2:	87 82       	std	Z+7, r8	; 0x07

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1ea4:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1ea6:	f8 94       	cli
{
	irqflags_t iflags = cpu_irq_save();
	DMA_CH_t *channel = dma_get_channel_address_from_num(num);

#if XMEGA_A || XMEGA_AU
	channel->CTRLA |= DMA_CH_ENABLE_bm;
    1ea8:	f7 01       	movw	r30, r14
    1eaa:	90 81       	ld	r25, Z
    1eac:	90 68       	ori	r25, 0x80	; 128
    1eae:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1eb0:	8f bf       	out	0x3f, r24	; 63
 * \retval true DMA channel is busy or have a block transfer pending
 * \retval false DMA channel is not busy or have a block transfer pending
 */
static inline bool dma_channel_is_busy(dma_channel_num_t num)
{
	uint8_t busy_pending = DMA.STATUS;
    1eb2:	f8 01       	movw	r30, r16
    1eb4:	84 81       	ldd	r24, Z+4	; 0x04

	busy_pending &= (1 << num) | (1 << (num + 4));
    1eb6:	81 71       	andi	r24, 0x11	; 17
		delay_ms(1);
		ioport_set_pin_level(ULTRA_TRIGGER, false);
		ioport_toggle_pin_level(MY_LED);
		
		dma_channel_enable(DMA_CHANNEL);
		while(dma_channel_is_busy(DMA_CHANNEL));
    1eb8:	e1 f7       	brne	.-8      	; 0x1eb2 <main+0x16e>
		usart_serial_write_packet(&USARTE0, Samples, SAMPLES_NR);
    1eba:	40 e1       	ldi	r20, 0x10	; 16
    1ebc:	57 e2       	ldi	r21, 0x27	; 39
    1ebe:	64 e6       	ldi	r22, 0x64	; 100
    1ec0:	70 e2       	ldi	r23, 0x20	; 32
    1ec2:	80 ea       	ldi	r24, 0xA0	; 160
    1ec4:	9a e0       	ldi	r25, 0x0A	; 10
    1ec6:	df d9       	rcall	.-3138   	; 0x1286 <usart_serial_write_packet>
	};
    1ec8:	dd cf       	rjmp	.-70     	; 0x1e84 <main+0x140>

00001eca <vfprintf>:
    1eca:	2f 92       	push	r2
    1ecc:	3f 92       	push	r3
    1ece:	4f 92       	push	r4
    1ed0:	5f 92       	push	r5
    1ed2:	6f 92       	push	r6
    1ed4:	7f 92       	push	r7
    1ed6:	8f 92       	push	r8
    1ed8:	9f 92       	push	r9
    1eda:	af 92       	push	r10
    1edc:	bf 92       	push	r11
    1ede:	cf 92       	push	r12
    1ee0:	df 92       	push	r13
    1ee2:	ef 92       	push	r14
    1ee4:	ff 92       	push	r15
    1ee6:	0f 93       	push	r16
    1ee8:	1f 93       	push	r17
    1eea:	cf 93       	push	r28
    1eec:	df 93       	push	r29
    1eee:	cd b7       	in	r28, 0x3d	; 61
    1ef0:	de b7       	in	r29, 0x3e	; 62
    1ef2:	63 97       	sbiw	r28, 0x13	; 19
    1ef4:	cd bf       	out	0x3d, r28	; 61
    1ef6:	de bf       	out	0x3e, r29	; 62
    1ef8:	7c 01       	movw	r14, r24
    1efa:	1b 01       	movw	r2, r22
    1efc:	6a 01       	movw	r12, r20
    1efe:	fc 01       	movw	r30, r24
    1f00:	16 82       	std	Z+6, r1	; 0x06
    1f02:	17 82       	std	Z+7, r1	; 0x07
    1f04:	83 81       	ldd	r24, Z+3	; 0x03
    1f06:	81 ff       	sbrs	r24, 1
    1f08:	49 c3       	rjmp	.+1682   	; 0x259c <vfprintf+0x6d2>
    1f0a:	be 01       	movw	r22, r28
    1f0c:	6f 5f       	subi	r22, 0xFF	; 255
    1f0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f10:	4b 01       	movw	r8, r22
    1f12:	f7 01       	movw	r30, r14
    1f14:	93 81       	ldd	r25, Z+3	; 0x03
    1f16:	f1 01       	movw	r30, r2
    1f18:	93 fd       	sbrc	r25, 3
    1f1a:	85 91       	lpm	r24, Z+
    1f1c:	93 ff       	sbrs	r25, 3
    1f1e:	81 91       	ld	r24, Z+
    1f20:	1f 01       	movw	r2, r30
    1f22:	88 23       	and	r24, r24
    1f24:	09 f4       	brne	.+2      	; 0x1f28 <vfprintf+0x5e>
    1f26:	36 c3       	rjmp	.+1644   	; 0x2594 <vfprintf+0x6ca>
    1f28:	85 32       	cpi	r24, 0x25	; 37
    1f2a:	39 f4       	brne	.+14     	; 0x1f3a <vfprintf+0x70>
    1f2c:	93 fd       	sbrc	r25, 3
    1f2e:	85 91       	lpm	r24, Z+
    1f30:	93 ff       	sbrs	r25, 3
    1f32:	81 91       	ld	r24, Z+
    1f34:	1f 01       	movw	r2, r30
    1f36:	85 32       	cpi	r24, 0x25	; 37
    1f38:	31 f4       	brne	.+12     	; 0x1f46 <vfprintf+0x7c>
    1f3a:	b7 01       	movw	r22, r14
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	56 d4       	rcall	.+2220   	; 0x27ec <fputc>
    1f40:	56 01       	movw	r10, r12
    1f42:	65 01       	movw	r12, r10
    1f44:	e6 cf       	rjmp	.-52     	; 0x1f12 <vfprintf+0x48>
    1f46:	10 e0       	ldi	r17, 0x00	; 0
    1f48:	51 2c       	mov	r5, r1
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	20 32       	cpi	r18, 0x20	; 32
    1f4e:	a0 f4       	brcc	.+40     	; 0x1f78 <vfprintf+0xae>
    1f50:	8b 32       	cpi	r24, 0x2B	; 43
    1f52:	69 f0       	breq	.+26     	; 0x1f6e <vfprintf+0xa4>
    1f54:	30 f4       	brcc	.+12     	; 0x1f62 <vfprintf+0x98>
    1f56:	80 32       	cpi	r24, 0x20	; 32
    1f58:	59 f0       	breq	.+22     	; 0x1f70 <vfprintf+0xa6>
    1f5a:	83 32       	cpi	r24, 0x23	; 35
    1f5c:	69 f4       	brne	.+26     	; 0x1f78 <vfprintf+0xae>
    1f5e:	20 61       	ori	r18, 0x10	; 16
    1f60:	2c c0       	rjmp	.+88     	; 0x1fba <vfprintf+0xf0>
    1f62:	8d 32       	cpi	r24, 0x2D	; 45
    1f64:	39 f0       	breq	.+14     	; 0x1f74 <vfprintf+0xaa>
    1f66:	80 33       	cpi	r24, 0x30	; 48
    1f68:	39 f4       	brne	.+14     	; 0x1f78 <vfprintf+0xae>
    1f6a:	21 60       	ori	r18, 0x01	; 1
    1f6c:	26 c0       	rjmp	.+76     	; 0x1fba <vfprintf+0xf0>
    1f6e:	22 60       	ori	r18, 0x02	; 2
    1f70:	24 60       	ori	r18, 0x04	; 4
    1f72:	23 c0       	rjmp	.+70     	; 0x1fba <vfprintf+0xf0>
    1f74:	28 60       	ori	r18, 0x08	; 8
    1f76:	21 c0       	rjmp	.+66     	; 0x1fba <vfprintf+0xf0>
    1f78:	27 fd       	sbrc	r18, 7
    1f7a:	27 c0       	rjmp	.+78     	; 0x1fca <vfprintf+0x100>
    1f7c:	30 ed       	ldi	r19, 0xD0	; 208
    1f7e:	38 0f       	add	r19, r24
    1f80:	3a 30       	cpi	r19, 0x0A	; 10
    1f82:	78 f4       	brcc	.+30     	; 0x1fa2 <vfprintf+0xd8>
    1f84:	26 ff       	sbrs	r18, 6
    1f86:	06 c0       	rjmp	.+12     	; 0x1f94 <vfprintf+0xca>
    1f88:	fa e0       	ldi	r31, 0x0A	; 10
    1f8a:	1f 9f       	mul	r17, r31
    1f8c:	30 0d       	add	r19, r0
    1f8e:	11 24       	eor	r1, r1
    1f90:	13 2f       	mov	r17, r19
    1f92:	13 c0       	rjmp	.+38     	; 0x1fba <vfprintf+0xf0>
    1f94:	6a e0       	ldi	r22, 0x0A	; 10
    1f96:	56 9e       	mul	r5, r22
    1f98:	30 0d       	add	r19, r0
    1f9a:	11 24       	eor	r1, r1
    1f9c:	53 2e       	mov	r5, r19
    1f9e:	20 62       	ori	r18, 0x20	; 32
    1fa0:	0c c0       	rjmp	.+24     	; 0x1fba <vfprintf+0xf0>
    1fa2:	8e 32       	cpi	r24, 0x2E	; 46
    1fa4:	21 f4       	brne	.+8      	; 0x1fae <vfprintf+0xe4>
    1fa6:	26 fd       	sbrc	r18, 6
    1fa8:	f5 c2       	rjmp	.+1514   	; 0x2594 <vfprintf+0x6ca>
    1faa:	20 64       	ori	r18, 0x40	; 64
    1fac:	06 c0       	rjmp	.+12     	; 0x1fba <vfprintf+0xf0>
    1fae:	8c 36       	cpi	r24, 0x6C	; 108
    1fb0:	11 f4       	brne	.+4      	; 0x1fb6 <vfprintf+0xec>
    1fb2:	20 68       	ori	r18, 0x80	; 128
    1fb4:	02 c0       	rjmp	.+4      	; 0x1fba <vfprintf+0xf0>
    1fb6:	88 36       	cpi	r24, 0x68	; 104
    1fb8:	41 f4       	brne	.+16     	; 0x1fca <vfprintf+0x100>
    1fba:	f1 01       	movw	r30, r2
    1fbc:	93 fd       	sbrc	r25, 3
    1fbe:	85 91       	lpm	r24, Z+
    1fc0:	93 ff       	sbrs	r25, 3
    1fc2:	81 91       	ld	r24, Z+
    1fc4:	1f 01       	movw	r2, r30
    1fc6:	81 11       	cpse	r24, r1
    1fc8:	c1 cf       	rjmp	.-126    	; 0x1f4c <vfprintf+0x82>
    1fca:	9b eb       	ldi	r25, 0xBB	; 187
    1fcc:	98 0f       	add	r25, r24
    1fce:	93 30       	cpi	r25, 0x03	; 3
    1fd0:	18 f4       	brcc	.+6      	; 0x1fd8 <vfprintf+0x10e>
    1fd2:	20 61       	ori	r18, 0x10	; 16
    1fd4:	80 5e       	subi	r24, 0xE0	; 224
    1fd6:	06 c0       	rjmp	.+12     	; 0x1fe4 <vfprintf+0x11a>
    1fd8:	9b e9       	ldi	r25, 0x9B	; 155
    1fda:	98 0f       	add	r25, r24
    1fdc:	93 30       	cpi	r25, 0x03	; 3
    1fde:	08 f0       	brcs	.+2      	; 0x1fe2 <vfprintf+0x118>
    1fe0:	9a c1       	rjmp	.+820    	; 0x2316 <vfprintf+0x44c>
    1fe2:	2f 7e       	andi	r18, 0xEF	; 239
    1fe4:	26 ff       	sbrs	r18, 6
    1fe6:	16 e0       	ldi	r17, 0x06	; 6
    1fe8:	2f 73       	andi	r18, 0x3F	; 63
    1fea:	72 2e       	mov	r7, r18
    1fec:	85 36       	cpi	r24, 0x65	; 101
    1fee:	21 f4       	brne	.+8      	; 0x1ff8 <vfprintf+0x12e>
    1ff0:	f2 2f       	mov	r31, r18
    1ff2:	f0 64       	ori	r31, 0x40	; 64
    1ff4:	7f 2e       	mov	r7, r31
    1ff6:	08 c0       	rjmp	.+16     	; 0x2008 <vfprintf+0x13e>
    1ff8:	86 36       	cpi	r24, 0x66	; 102
    1ffa:	21 f4       	brne	.+8      	; 0x2004 <vfprintf+0x13a>
    1ffc:	62 2f       	mov	r22, r18
    1ffe:	60 68       	ori	r22, 0x80	; 128
    2000:	76 2e       	mov	r7, r22
    2002:	02 c0       	rjmp	.+4      	; 0x2008 <vfprintf+0x13e>
    2004:	11 11       	cpse	r17, r1
    2006:	11 50       	subi	r17, 0x01	; 1
    2008:	77 fe       	sbrs	r7, 7
    200a:	07 c0       	rjmp	.+14     	; 0x201a <vfprintf+0x150>
    200c:	1c 33       	cpi	r17, 0x3C	; 60
    200e:	48 f4       	brcc	.+18     	; 0x2022 <vfprintf+0x158>
    2010:	44 24       	eor	r4, r4
    2012:	43 94       	inc	r4
    2014:	41 0e       	add	r4, r17
    2016:	27 e0       	ldi	r18, 0x07	; 7
    2018:	0b c0       	rjmp	.+22     	; 0x2030 <vfprintf+0x166>
    201a:	18 30       	cpi	r17, 0x08	; 8
    201c:	30 f4       	brcc	.+12     	; 0x202a <vfprintf+0x160>
    201e:	21 2f       	mov	r18, r17
    2020:	06 c0       	rjmp	.+12     	; 0x202e <vfprintf+0x164>
    2022:	27 e0       	ldi	r18, 0x07	; 7
    2024:	4c e3       	ldi	r20, 0x3C	; 60
    2026:	44 2e       	mov	r4, r20
    2028:	03 c0       	rjmp	.+6      	; 0x2030 <vfprintf+0x166>
    202a:	27 e0       	ldi	r18, 0x07	; 7
    202c:	17 e0       	ldi	r17, 0x07	; 7
    202e:	41 2c       	mov	r4, r1
    2030:	56 01       	movw	r10, r12
    2032:	74 e0       	ldi	r23, 0x04	; 4
    2034:	a7 0e       	add	r10, r23
    2036:	b1 1c       	adc	r11, r1
    2038:	f6 01       	movw	r30, r12
    203a:	60 81       	ld	r22, Z
    203c:	71 81       	ldd	r23, Z+1	; 0x01
    203e:	82 81       	ldd	r24, Z+2	; 0x02
    2040:	93 81       	ldd	r25, Z+3	; 0x03
    2042:	04 2d       	mov	r16, r4
    2044:	a4 01       	movw	r20, r8
    2046:	e4 d2       	rcall	.+1480   	; 0x2610 <__ftoa_engine>
    2048:	6c 01       	movw	r12, r24
    204a:	09 81       	ldd	r16, Y+1	; 0x01
    204c:	00 ff       	sbrs	r16, 0
    204e:	02 c0       	rjmp	.+4      	; 0x2054 <vfprintf+0x18a>
    2050:	03 ff       	sbrs	r16, 3
    2052:	06 c0       	rjmp	.+12     	; 0x2060 <vfprintf+0x196>
    2054:	71 fc       	sbrc	r7, 1
    2056:	07 c0       	rjmp	.+14     	; 0x2066 <vfprintf+0x19c>
    2058:	72 fc       	sbrc	r7, 2
    205a:	08 c0       	rjmp	.+16     	; 0x206c <vfprintf+0x1a2>
    205c:	61 2c       	mov	r6, r1
    205e:	08 c0       	rjmp	.+16     	; 0x2070 <vfprintf+0x1a6>
    2060:	3d e2       	ldi	r19, 0x2D	; 45
    2062:	63 2e       	mov	r6, r19
    2064:	05 c0       	rjmp	.+10     	; 0x2070 <vfprintf+0x1a6>
    2066:	2b e2       	ldi	r18, 0x2B	; 43
    2068:	62 2e       	mov	r6, r18
    206a:	02 c0       	rjmp	.+4      	; 0x2070 <vfprintf+0x1a6>
    206c:	90 e2       	ldi	r25, 0x20	; 32
    206e:	69 2e       	mov	r6, r25
    2070:	80 2f       	mov	r24, r16
    2072:	8c 70       	andi	r24, 0x0C	; 12
    2074:	81 f1       	breq	.+96     	; 0x20d6 <vfprintf+0x20c>
    2076:	66 20       	and	r6, r6
    2078:	11 f0       	breq	.+4      	; 0x207e <vfprintf+0x1b4>
    207a:	84 e0       	ldi	r24, 0x04	; 4
    207c:	01 c0       	rjmp	.+2      	; 0x2080 <vfprintf+0x1b6>
    207e:	83 e0       	ldi	r24, 0x03	; 3
    2080:	85 15       	cp	r24, r5
    2082:	10 f0       	brcs	.+4      	; 0x2088 <vfprintf+0x1be>
    2084:	51 2c       	mov	r5, r1
    2086:	0a c0       	rjmp	.+20     	; 0x209c <vfprintf+0x1d2>
    2088:	58 1a       	sub	r5, r24
    208a:	73 fc       	sbrc	r7, 3
    208c:	07 c0       	rjmp	.+14     	; 0x209c <vfprintf+0x1d2>
    208e:	b7 01       	movw	r22, r14
    2090:	80 e2       	ldi	r24, 0x20	; 32
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	ab d3       	rcall	.+1878   	; 0x27ec <fputc>
    2096:	5a 94       	dec	r5
    2098:	d1 f7       	brne	.-12     	; 0x208e <vfprintf+0x1c4>
    209a:	f4 cf       	rjmp	.-24     	; 0x2084 <vfprintf+0x1ba>
    209c:	66 20       	and	r6, r6
    209e:	21 f0       	breq	.+8      	; 0x20a8 <vfprintf+0x1de>
    20a0:	b7 01       	movw	r22, r14
    20a2:	86 2d       	mov	r24, r6
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	a2 d3       	rcall	.+1860   	; 0x27ec <fputc>
    20a8:	03 fd       	sbrc	r16, 3
    20aa:	03 c0       	rjmp	.+6      	; 0x20b2 <vfprintf+0x1e8>
    20ac:	00 e0       	ldi	r16, 0x00	; 0
    20ae:	12 e0       	ldi	r17, 0x02	; 2
    20b0:	02 c0       	rjmp	.+4      	; 0x20b6 <vfprintf+0x1ec>
    20b2:	0c ef       	ldi	r16, 0xFC	; 252
    20b4:	11 e0       	ldi	r17, 0x01	; 1
    20b6:	f7 2d       	mov	r31, r7
    20b8:	f0 71       	andi	r31, 0x10	; 16
    20ba:	7f 2e       	mov	r7, r31
    20bc:	f8 01       	movw	r30, r16
    20be:	84 91       	lpm	r24, Z
    20c0:	88 23       	and	r24, r24
    20c2:	09 f4       	brne	.+2      	; 0x20c6 <vfprintf+0x1fc>
    20c4:	5e c2       	rjmp	.+1212   	; 0x2582 <vfprintf+0x6b8>
    20c6:	71 10       	cpse	r7, r1
    20c8:	80 52       	subi	r24, 0x20	; 32
    20ca:	b7 01       	movw	r22, r14
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	8e d3       	rcall	.+1820   	; 0x27ec <fputc>
    20d0:	0f 5f       	subi	r16, 0xFF	; 255
    20d2:	1f 4f       	sbci	r17, 0xFF	; 255
    20d4:	f3 cf       	rjmp	.-26     	; 0x20bc <vfprintf+0x1f2>
    20d6:	77 fe       	sbrs	r7, 7
    20d8:	0f c0       	rjmp	.+30     	; 0x20f8 <vfprintf+0x22e>
    20da:	4c 0c       	add	r4, r12
    20dc:	04 ff       	sbrs	r16, 4
    20de:	04 c0       	rjmp	.+8      	; 0x20e8 <vfprintf+0x21e>
    20e0:	8a 81       	ldd	r24, Y+2	; 0x02
    20e2:	81 33       	cpi	r24, 0x31	; 49
    20e4:	09 f4       	brne	.+2      	; 0x20e8 <vfprintf+0x21e>
    20e6:	4a 94       	dec	r4
    20e8:	14 14       	cp	r1, r4
    20ea:	74 f5       	brge	.+92     	; 0x2148 <vfprintf+0x27e>
    20ec:	f8 e0       	ldi	r31, 0x08	; 8
    20ee:	f4 15       	cp	r31, r4
    20f0:	78 f5       	brcc	.+94     	; 0x2150 <vfprintf+0x286>
    20f2:	88 e0       	ldi	r24, 0x08	; 8
    20f4:	48 2e       	mov	r4, r24
    20f6:	2c c0       	rjmp	.+88     	; 0x2150 <vfprintf+0x286>
    20f8:	76 fc       	sbrc	r7, 6
    20fa:	2a c0       	rjmp	.+84     	; 0x2150 <vfprintf+0x286>
    20fc:	81 2f       	mov	r24, r17
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	8c 15       	cp	r24, r12
    2102:	9d 05       	cpc	r25, r13
    2104:	9c f0       	brlt	.+38     	; 0x212c <vfprintf+0x262>
    2106:	6c ef       	ldi	r22, 0xFC	; 252
    2108:	c6 16       	cp	r12, r22
    210a:	6f ef       	ldi	r22, 0xFF	; 255
    210c:	d6 06       	cpc	r13, r22
    210e:	74 f0       	brlt	.+28     	; 0x212c <vfprintf+0x262>
    2110:	77 2d       	mov	r23, r7
    2112:	70 68       	ori	r23, 0x80	; 128
    2114:	77 2e       	mov	r7, r23
    2116:	0a c0       	rjmp	.+20     	; 0x212c <vfprintf+0x262>
    2118:	e2 e0       	ldi	r30, 0x02	; 2
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	ec 0f       	add	r30, r28
    211e:	fd 1f       	adc	r31, r29
    2120:	e1 0f       	add	r30, r17
    2122:	f1 1d       	adc	r31, r1
    2124:	80 81       	ld	r24, Z
    2126:	80 33       	cpi	r24, 0x30	; 48
    2128:	19 f4       	brne	.+6      	; 0x2130 <vfprintf+0x266>
    212a:	11 50       	subi	r17, 0x01	; 1
    212c:	11 11       	cpse	r17, r1
    212e:	f4 cf       	rjmp	.-24     	; 0x2118 <vfprintf+0x24e>
    2130:	77 fe       	sbrs	r7, 7
    2132:	0e c0       	rjmp	.+28     	; 0x2150 <vfprintf+0x286>
    2134:	44 24       	eor	r4, r4
    2136:	43 94       	inc	r4
    2138:	41 0e       	add	r4, r17
    213a:	81 2f       	mov	r24, r17
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	c8 16       	cp	r12, r24
    2140:	d9 06       	cpc	r13, r25
    2142:	2c f4       	brge	.+10     	; 0x214e <vfprintf+0x284>
    2144:	1c 19       	sub	r17, r12
    2146:	04 c0       	rjmp	.+8      	; 0x2150 <vfprintf+0x286>
    2148:	44 24       	eor	r4, r4
    214a:	43 94       	inc	r4
    214c:	01 c0       	rjmp	.+2      	; 0x2150 <vfprintf+0x286>
    214e:	10 e0       	ldi	r17, 0x00	; 0
    2150:	77 fe       	sbrs	r7, 7
    2152:	07 c0       	rjmp	.+14     	; 0x2162 <vfprintf+0x298>
    2154:	1c 14       	cp	r1, r12
    2156:	1d 04       	cpc	r1, r13
    2158:	3c f4       	brge	.+14     	; 0x2168 <vfprintf+0x29e>
    215a:	96 01       	movw	r18, r12
    215c:	2f 5f       	subi	r18, 0xFF	; 255
    215e:	3f 4f       	sbci	r19, 0xFF	; 255
    2160:	05 c0       	rjmp	.+10     	; 0x216c <vfprintf+0x2a2>
    2162:	25 e0       	ldi	r18, 0x05	; 5
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	02 c0       	rjmp	.+4      	; 0x216c <vfprintf+0x2a2>
    2168:	21 e0       	ldi	r18, 0x01	; 1
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	66 20       	and	r6, r6
    216e:	11 f0       	breq	.+4      	; 0x2174 <vfprintf+0x2aa>
    2170:	2f 5f       	subi	r18, 0xFF	; 255
    2172:	3f 4f       	sbci	r19, 0xFF	; 255
    2174:	11 23       	and	r17, r17
    2176:	31 f0       	breq	.+12     	; 0x2184 <vfprintf+0x2ba>
    2178:	41 2f       	mov	r20, r17
    217a:	50 e0       	ldi	r21, 0x00	; 0
    217c:	4f 5f       	subi	r20, 0xFF	; 255
    217e:	5f 4f       	sbci	r21, 0xFF	; 255
    2180:	24 0f       	add	r18, r20
    2182:	35 1f       	adc	r19, r21
    2184:	45 2d       	mov	r20, r5
    2186:	50 e0       	ldi	r21, 0x00	; 0
    2188:	24 17       	cp	r18, r20
    218a:	35 07       	cpc	r19, r21
    218c:	14 f4       	brge	.+4      	; 0x2192 <vfprintf+0x2c8>
    218e:	52 1a       	sub	r5, r18
    2190:	01 c0       	rjmp	.+2      	; 0x2194 <vfprintf+0x2ca>
    2192:	51 2c       	mov	r5, r1
    2194:	87 2d       	mov	r24, r7
    2196:	89 70       	andi	r24, 0x09	; 9
    2198:	41 f4       	brne	.+16     	; 0x21aa <vfprintf+0x2e0>
    219a:	55 20       	and	r5, r5
    219c:	31 f0       	breq	.+12     	; 0x21aa <vfprintf+0x2e0>
    219e:	b7 01       	movw	r22, r14
    21a0:	80 e2       	ldi	r24, 0x20	; 32
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	23 d3       	rcall	.+1606   	; 0x27ec <fputc>
    21a6:	5a 94       	dec	r5
    21a8:	f8 cf       	rjmp	.-16     	; 0x219a <vfprintf+0x2d0>
    21aa:	66 20       	and	r6, r6
    21ac:	21 f0       	breq	.+8      	; 0x21b6 <vfprintf+0x2ec>
    21ae:	b7 01       	movw	r22, r14
    21b0:	86 2d       	mov	r24, r6
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	1b d3       	rcall	.+1590   	; 0x27ec <fputc>
    21b6:	73 fc       	sbrc	r7, 3
    21b8:	08 c0       	rjmp	.+16     	; 0x21ca <vfprintf+0x300>
    21ba:	55 20       	and	r5, r5
    21bc:	31 f0       	breq	.+12     	; 0x21ca <vfprintf+0x300>
    21be:	b7 01       	movw	r22, r14
    21c0:	80 e3       	ldi	r24, 0x30	; 48
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	13 d3       	rcall	.+1574   	; 0x27ec <fputc>
    21c6:	5a 94       	dec	r5
    21c8:	f8 cf       	rjmp	.-16     	; 0x21ba <vfprintf+0x2f0>
    21ca:	77 fe       	sbrs	r7, 7
    21cc:	5d c0       	rjmp	.+186    	; 0x2288 <vfprintf+0x3be>
    21ce:	9c 2d       	mov	r25, r12
    21d0:	8d 2d       	mov	r24, r13
    21d2:	d7 fe       	sbrs	r13, 7
    21d4:	02 c0       	rjmp	.+4      	; 0x21da <vfprintf+0x310>
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	80 e0       	ldi	r24, 0x00	; 0
    21da:	69 2e       	mov	r6, r25
    21dc:	78 2e       	mov	r7, r24
    21de:	40 e0       	ldi	r20, 0x00	; 0
    21e0:	50 e0       	ldi	r21, 0x00	; 0
    21e2:	c6 01       	movw	r24, r12
    21e4:	84 19       	sub	r24, r4
    21e6:	91 09       	sbc	r25, r1
    21e8:	8c 87       	std	Y+12, r24	; 0x0c
    21ea:	9d 87       	std	Y+13, r25	; 0x0d
    21ec:	96 01       	movw	r18, r12
    21ee:	26 19       	sub	r18, r6
    21f0:	37 09       	sbc	r19, r7
    21f2:	28 0d       	add	r18, r8
    21f4:	39 1d       	adc	r19, r9
    21f6:	81 2f       	mov	r24, r17
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	ee 27       	eor	r30, r30
    21fc:	ff 27       	eor	r31, r31
    21fe:	e8 1b       	sub	r30, r24
    2200:	f9 0b       	sbc	r31, r25
    2202:	ee 87       	std	Y+14, r30	; 0x0e
    2204:	ff 87       	std	Y+15, r31	; 0x0f
    2206:	ff ef       	ldi	r31, 0xFF	; 255
    2208:	6f 16       	cp	r6, r31
    220a:	7f 06       	cpc	r7, r31
    220c:	61 f4       	brne	.+24     	; 0x2226 <vfprintf+0x35c>
    220e:	b7 01       	movw	r22, r14
    2210:	8e e2       	ldi	r24, 0x2E	; 46
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	2b 8b       	std	Y+19, r18	; 0x13
    2216:	3a 8b       	std	Y+18, r19	; 0x12
    2218:	48 8b       	std	Y+16, r20	; 0x10
    221a:	59 8b       	std	Y+17, r21	; 0x11
    221c:	e7 d2       	rcall	.+1486   	; 0x27ec <fputc>
    221e:	59 89       	ldd	r21, Y+17	; 0x11
    2220:	48 89       	ldd	r20, Y+16	; 0x10
    2222:	3a 89       	ldd	r19, Y+18	; 0x12
    2224:	2b 89       	ldd	r18, Y+19	; 0x13
    2226:	c6 14       	cp	r12, r6
    2228:	d7 04       	cpc	r13, r7
    222a:	54 f0       	brlt	.+20     	; 0x2240 <vfprintf+0x376>
    222c:	6c 85       	ldd	r22, Y+12	; 0x0c
    222e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2230:	66 15       	cp	r22, r6
    2232:	77 05       	cpc	r23, r7
    2234:	2c f4       	brge	.+10     	; 0x2240 <vfprintf+0x376>
    2236:	f9 01       	movw	r30, r18
    2238:	e4 0f       	add	r30, r20
    223a:	f5 1f       	adc	r31, r21
    223c:	81 81       	ldd	r24, Z+1	; 0x01
    223e:	01 c0       	rjmp	.+2      	; 0x2242 <vfprintf+0x378>
    2240:	80 e3       	ldi	r24, 0x30	; 48
    2242:	71 e0       	ldi	r23, 0x01	; 1
    2244:	67 1a       	sub	r6, r23
    2246:	71 08       	sbc	r7, r1
    2248:	4f 5f       	subi	r20, 0xFF	; 255
    224a:	5f 4f       	sbci	r21, 0xFF	; 255
    224c:	ee 85       	ldd	r30, Y+14	; 0x0e
    224e:	ff 85       	ldd	r31, Y+15	; 0x0f
    2250:	6e 16       	cp	r6, r30
    2252:	7f 06       	cpc	r7, r31
    2254:	64 f0       	brlt	.+24     	; 0x226e <vfprintf+0x3a4>
    2256:	b7 01       	movw	r22, r14
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	2b 8b       	std	Y+19, r18	; 0x13
    225c:	3a 8b       	std	Y+18, r19	; 0x12
    225e:	48 8b       	std	Y+16, r20	; 0x10
    2260:	59 8b       	std	Y+17, r21	; 0x11
    2262:	c4 d2       	rcall	.+1416   	; 0x27ec <fputc>
    2264:	2b 89       	ldd	r18, Y+19	; 0x13
    2266:	3a 89       	ldd	r19, Y+18	; 0x12
    2268:	48 89       	ldd	r20, Y+16	; 0x10
    226a:	59 89       	ldd	r21, Y+17	; 0x11
    226c:	cc cf       	rjmp	.-104    	; 0x2206 <vfprintf+0x33c>
    226e:	6c 14       	cp	r6, r12
    2270:	7d 04       	cpc	r7, r13
    2272:	39 f4       	brne	.+14     	; 0x2282 <vfprintf+0x3b8>
    2274:	9a 81       	ldd	r25, Y+2	; 0x02
    2276:	96 33       	cpi	r25, 0x36	; 54
    2278:	18 f4       	brcc	.+6      	; 0x2280 <vfprintf+0x3b6>
    227a:	95 33       	cpi	r25, 0x35	; 53
    227c:	11 f4       	brne	.+4      	; 0x2282 <vfprintf+0x3b8>
    227e:	04 ff       	sbrs	r16, 4
    2280:	81 e3       	ldi	r24, 0x31	; 49
    2282:	b7 01       	movw	r22, r14
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	45 c0       	rjmp	.+138    	; 0x2312 <vfprintf+0x448>
    2288:	8a 81       	ldd	r24, Y+2	; 0x02
    228a:	81 33       	cpi	r24, 0x31	; 49
    228c:	09 f0       	breq	.+2      	; 0x2290 <vfprintf+0x3c6>
    228e:	0f 7e       	andi	r16, 0xEF	; 239
    2290:	b7 01       	movw	r22, r14
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	ab d2       	rcall	.+1366   	; 0x27ec <fputc>
    2296:	11 11       	cpse	r17, r1
    2298:	05 c0       	rjmp	.+10     	; 0x22a4 <vfprintf+0x3da>
    229a:	74 fe       	sbrs	r7, 4
    229c:	16 c0       	rjmp	.+44     	; 0x22ca <vfprintf+0x400>
    229e:	85 e4       	ldi	r24, 0x45	; 69
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	15 c0       	rjmp	.+42     	; 0x22ce <vfprintf+0x404>
    22a4:	b7 01       	movw	r22, r14
    22a6:	8e e2       	ldi	r24, 0x2E	; 46
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	a0 d2       	rcall	.+1344   	; 0x27ec <fputc>
    22ac:	82 e0       	ldi	r24, 0x02	; 2
    22ae:	66 24       	eor	r6, r6
    22b0:	63 94       	inc	r6
    22b2:	68 0e       	add	r6, r24
    22b4:	f4 01       	movw	r30, r8
    22b6:	e8 0f       	add	r30, r24
    22b8:	f1 1d       	adc	r31, r1
    22ba:	80 81       	ld	r24, Z
    22bc:	b7 01       	movw	r22, r14
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	95 d2       	rcall	.+1322   	; 0x27ec <fputc>
    22c2:	11 50       	subi	r17, 0x01	; 1
    22c4:	51 f3       	breq	.-44     	; 0x229a <vfprintf+0x3d0>
    22c6:	86 2d       	mov	r24, r6
    22c8:	f2 cf       	rjmp	.-28     	; 0x22ae <vfprintf+0x3e4>
    22ca:	85 e6       	ldi	r24, 0x65	; 101
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	b7 01       	movw	r22, r14
    22d0:	8d d2       	rcall	.+1306   	; 0x27ec <fputc>
    22d2:	d7 fc       	sbrc	r13, 7
    22d4:	05 c0       	rjmp	.+10     	; 0x22e0 <vfprintf+0x416>
    22d6:	c1 14       	cp	r12, r1
    22d8:	d1 04       	cpc	r13, r1
    22da:	39 f4       	brne	.+14     	; 0x22ea <vfprintf+0x420>
    22dc:	04 ff       	sbrs	r16, 4
    22de:	05 c0       	rjmp	.+10     	; 0x22ea <vfprintf+0x420>
    22e0:	d1 94       	neg	r13
    22e2:	c1 94       	neg	r12
    22e4:	d1 08       	sbc	r13, r1
    22e6:	8d e2       	ldi	r24, 0x2D	; 45
    22e8:	01 c0       	rjmp	.+2      	; 0x22ec <vfprintf+0x422>
    22ea:	8b e2       	ldi	r24, 0x2B	; 43
    22ec:	b7 01       	movw	r22, r14
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	7d d2       	rcall	.+1274   	; 0x27ec <fputc>
    22f2:	80 e3       	ldi	r24, 0x30	; 48
    22f4:	6a e0       	ldi	r22, 0x0A	; 10
    22f6:	c6 16       	cp	r12, r22
    22f8:	d1 04       	cpc	r13, r1
    22fa:	2c f0       	brlt	.+10     	; 0x2306 <vfprintf+0x43c>
    22fc:	8f 5f       	subi	r24, 0xFF	; 255
    22fe:	fa e0       	ldi	r31, 0x0A	; 10
    2300:	cf 1a       	sub	r12, r31
    2302:	d1 08       	sbc	r13, r1
    2304:	f7 cf       	rjmp	.-18     	; 0x22f4 <vfprintf+0x42a>
    2306:	b7 01       	movw	r22, r14
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	70 d2       	rcall	.+1248   	; 0x27ec <fputc>
    230c:	b7 01       	movw	r22, r14
    230e:	c6 01       	movw	r24, r12
    2310:	c0 96       	adiw	r24, 0x30	; 48
    2312:	6c d2       	rcall	.+1240   	; 0x27ec <fputc>
    2314:	36 c1       	rjmp	.+620    	; 0x2582 <vfprintf+0x6b8>
    2316:	83 36       	cpi	r24, 0x63	; 99
    2318:	31 f0       	breq	.+12     	; 0x2326 <vfprintf+0x45c>
    231a:	83 37       	cpi	r24, 0x73	; 115
    231c:	79 f0       	breq	.+30     	; 0x233c <vfprintf+0x472>
    231e:	83 35       	cpi	r24, 0x53	; 83
    2320:	09 f0       	breq	.+2      	; 0x2324 <vfprintf+0x45a>
    2322:	54 c0       	rjmp	.+168    	; 0x23cc <vfprintf+0x502>
    2324:	20 c0       	rjmp	.+64     	; 0x2366 <vfprintf+0x49c>
    2326:	56 01       	movw	r10, r12
    2328:	72 e0       	ldi	r23, 0x02	; 2
    232a:	a7 0e       	add	r10, r23
    232c:	b1 1c       	adc	r11, r1
    232e:	f6 01       	movw	r30, r12
    2330:	80 81       	ld	r24, Z
    2332:	89 83       	std	Y+1, r24	; 0x01
    2334:	01 e0       	ldi	r16, 0x01	; 1
    2336:	10 e0       	ldi	r17, 0x00	; 0
    2338:	64 01       	movw	r12, r8
    233a:	13 c0       	rjmp	.+38     	; 0x2362 <vfprintf+0x498>
    233c:	56 01       	movw	r10, r12
    233e:	f2 e0       	ldi	r31, 0x02	; 2
    2340:	af 0e       	add	r10, r31
    2342:	b1 1c       	adc	r11, r1
    2344:	f6 01       	movw	r30, r12
    2346:	c0 80       	ld	r12, Z
    2348:	d1 80       	ldd	r13, Z+1	; 0x01
    234a:	26 ff       	sbrs	r18, 6
    234c:	03 c0       	rjmp	.+6      	; 0x2354 <vfprintf+0x48a>
    234e:	61 2f       	mov	r22, r17
    2350:	70 e0       	ldi	r23, 0x00	; 0
    2352:	02 c0       	rjmp	.+4      	; 0x2358 <vfprintf+0x48e>
    2354:	6f ef       	ldi	r22, 0xFF	; 255
    2356:	7f ef       	ldi	r23, 0xFF	; 255
    2358:	c6 01       	movw	r24, r12
    235a:	2b 8b       	std	Y+19, r18	; 0x13
    235c:	3c d2       	rcall	.+1144   	; 0x27d6 <strnlen>
    235e:	8c 01       	movw	r16, r24
    2360:	2b 89       	ldd	r18, Y+19	; 0x13
    2362:	2f 77       	andi	r18, 0x7F	; 127
    2364:	14 c0       	rjmp	.+40     	; 0x238e <vfprintf+0x4c4>
    2366:	56 01       	movw	r10, r12
    2368:	f2 e0       	ldi	r31, 0x02	; 2
    236a:	af 0e       	add	r10, r31
    236c:	b1 1c       	adc	r11, r1
    236e:	f6 01       	movw	r30, r12
    2370:	c0 80       	ld	r12, Z
    2372:	d1 80       	ldd	r13, Z+1	; 0x01
    2374:	26 ff       	sbrs	r18, 6
    2376:	03 c0       	rjmp	.+6      	; 0x237e <vfprintf+0x4b4>
    2378:	61 2f       	mov	r22, r17
    237a:	70 e0       	ldi	r23, 0x00	; 0
    237c:	02 c0       	rjmp	.+4      	; 0x2382 <vfprintf+0x4b8>
    237e:	6f ef       	ldi	r22, 0xFF	; 255
    2380:	7f ef       	ldi	r23, 0xFF	; 255
    2382:	c6 01       	movw	r24, r12
    2384:	2b 8b       	std	Y+19, r18	; 0x13
    2386:	1c d2       	rcall	.+1080   	; 0x27c0 <strnlen_P>
    2388:	8c 01       	movw	r16, r24
    238a:	2b 89       	ldd	r18, Y+19	; 0x13
    238c:	20 68       	ori	r18, 0x80	; 128
    238e:	72 2e       	mov	r7, r18
    2390:	23 fd       	sbrc	r18, 3
    2392:	18 c0       	rjmp	.+48     	; 0x23c4 <vfprintf+0x4fa>
    2394:	85 2d       	mov	r24, r5
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	08 17       	cp	r16, r24
    239a:	19 07       	cpc	r17, r25
    239c:	98 f4       	brcc	.+38     	; 0x23c4 <vfprintf+0x4fa>
    239e:	b7 01       	movw	r22, r14
    23a0:	80 e2       	ldi	r24, 0x20	; 32
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	23 d2       	rcall	.+1094   	; 0x27ec <fputc>
    23a6:	5a 94       	dec	r5
    23a8:	f5 cf       	rjmp	.-22     	; 0x2394 <vfprintf+0x4ca>
    23aa:	f6 01       	movw	r30, r12
    23ac:	77 fc       	sbrc	r7, 7
    23ae:	85 91       	lpm	r24, Z+
    23b0:	77 fe       	sbrs	r7, 7
    23b2:	81 91       	ld	r24, Z+
    23b4:	6f 01       	movw	r12, r30
    23b6:	b7 01       	movw	r22, r14
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	18 d2       	rcall	.+1072   	; 0x27ec <fputc>
    23bc:	51 10       	cpse	r5, r1
    23be:	5a 94       	dec	r5
    23c0:	01 50       	subi	r16, 0x01	; 1
    23c2:	11 09       	sbc	r17, r1
    23c4:	01 15       	cp	r16, r1
    23c6:	11 05       	cpc	r17, r1
    23c8:	81 f7       	brne	.-32     	; 0x23aa <vfprintf+0x4e0>
    23ca:	db c0       	rjmp	.+438    	; 0x2582 <vfprintf+0x6b8>
    23cc:	84 36       	cpi	r24, 0x64	; 100
    23ce:	11 f0       	breq	.+4      	; 0x23d4 <vfprintf+0x50a>
    23d0:	89 36       	cpi	r24, 0x69	; 105
    23d2:	49 f5       	brne	.+82     	; 0x2426 <vfprintf+0x55c>
    23d4:	56 01       	movw	r10, r12
    23d6:	27 ff       	sbrs	r18, 7
    23d8:	09 c0       	rjmp	.+18     	; 0x23ec <vfprintf+0x522>
    23da:	f4 e0       	ldi	r31, 0x04	; 4
    23dc:	af 0e       	add	r10, r31
    23de:	b1 1c       	adc	r11, r1
    23e0:	f6 01       	movw	r30, r12
    23e2:	60 81       	ld	r22, Z
    23e4:	71 81       	ldd	r23, Z+1	; 0x01
    23e6:	82 81       	ldd	r24, Z+2	; 0x02
    23e8:	93 81       	ldd	r25, Z+3	; 0x03
    23ea:	0a c0       	rjmp	.+20     	; 0x2400 <vfprintf+0x536>
    23ec:	f2 e0       	ldi	r31, 0x02	; 2
    23ee:	af 0e       	add	r10, r31
    23f0:	b1 1c       	adc	r11, r1
    23f2:	f6 01       	movw	r30, r12
    23f4:	60 81       	ld	r22, Z
    23f6:	71 81       	ldd	r23, Z+1	; 0x01
    23f8:	88 27       	eor	r24, r24
    23fa:	77 fd       	sbrc	r23, 7
    23fc:	80 95       	com	r24
    23fe:	98 2f       	mov	r25, r24
    2400:	02 2f       	mov	r16, r18
    2402:	0f 76       	andi	r16, 0x6F	; 111
    2404:	97 ff       	sbrs	r25, 7
    2406:	08 c0       	rjmp	.+16     	; 0x2418 <vfprintf+0x54e>
    2408:	90 95       	com	r25
    240a:	80 95       	com	r24
    240c:	70 95       	com	r23
    240e:	61 95       	neg	r22
    2410:	7f 4f       	sbci	r23, 0xFF	; 255
    2412:	8f 4f       	sbci	r24, 0xFF	; 255
    2414:	9f 4f       	sbci	r25, 0xFF	; 255
    2416:	00 68       	ori	r16, 0x80	; 128
    2418:	2a e0       	ldi	r18, 0x0A	; 10
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	a4 01       	movw	r20, r8
    241e:	18 d2       	rcall	.+1072   	; 0x2850 <__ultoa_invert>
    2420:	c8 2e       	mov	r12, r24
    2422:	c8 18       	sub	r12, r8
    2424:	3d c0       	rjmp	.+122    	; 0x24a0 <vfprintf+0x5d6>
    2426:	02 2f       	mov	r16, r18
    2428:	85 37       	cpi	r24, 0x75	; 117
    242a:	21 f4       	brne	.+8      	; 0x2434 <vfprintf+0x56a>
    242c:	0f 7e       	andi	r16, 0xEF	; 239
    242e:	2a e0       	ldi	r18, 0x0A	; 10
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	1d c0       	rjmp	.+58     	; 0x246e <vfprintf+0x5a4>
    2434:	09 7f       	andi	r16, 0xF9	; 249
    2436:	8f 36       	cpi	r24, 0x6F	; 111
    2438:	91 f0       	breq	.+36     	; 0x245e <vfprintf+0x594>
    243a:	18 f4       	brcc	.+6      	; 0x2442 <vfprintf+0x578>
    243c:	88 35       	cpi	r24, 0x58	; 88
    243e:	59 f0       	breq	.+22     	; 0x2456 <vfprintf+0x58c>
    2440:	a9 c0       	rjmp	.+338    	; 0x2594 <vfprintf+0x6ca>
    2442:	80 37       	cpi	r24, 0x70	; 112
    2444:	19 f0       	breq	.+6      	; 0x244c <vfprintf+0x582>
    2446:	88 37       	cpi	r24, 0x78	; 120
    2448:	11 f0       	breq	.+4      	; 0x244e <vfprintf+0x584>
    244a:	a4 c0       	rjmp	.+328    	; 0x2594 <vfprintf+0x6ca>
    244c:	00 61       	ori	r16, 0x10	; 16
    244e:	04 ff       	sbrs	r16, 4
    2450:	09 c0       	rjmp	.+18     	; 0x2464 <vfprintf+0x59a>
    2452:	04 60       	ori	r16, 0x04	; 4
    2454:	07 c0       	rjmp	.+14     	; 0x2464 <vfprintf+0x59a>
    2456:	24 ff       	sbrs	r18, 4
    2458:	08 c0       	rjmp	.+16     	; 0x246a <vfprintf+0x5a0>
    245a:	06 60       	ori	r16, 0x06	; 6
    245c:	06 c0       	rjmp	.+12     	; 0x246a <vfprintf+0x5a0>
    245e:	28 e0       	ldi	r18, 0x08	; 8
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	05 c0       	rjmp	.+10     	; 0x246e <vfprintf+0x5a4>
    2464:	20 e1       	ldi	r18, 0x10	; 16
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	02 c0       	rjmp	.+4      	; 0x246e <vfprintf+0x5a4>
    246a:	20 e1       	ldi	r18, 0x10	; 16
    246c:	32 e0       	ldi	r19, 0x02	; 2
    246e:	56 01       	movw	r10, r12
    2470:	07 ff       	sbrs	r16, 7
    2472:	09 c0       	rjmp	.+18     	; 0x2486 <vfprintf+0x5bc>
    2474:	f4 e0       	ldi	r31, 0x04	; 4
    2476:	af 0e       	add	r10, r31
    2478:	b1 1c       	adc	r11, r1
    247a:	f6 01       	movw	r30, r12
    247c:	60 81       	ld	r22, Z
    247e:	71 81       	ldd	r23, Z+1	; 0x01
    2480:	82 81       	ldd	r24, Z+2	; 0x02
    2482:	93 81       	ldd	r25, Z+3	; 0x03
    2484:	08 c0       	rjmp	.+16     	; 0x2496 <vfprintf+0x5cc>
    2486:	f2 e0       	ldi	r31, 0x02	; 2
    2488:	af 0e       	add	r10, r31
    248a:	b1 1c       	adc	r11, r1
    248c:	f6 01       	movw	r30, r12
    248e:	60 81       	ld	r22, Z
    2490:	71 81       	ldd	r23, Z+1	; 0x01
    2492:	80 e0       	ldi	r24, 0x00	; 0
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	a4 01       	movw	r20, r8
    2498:	db d1       	rcall	.+950    	; 0x2850 <__ultoa_invert>
    249a:	c8 2e       	mov	r12, r24
    249c:	c8 18       	sub	r12, r8
    249e:	0f 77       	andi	r16, 0x7F	; 127
    24a0:	06 ff       	sbrs	r16, 6
    24a2:	0b c0       	rjmp	.+22     	; 0x24ba <vfprintf+0x5f0>
    24a4:	20 2f       	mov	r18, r16
    24a6:	2e 7f       	andi	r18, 0xFE	; 254
    24a8:	c1 16       	cp	r12, r17
    24aa:	50 f4       	brcc	.+20     	; 0x24c0 <vfprintf+0x5f6>
    24ac:	04 ff       	sbrs	r16, 4
    24ae:	0a c0       	rjmp	.+20     	; 0x24c4 <vfprintf+0x5fa>
    24b0:	02 fd       	sbrc	r16, 2
    24b2:	08 c0       	rjmp	.+16     	; 0x24c4 <vfprintf+0x5fa>
    24b4:	20 2f       	mov	r18, r16
    24b6:	2e 7e       	andi	r18, 0xEE	; 238
    24b8:	05 c0       	rjmp	.+10     	; 0x24c4 <vfprintf+0x5fa>
    24ba:	dc 2c       	mov	r13, r12
    24bc:	20 2f       	mov	r18, r16
    24be:	03 c0       	rjmp	.+6      	; 0x24c6 <vfprintf+0x5fc>
    24c0:	dc 2c       	mov	r13, r12
    24c2:	01 c0       	rjmp	.+2      	; 0x24c6 <vfprintf+0x5fc>
    24c4:	d1 2e       	mov	r13, r17
    24c6:	24 ff       	sbrs	r18, 4
    24c8:	0d c0       	rjmp	.+26     	; 0x24e4 <vfprintf+0x61a>
    24ca:	fe 01       	movw	r30, r28
    24cc:	ec 0d       	add	r30, r12
    24ce:	f1 1d       	adc	r31, r1
    24d0:	80 81       	ld	r24, Z
    24d2:	80 33       	cpi	r24, 0x30	; 48
    24d4:	11 f4       	brne	.+4      	; 0x24da <vfprintf+0x610>
    24d6:	29 7e       	andi	r18, 0xE9	; 233
    24d8:	09 c0       	rjmp	.+18     	; 0x24ec <vfprintf+0x622>
    24da:	22 ff       	sbrs	r18, 2
    24dc:	06 c0       	rjmp	.+12     	; 0x24ea <vfprintf+0x620>
    24de:	d3 94       	inc	r13
    24e0:	d3 94       	inc	r13
    24e2:	04 c0       	rjmp	.+8      	; 0x24ec <vfprintf+0x622>
    24e4:	82 2f       	mov	r24, r18
    24e6:	86 78       	andi	r24, 0x86	; 134
    24e8:	09 f0       	breq	.+2      	; 0x24ec <vfprintf+0x622>
    24ea:	d3 94       	inc	r13
    24ec:	23 fd       	sbrc	r18, 3
    24ee:	12 c0       	rjmp	.+36     	; 0x2514 <vfprintf+0x64a>
    24f0:	20 ff       	sbrs	r18, 0
    24f2:	06 c0       	rjmp	.+12     	; 0x2500 <vfprintf+0x636>
    24f4:	1c 2d       	mov	r17, r12
    24f6:	d5 14       	cp	r13, r5
    24f8:	18 f4       	brcc	.+6      	; 0x2500 <vfprintf+0x636>
    24fa:	15 0d       	add	r17, r5
    24fc:	1d 19       	sub	r17, r13
    24fe:	d5 2c       	mov	r13, r5
    2500:	d5 14       	cp	r13, r5
    2502:	60 f4       	brcc	.+24     	; 0x251c <vfprintf+0x652>
    2504:	b7 01       	movw	r22, r14
    2506:	80 e2       	ldi	r24, 0x20	; 32
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	2b 8b       	std	Y+19, r18	; 0x13
    250c:	6f d1       	rcall	.+734    	; 0x27ec <fputc>
    250e:	d3 94       	inc	r13
    2510:	2b 89       	ldd	r18, Y+19	; 0x13
    2512:	f6 cf       	rjmp	.-20     	; 0x2500 <vfprintf+0x636>
    2514:	d5 14       	cp	r13, r5
    2516:	10 f4       	brcc	.+4      	; 0x251c <vfprintf+0x652>
    2518:	5d 18       	sub	r5, r13
    251a:	01 c0       	rjmp	.+2      	; 0x251e <vfprintf+0x654>
    251c:	51 2c       	mov	r5, r1
    251e:	24 ff       	sbrs	r18, 4
    2520:	11 c0       	rjmp	.+34     	; 0x2544 <vfprintf+0x67a>
    2522:	b7 01       	movw	r22, r14
    2524:	80 e3       	ldi	r24, 0x30	; 48
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	2b 8b       	std	Y+19, r18	; 0x13
    252a:	60 d1       	rcall	.+704    	; 0x27ec <fputc>
    252c:	2b 89       	ldd	r18, Y+19	; 0x13
    252e:	22 ff       	sbrs	r18, 2
    2530:	16 c0       	rjmp	.+44     	; 0x255e <vfprintf+0x694>
    2532:	21 ff       	sbrs	r18, 1
    2534:	03 c0       	rjmp	.+6      	; 0x253c <vfprintf+0x672>
    2536:	88 e5       	ldi	r24, 0x58	; 88
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	02 c0       	rjmp	.+4      	; 0x2540 <vfprintf+0x676>
    253c:	88 e7       	ldi	r24, 0x78	; 120
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	b7 01       	movw	r22, r14
    2542:	0c c0       	rjmp	.+24     	; 0x255c <vfprintf+0x692>
    2544:	82 2f       	mov	r24, r18
    2546:	86 78       	andi	r24, 0x86	; 134
    2548:	51 f0       	breq	.+20     	; 0x255e <vfprintf+0x694>
    254a:	21 fd       	sbrc	r18, 1
    254c:	02 c0       	rjmp	.+4      	; 0x2552 <vfprintf+0x688>
    254e:	80 e2       	ldi	r24, 0x20	; 32
    2550:	01 c0       	rjmp	.+2      	; 0x2554 <vfprintf+0x68a>
    2552:	8b e2       	ldi	r24, 0x2B	; 43
    2554:	27 fd       	sbrc	r18, 7
    2556:	8d e2       	ldi	r24, 0x2D	; 45
    2558:	b7 01       	movw	r22, r14
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	47 d1       	rcall	.+654    	; 0x27ec <fputc>
    255e:	c1 16       	cp	r12, r17
    2560:	30 f4       	brcc	.+12     	; 0x256e <vfprintf+0x6a4>
    2562:	b7 01       	movw	r22, r14
    2564:	80 e3       	ldi	r24, 0x30	; 48
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	41 d1       	rcall	.+642    	; 0x27ec <fputc>
    256a:	11 50       	subi	r17, 0x01	; 1
    256c:	f8 cf       	rjmp	.-16     	; 0x255e <vfprintf+0x694>
    256e:	ca 94       	dec	r12
    2570:	f4 01       	movw	r30, r8
    2572:	ec 0d       	add	r30, r12
    2574:	f1 1d       	adc	r31, r1
    2576:	80 81       	ld	r24, Z
    2578:	b7 01       	movw	r22, r14
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	37 d1       	rcall	.+622    	; 0x27ec <fputc>
    257e:	c1 10       	cpse	r12, r1
    2580:	f6 cf       	rjmp	.-20     	; 0x256e <vfprintf+0x6a4>
    2582:	55 20       	and	r5, r5
    2584:	09 f4       	brne	.+2      	; 0x2588 <vfprintf+0x6be>
    2586:	dd cc       	rjmp	.-1606   	; 0x1f42 <vfprintf+0x78>
    2588:	b7 01       	movw	r22, r14
    258a:	80 e2       	ldi	r24, 0x20	; 32
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	2e d1       	rcall	.+604    	; 0x27ec <fputc>
    2590:	5a 94       	dec	r5
    2592:	f7 cf       	rjmp	.-18     	; 0x2582 <vfprintf+0x6b8>
    2594:	f7 01       	movw	r30, r14
    2596:	86 81       	ldd	r24, Z+6	; 0x06
    2598:	97 81       	ldd	r25, Z+7	; 0x07
    259a:	02 c0       	rjmp	.+4      	; 0x25a0 <vfprintf+0x6d6>
    259c:	8f ef       	ldi	r24, 0xFF	; 255
    259e:	9f ef       	ldi	r25, 0xFF	; 255
    25a0:	63 96       	adiw	r28, 0x13	; 19
    25a2:	cd bf       	out	0x3d, r28	; 61
    25a4:	de bf       	out	0x3e, r29	; 62
    25a6:	df 91       	pop	r29
    25a8:	cf 91       	pop	r28
    25aa:	1f 91       	pop	r17
    25ac:	0f 91       	pop	r16
    25ae:	ff 90       	pop	r15
    25b0:	ef 90       	pop	r14
    25b2:	df 90       	pop	r13
    25b4:	cf 90       	pop	r12
    25b6:	bf 90       	pop	r11
    25b8:	af 90       	pop	r10
    25ba:	9f 90       	pop	r9
    25bc:	8f 90       	pop	r8
    25be:	7f 90       	pop	r7
    25c0:	6f 90       	pop	r6
    25c2:	5f 90       	pop	r5
    25c4:	4f 90       	pop	r4
    25c6:	3f 90       	pop	r3
    25c8:	2f 90       	pop	r2
    25ca:	08 95       	ret

000025cc <__udivmodsi4>:
    25cc:	a1 e2       	ldi	r26, 0x21	; 33
    25ce:	1a 2e       	mov	r1, r26
    25d0:	aa 1b       	sub	r26, r26
    25d2:	bb 1b       	sub	r27, r27
    25d4:	fd 01       	movw	r30, r26
    25d6:	0d c0       	rjmp	.+26     	; 0x25f2 <__udivmodsi4_ep>

000025d8 <__udivmodsi4_loop>:
    25d8:	aa 1f       	adc	r26, r26
    25da:	bb 1f       	adc	r27, r27
    25dc:	ee 1f       	adc	r30, r30
    25de:	ff 1f       	adc	r31, r31
    25e0:	a2 17       	cp	r26, r18
    25e2:	b3 07       	cpc	r27, r19
    25e4:	e4 07       	cpc	r30, r20
    25e6:	f5 07       	cpc	r31, r21
    25e8:	20 f0       	brcs	.+8      	; 0x25f2 <__udivmodsi4_ep>
    25ea:	a2 1b       	sub	r26, r18
    25ec:	b3 0b       	sbc	r27, r19
    25ee:	e4 0b       	sbc	r30, r20
    25f0:	f5 0b       	sbc	r31, r21

000025f2 <__udivmodsi4_ep>:
    25f2:	66 1f       	adc	r22, r22
    25f4:	77 1f       	adc	r23, r23
    25f6:	88 1f       	adc	r24, r24
    25f8:	99 1f       	adc	r25, r25
    25fa:	1a 94       	dec	r1
    25fc:	69 f7       	brne	.-38     	; 0x25d8 <__udivmodsi4_loop>
    25fe:	60 95       	com	r22
    2600:	70 95       	com	r23
    2602:	80 95       	com	r24
    2604:	90 95       	com	r25
    2606:	9b 01       	movw	r18, r22
    2608:	ac 01       	movw	r20, r24
    260a:	bd 01       	movw	r22, r26
    260c:	cf 01       	movw	r24, r30
    260e:	08 95       	ret

00002610 <__ftoa_engine>:
    2610:	28 30       	cpi	r18, 0x08	; 8
    2612:	08 f0       	brcs	.+2      	; 0x2616 <__ftoa_engine+0x6>
    2614:	27 e0       	ldi	r18, 0x07	; 7
    2616:	33 27       	eor	r19, r19
    2618:	da 01       	movw	r26, r20
    261a:	99 0f       	add	r25, r25
    261c:	31 1d       	adc	r19, r1
    261e:	87 fd       	sbrc	r24, 7
    2620:	91 60       	ori	r25, 0x01	; 1
    2622:	00 96       	adiw	r24, 0x00	; 0
    2624:	61 05       	cpc	r22, r1
    2626:	71 05       	cpc	r23, r1
    2628:	39 f4       	brne	.+14     	; 0x2638 <__ftoa_engine+0x28>
    262a:	32 60       	ori	r19, 0x02	; 2
    262c:	2e 5f       	subi	r18, 0xFE	; 254
    262e:	3d 93       	st	X+, r19
    2630:	30 e3       	ldi	r19, 0x30	; 48
    2632:	2a 95       	dec	r18
    2634:	e1 f7       	brne	.-8      	; 0x262e <__ftoa_engine+0x1e>
    2636:	08 95       	ret
    2638:	9f 3f       	cpi	r25, 0xFF	; 255
    263a:	30 f0       	brcs	.+12     	; 0x2648 <__ftoa_engine+0x38>
    263c:	80 38       	cpi	r24, 0x80	; 128
    263e:	71 05       	cpc	r23, r1
    2640:	61 05       	cpc	r22, r1
    2642:	09 f0       	breq	.+2      	; 0x2646 <__ftoa_engine+0x36>
    2644:	3c 5f       	subi	r19, 0xFC	; 252
    2646:	3c 5f       	subi	r19, 0xFC	; 252
    2648:	3d 93       	st	X+, r19
    264a:	91 30       	cpi	r25, 0x01	; 1
    264c:	08 f0       	brcs	.+2      	; 0x2650 <__ftoa_engine+0x40>
    264e:	80 68       	ori	r24, 0x80	; 128
    2650:	91 1d       	adc	r25, r1
    2652:	df 93       	push	r29
    2654:	cf 93       	push	r28
    2656:	1f 93       	push	r17
    2658:	0f 93       	push	r16
    265a:	ff 92       	push	r15
    265c:	ef 92       	push	r14
    265e:	19 2f       	mov	r17, r25
    2660:	98 7f       	andi	r25, 0xF8	; 248
    2662:	96 95       	lsr	r25
    2664:	e9 2f       	mov	r30, r25
    2666:	96 95       	lsr	r25
    2668:	96 95       	lsr	r25
    266a:	e9 0f       	add	r30, r25
    266c:	ff 27       	eor	r31, r31
    266e:	e2 5a       	subi	r30, 0xA2	; 162
    2670:	fd 4f       	sbci	r31, 0xFD	; 253
    2672:	99 27       	eor	r25, r25
    2674:	33 27       	eor	r19, r19
    2676:	ee 24       	eor	r14, r14
    2678:	ff 24       	eor	r15, r15
    267a:	a7 01       	movw	r20, r14
    267c:	e7 01       	movw	r28, r14
    267e:	05 90       	lpm	r0, Z+
    2680:	08 94       	sec
    2682:	07 94       	ror	r0
    2684:	28 f4       	brcc	.+10     	; 0x2690 <__ftoa_engine+0x80>
    2686:	36 0f       	add	r19, r22
    2688:	e7 1e       	adc	r14, r23
    268a:	f8 1e       	adc	r15, r24
    268c:	49 1f       	adc	r20, r25
    268e:	51 1d       	adc	r21, r1
    2690:	66 0f       	add	r22, r22
    2692:	77 1f       	adc	r23, r23
    2694:	88 1f       	adc	r24, r24
    2696:	99 1f       	adc	r25, r25
    2698:	06 94       	lsr	r0
    269a:	a1 f7       	brne	.-24     	; 0x2684 <__ftoa_engine+0x74>
    269c:	05 90       	lpm	r0, Z+
    269e:	07 94       	ror	r0
    26a0:	28 f4       	brcc	.+10     	; 0x26ac <__ftoa_engine+0x9c>
    26a2:	e7 0e       	add	r14, r23
    26a4:	f8 1e       	adc	r15, r24
    26a6:	49 1f       	adc	r20, r25
    26a8:	56 1f       	adc	r21, r22
    26aa:	c1 1d       	adc	r28, r1
    26ac:	77 0f       	add	r23, r23
    26ae:	88 1f       	adc	r24, r24
    26b0:	99 1f       	adc	r25, r25
    26b2:	66 1f       	adc	r22, r22
    26b4:	06 94       	lsr	r0
    26b6:	a1 f7       	brne	.-24     	; 0x26a0 <__ftoa_engine+0x90>
    26b8:	05 90       	lpm	r0, Z+
    26ba:	07 94       	ror	r0
    26bc:	28 f4       	brcc	.+10     	; 0x26c8 <__ftoa_engine+0xb8>
    26be:	f8 0e       	add	r15, r24
    26c0:	49 1f       	adc	r20, r25
    26c2:	56 1f       	adc	r21, r22
    26c4:	c7 1f       	adc	r28, r23
    26c6:	d1 1d       	adc	r29, r1
    26c8:	88 0f       	add	r24, r24
    26ca:	99 1f       	adc	r25, r25
    26cc:	66 1f       	adc	r22, r22
    26ce:	77 1f       	adc	r23, r23
    26d0:	06 94       	lsr	r0
    26d2:	a1 f7       	brne	.-24     	; 0x26bc <__ftoa_engine+0xac>
    26d4:	05 90       	lpm	r0, Z+
    26d6:	07 94       	ror	r0
    26d8:	20 f4       	brcc	.+8      	; 0x26e2 <__ftoa_engine+0xd2>
    26da:	49 0f       	add	r20, r25
    26dc:	56 1f       	adc	r21, r22
    26de:	c7 1f       	adc	r28, r23
    26e0:	d8 1f       	adc	r29, r24
    26e2:	99 0f       	add	r25, r25
    26e4:	66 1f       	adc	r22, r22
    26e6:	77 1f       	adc	r23, r23
    26e8:	88 1f       	adc	r24, r24
    26ea:	06 94       	lsr	r0
    26ec:	a9 f7       	brne	.-22     	; 0x26d8 <__ftoa_engine+0xc8>
    26ee:	84 91       	lpm	r24, Z
    26f0:	10 95       	com	r17
    26f2:	17 70       	andi	r17, 0x07	; 7
    26f4:	41 f0       	breq	.+16     	; 0x2706 <__ftoa_engine+0xf6>
    26f6:	d6 95       	lsr	r29
    26f8:	c7 95       	ror	r28
    26fa:	57 95       	ror	r21
    26fc:	47 95       	ror	r20
    26fe:	f7 94       	ror	r15
    2700:	e7 94       	ror	r14
    2702:	1a 95       	dec	r17
    2704:	c1 f7       	brne	.-16     	; 0x26f6 <__ftoa_engine+0xe6>
    2706:	e4 e0       	ldi	r30, 0x04	; 4
    2708:	f2 e0       	ldi	r31, 0x02	; 2
    270a:	68 94       	set
    270c:	15 90       	lpm	r1, Z+
    270e:	15 91       	lpm	r17, Z+
    2710:	35 91       	lpm	r19, Z+
    2712:	65 91       	lpm	r22, Z+
    2714:	95 91       	lpm	r25, Z+
    2716:	05 90       	lpm	r0, Z+
    2718:	7f e2       	ldi	r23, 0x2F	; 47
    271a:	73 95       	inc	r23
    271c:	e1 18       	sub	r14, r1
    271e:	f1 0a       	sbc	r15, r17
    2720:	43 0b       	sbc	r20, r19
    2722:	56 0b       	sbc	r21, r22
    2724:	c9 0b       	sbc	r28, r25
    2726:	d0 09       	sbc	r29, r0
    2728:	c0 f7       	brcc	.-16     	; 0x271a <__ftoa_engine+0x10a>
    272a:	e1 0c       	add	r14, r1
    272c:	f1 1e       	adc	r15, r17
    272e:	43 1f       	adc	r20, r19
    2730:	56 1f       	adc	r21, r22
    2732:	c9 1f       	adc	r28, r25
    2734:	d0 1d       	adc	r29, r0
    2736:	7e f4       	brtc	.+30     	; 0x2756 <__ftoa_engine+0x146>
    2738:	70 33       	cpi	r23, 0x30	; 48
    273a:	11 f4       	brne	.+4      	; 0x2740 <__ftoa_engine+0x130>
    273c:	8a 95       	dec	r24
    273e:	e6 cf       	rjmp	.-52     	; 0x270c <__ftoa_engine+0xfc>
    2740:	e8 94       	clt
    2742:	01 50       	subi	r16, 0x01	; 1
    2744:	30 f0       	brcs	.+12     	; 0x2752 <__ftoa_engine+0x142>
    2746:	08 0f       	add	r16, r24
    2748:	0a f4       	brpl	.+2      	; 0x274c <__ftoa_engine+0x13c>
    274a:	00 27       	eor	r16, r16
    274c:	02 17       	cp	r16, r18
    274e:	08 f4       	brcc	.+2      	; 0x2752 <__ftoa_engine+0x142>
    2750:	20 2f       	mov	r18, r16
    2752:	23 95       	inc	r18
    2754:	02 2f       	mov	r16, r18
    2756:	7a 33       	cpi	r23, 0x3A	; 58
    2758:	28 f0       	brcs	.+10     	; 0x2764 <__ftoa_engine+0x154>
    275a:	79 e3       	ldi	r23, 0x39	; 57
    275c:	7d 93       	st	X+, r23
    275e:	2a 95       	dec	r18
    2760:	e9 f7       	brne	.-6      	; 0x275c <__ftoa_engine+0x14c>
    2762:	10 c0       	rjmp	.+32     	; 0x2784 <__ftoa_engine+0x174>
    2764:	7d 93       	st	X+, r23
    2766:	2a 95       	dec	r18
    2768:	89 f6       	brne	.-94     	; 0x270c <__ftoa_engine+0xfc>
    276a:	06 94       	lsr	r0
    276c:	97 95       	ror	r25
    276e:	67 95       	ror	r22
    2770:	37 95       	ror	r19
    2772:	17 95       	ror	r17
    2774:	17 94       	ror	r1
    2776:	e1 18       	sub	r14, r1
    2778:	f1 0a       	sbc	r15, r17
    277a:	43 0b       	sbc	r20, r19
    277c:	56 0b       	sbc	r21, r22
    277e:	c9 0b       	sbc	r28, r25
    2780:	d0 09       	sbc	r29, r0
    2782:	98 f0       	brcs	.+38     	; 0x27aa <__ftoa_engine+0x19a>
    2784:	23 95       	inc	r18
    2786:	7e 91       	ld	r23, -X
    2788:	73 95       	inc	r23
    278a:	7a 33       	cpi	r23, 0x3A	; 58
    278c:	08 f0       	brcs	.+2      	; 0x2790 <__ftoa_engine+0x180>
    278e:	70 e3       	ldi	r23, 0x30	; 48
    2790:	7c 93       	st	X, r23
    2792:	20 13       	cpse	r18, r16
    2794:	b8 f7       	brcc	.-18     	; 0x2784 <__ftoa_engine+0x174>
    2796:	7e 91       	ld	r23, -X
    2798:	70 61       	ori	r23, 0x10	; 16
    279a:	7d 93       	st	X+, r23
    279c:	30 f0       	brcs	.+12     	; 0x27aa <__ftoa_engine+0x19a>
    279e:	83 95       	inc	r24
    27a0:	71 e3       	ldi	r23, 0x31	; 49
    27a2:	7d 93       	st	X+, r23
    27a4:	70 e3       	ldi	r23, 0x30	; 48
    27a6:	2a 95       	dec	r18
    27a8:	e1 f7       	brne	.-8      	; 0x27a2 <__ftoa_engine+0x192>
    27aa:	11 24       	eor	r1, r1
    27ac:	ef 90       	pop	r14
    27ae:	ff 90       	pop	r15
    27b0:	0f 91       	pop	r16
    27b2:	1f 91       	pop	r17
    27b4:	cf 91       	pop	r28
    27b6:	df 91       	pop	r29
    27b8:	99 27       	eor	r25, r25
    27ba:	87 fd       	sbrc	r24, 7
    27bc:	90 95       	com	r25
    27be:	08 95       	ret

000027c0 <strnlen_P>:
    27c0:	fc 01       	movw	r30, r24
    27c2:	05 90       	lpm	r0, Z+
    27c4:	61 50       	subi	r22, 0x01	; 1
    27c6:	70 40       	sbci	r23, 0x00	; 0
    27c8:	01 10       	cpse	r0, r1
    27ca:	d8 f7       	brcc	.-10     	; 0x27c2 <strnlen_P+0x2>
    27cc:	80 95       	com	r24
    27ce:	90 95       	com	r25
    27d0:	8e 0f       	add	r24, r30
    27d2:	9f 1f       	adc	r25, r31
    27d4:	08 95       	ret

000027d6 <strnlen>:
    27d6:	fc 01       	movw	r30, r24
    27d8:	61 50       	subi	r22, 0x01	; 1
    27da:	70 40       	sbci	r23, 0x00	; 0
    27dc:	01 90       	ld	r0, Z+
    27de:	01 10       	cpse	r0, r1
    27e0:	d8 f7       	brcc	.-10     	; 0x27d8 <strnlen+0x2>
    27e2:	80 95       	com	r24
    27e4:	90 95       	com	r25
    27e6:	8e 0f       	add	r24, r30
    27e8:	9f 1f       	adc	r25, r31
    27ea:	08 95       	ret

000027ec <fputc>:
    27ec:	0f 93       	push	r16
    27ee:	1f 93       	push	r17
    27f0:	cf 93       	push	r28
    27f2:	df 93       	push	r29
    27f4:	18 2f       	mov	r17, r24
    27f6:	09 2f       	mov	r16, r25
    27f8:	eb 01       	movw	r28, r22
    27fa:	8b 81       	ldd	r24, Y+3	; 0x03
    27fc:	81 fd       	sbrc	r24, 1
    27fe:	03 c0       	rjmp	.+6      	; 0x2806 <fputc+0x1a>
    2800:	8f ef       	ldi	r24, 0xFF	; 255
    2802:	9f ef       	ldi	r25, 0xFF	; 255
    2804:	20 c0       	rjmp	.+64     	; 0x2846 <fputc+0x5a>
    2806:	82 ff       	sbrs	r24, 2
    2808:	10 c0       	rjmp	.+32     	; 0x282a <fputc+0x3e>
    280a:	4e 81       	ldd	r20, Y+6	; 0x06
    280c:	5f 81       	ldd	r21, Y+7	; 0x07
    280e:	2c 81       	ldd	r18, Y+4	; 0x04
    2810:	3d 81       	ldd	r19, Y+5	; 0x05
    2812:	42 17       	cp	r20, r18
    2814:	53 07       	cpc	r21, r19
    2816:	7c f4       	brge	.+30     	; 0x2836 <fputc+0x4a>
    2818:	e8 81       	ld	r30, Y
    281a:	f9 81       	ldd	r31, Y+1	; 0x01
    281c:	9f 01       	movw	r18, r30
    281e:	2f 5f       	subi	r18, 0xFF	; 255
    2820:	3f 4f       	sbci	r19, 0xFF	; 255
    2822:	28 83       	st	Y, r18
    2824:	39 83       	std	Y+1, r19	; 0x01
    2826:	10 83       	st	Z, r17
    2828:	06 c0       	rjmp	.+12     	; 0x2836 <fputc+0x4a>
    282a:	e8 85       	ldd	r30, Y+8	; 0x08
    282c:	f9 85       	ldd	r31, Y+9	; 0x09
    282e:	81 2f       	mov	r24, r17
    2830:	19 95       	eicall
    2832:	89 2b       	or	r24, r25
    2834:	29 f7       	brne	.-54     	; 0x2800 <fputc+0x14>
    2836:	2e 81       	ldd	r18, Y+6	; 0x06
    2838:	3f 81       	ldd	r19, Y+7	; 0x07
    283a:	2f 5f       	subi	r18, 0xFF	; 255
    283c:	3f 4f       	sbci	r19, 0xFF	; 255
    283e:	2e 83       	std	Y+6, r18	; 0x06
    2840:	3f 83       	std	Y+7, r19	; 0x07
    2842:	81 2f       	mov	r24, r17
    2844:	90 2f       	mov	r25, r16
    2846:	df 91       	pop	r29
    2848:	cf 91       	pop	r28
    284a:	1f 91       	pop	r17
    284c:	0f 91       	pop	r16
    284e:	08 95       	ret

00002850 <__ultoa_invert>:
    2850:	fa 01       	movw	r30, r20
    2852:	aa 27       	eor	r26, r26
    2854:	28 30       	cpi	r18, 0x08	; 8
    2856:	51 f1       	breq	.+84     	; 0x28ac <__ultoa_invert+0x5c>
    2858:	20 31       	cpi	r18, 0x10	; 16
    285a:	81 f1       	breq	.+96     	; 0x28bc <__ultoa_invert+0x6c>
    285c:	e8 94       	clt
    285e:	6f 93       	push	r22
    2860:	6e 7f       	andi	r22, 0xFE	; 254
    2862:	6e 5f       	subi	r22, 0xFE	; 254
    2864:	7f 4f       	sbci	r23, 0xFF	; 255
    2866:	8f 4f       	sbci	r24, 0xFF	; 255
    2868:	9f 4f       	sbci	r25, 0xFF	; 255
    286a:	af 4f       	sbci	r26, 0xFF	; 255
    286c:	b1 e0       	ldi	r27, 0x01	; 1
    286e:	3e d0       	rcall	.+124    	; 0x28ec <__ultoa_invert+0x9c>
    2870:	b4 e0       	ldi	r27, 0x04	; 4
    2872:	3c d0       	rcall	.+120    	; 0x28ec <__ultoa_invert+0x9c>
    2874:	67 0f       	add	r22, r23
    2876:	78 1f       	adc	r23, r24
    2878:	89 1f       	adc	r24, r25
    287a:	9a 1f       	adc	r25, r26
    287c:	a1 1d       	adc	r26, r1
    287e:	68 0f       	add	r22, r24
    2880:	79 1f       	adc	r23, r25
    2882:	8a 1f       	adc	r24, r26
    2884:	91 1d       	adc	r25, r1
    2886:	a1 1d       	adc	r26, r1
    2888:	6a 0f       	add	r22, r26
    288a:	71 1d       	adc	r23, r1
    288c:	81 1d       	adc	r24, r1
    288e:	91 1d       	adc	r25, r1
    2890:	a1 1d       	adc	r26, r1
    2892:	20 d0       	rcall	.+64     	; 0x28d4 <__ultoa_invert+0x84>
    2894:	09 f4       	brne	.+2      	; 0x2898 <__ultoa_invert+0x48>
    2896:	68 94       	set
    2898:	3f 91       	pop	r19
    289a:	2a e0       	ldi	r18, 0x0A	; 10
    289c:	26 9f       	mul	r18, r22
    289e:	11 24       	eor	r1, r1
    28a0:	30 19       	sub	r19, r0
    28a2:	30 5d       	subi	r19, 0xD0	; 208
    28a4:	31 93       	st	Z+, r19
    28a6:	de f6       	brtc	.-74     	; 0x285e <__ultoa_invert+0xe>
    28a8:	cf 01       	movw	r24, r30
    28aa:	08 95       	ret
    28ac:	46 2f       	mov	r20, r22
    28ae:	47 70       	andi	r20, 0x07	; 7
    28b0:	40 5d       	subi	r20, 0xD0	; 208
    28b2:	41 93       	st	Z+, r20
    28b4:	b3 e0       	ldi	r27, 0x03	; 3
    28b6:	0f d0       	rcall	.+30     	; 0x28d6 <__ultoa_invert+0x86>
    28b8:	c9 f7       	brne	.-14     	; 0x28ac <__ultoa_invert+0x5c>
    28ba:	f6 cf       	rjmp	.-20     	; 0x28a8 <__ultoa_invert+0x58>
    28bc:	46 2f       	mov	r20, r22
    28be:	4f 70       	andi	r20, 0x0F	; 15
    28c0:	40 5d       	subi	r20, 0xD0	; 208
    28c2:	4a 33       	cpi	r20, 0x3A	; 58
    28c4:	18 f0       	brcs	.+6      	; 0x28cc <__ultoa_invert+0x7c>
    28c6:	49 5d       	subi	r20, 0xD9	; 217
    28c8:	31 fd       	sbrc	r19, 1
    28ca:	40 52       	subi	r20, 0x20	; 32
    28cc:	41 93       	st	Z+, r20
    28ce:	02 d0       	rcall	.+4      	; 0x28d4 <__ultoa_invert+0x84>
    28d0:	a9 f7       	brne	.-22     	; 0x28bc <__ultoa_invert+0x6c>
    28d2:	ea cf       	rjmp	.-44     	; 0x28a8 <__ultoa_invert+0x58>
    28d4:	b4 e0       	ldi	r27, 0x04	; 4
    28d6:	a6 95       	lsr	r26
    28d8:	97 95       	ror	r25
    28da:	87 95       	ror	r24
    28dc:	77 95       	ror	r23
    28de:	67 95       	ror	r22
    28e0:	ba 95       	dec	r27
    28e2:	c9 f7       	brne	.-14     	; 0x28d6 <__ultoa_invert+0x86>
    28e4:	00 97       	sbiw	r24, 0x00	; 0
    28e6:	61 05       	cpc	r22, r1
    28e8:	71 05       	cpc	r23, r1
    28ea:	08 95       	ret
    28ec:	9b 01       	movw	r18, r22
    28ee:	ac 01       	movw	r20, r24
    28f0:	0a 2e       	mov	r0, r26
    28f2:	06 94       	lsr	r0
    28f4:	57 95       	ror	r21
    28f6:	47 95       	ror	r20
    28f8:	37 95       	ror	r19
    28fa:	27 95       	ror	r18
    28fc:	ba 95       	dec	r27
    28fe:	c9 f7       	brne	.-14     	; 0x28f2 <__ultoa_invert+0xa2>
    2900:	62 0f       	add	r22, r18
    2902:	73 1f       	adc	r23, r19
    2904:	84 1f       	adc	r24, r20
    2906:	95 1f       	adc	r25, r21
    2908:	a0 1d       	adc	r26, r0
    290a:	08 95       	ret

0000290c <_exit>:
    290c:	f8 94       	cli

0000290e <__stop_program>:
    290e:	ff cf       	rjmp	.-2      	; 0x290e <__stop_program>
