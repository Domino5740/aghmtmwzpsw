
ADC_OnInterrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000271c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00802000  0000271c  000027b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000054  00802008  00802008  000027b8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000027b8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000358  00000000  00000000  00002818  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00008e18  00000000  00000000  00002b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001346  00000000  00000000  0000b988  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000040e6  00000000  00000000  0000ccce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001324  00000000  00000000  00010db4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0002b174  00000000  00000000  000120d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000041e0  00000000  00000000  0003d24c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002f0  00000000  00000000  00041430  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000019b6  00000000  00000000  00041720  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	85 c1       	rjmp	.+778    	; 0x30c <__ctors_end>
       2:	00 00       	nop
       4:	a4 c1       	rjmp	.+840    	; 0x34e <__bad_interrupt>
       6:	00 00       	nop
       8:	a2 c1       	rjmp	.+836    	; 0x34e <__bad_interrupt>
       a:	00 00       	nop
       c:	a0 c1       	rjmp	.+832    	; 0x34e <__bad_interrupt>
       e:	00 00       	nop
      10:	9e c1       	rjmp	.+828    	; 0x34e <__bad_interrupt>
      12:	00 00       	nop
      14:	9c c1       	rjmp	.+824    	; 0x34e <__bad_interrupt>
      16:	00 00       	nop
      18:	9a c1       	rjmp	.+820    	; 0x34e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	98 c1       	rjmp	.+816    	; 0x34e <__bad_interrupt>
      1e:	00 00       	nop
      20:	96 c1       	rjmp	.+812    	; 0x34e <__bad_interrupt>
      22:	00 00       	nop
      24:	94 c1       	rjmp	.+808    	; 0x34e <__bad_interrupt>
      26:	00 00       	nop
      28:	92 c1       	rjmp	.+804    	; 0x34e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	90 c1       	rjmp	.+800    	; 0x34e <__bad_interrupt>
      2e:	00 00       	nop
      30:	8e c1       	rjmp	.+796    	; 0x34e <__bad_interrupt>
      32:	00 00       	nop
      34:	8c c1       	rjmp	.+792    	; 0x34e <__bad_interrupt>
      36:	00 00       	nop
      38:	8b c1       	rjmp	.+790    	; 0x350 <__vector_14>
      3a:	00 00       	nop
      3c:	b6 c1       	rjmp	.+876    	; 0x3aa <__vector_15>
      3e:	00 00       	nop
      40:	e1 c1       	rjmp	.+962    	; 0x404 <__vector_16>
      42:	00 00       	nop
      44:	0c c2       	rjmp	.+1048   	; 0x45e <__vector_17>
      46:	00 00       	nop
      48:	37 c2       	rjmp	.+1134   	; 0x4b8 <__vector_18>
      4a:	00 00       	nop
      4c:	62 c2       	rjmp	.+1220   	; 0x512 <__vector_19>
      4e:	00 00       	nop
      50:	8d c2       	rjmp	.+1306   	; 0x56c <__vector_20>
      52:	00 00       	nop
      54:	b8 c2       	rjmp	.+1392   	; 0x5c6 <__vector_21>
      56:	00 00       	nop
      58:	e3 c2       	rjmp	.+1478   	; 0x620 <__vector_22>
      5a:	00 00       	nop
      5c:	0e c3       	rjmp	.+1564   	; 0x67a <__vector_23>
      5e:	00 00       	nop
      60:	76 c1       	rjmp	.+748    	; 0x34e <__bad_interrupt>
      62:	00 00       	nop
      64:	74 c1       	rjmp	.+744    	; 0x34e <__bad_interrupt>
      66:	00 00       	nop
      68:	72 c1       	rjmp	.+740    	; 0x34e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	70 c1       	rjmp	.+736    	; 0x34e <__bad_interrupt>
      6e:	00 00       	nop
      70:	6e c1       	rjmp	.+732    	; 0x34e <__bad_interrupt>
      72:	00 00       	nop
      74:	6c c1       	rjmp	.+728    	; 0x34e <__bad_interrupt>
      76:	00 00       	nop
      78:	6a c1       	rjmp	.+724    	; 0x34e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	68 c1       	rjmp	.+720    	; 0x34e <__bad_interrupt>
      7e:	00 00       	nop
      80:	66 c1       	rjmp	.+716    	; 0x34e <__bad_interrupt>
      82:	00 00       	nop
      84:	64 c1       	rjmp	.+712    	; 0x34e <__bad_interrupt>
      86:	00 00       	nop
      88:	62 c1       	rjmp	.+708    	; 0x34e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	60 c1       	rjmp	.+704    	; 0x34e <__bad_interrupt>
      8e:	00 00       	nop
      90:	5e c1       	rjmp	.+700    	; 0x34e <__bad_interrupt>
      92:	00 00       	nop
      94:	5c c1       	rjmp	.+696    	; 0x34e <__bad_interrupt>
      96:	00 00       	nop
      98:	5a c1       	rjmp	.+692    	; 0x34e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 b1 0b 	jmp	0x1762	; 0x1762 <__vector_39>
      a0:	0c 94 e3 0b 	jmp	0x17c6	; 0x17c6 <__vector_40>
      a4:	0c 94 15 0c 	jmp	0x182a	; 0x182a <__vector_41>
      a8:	0c 94 47 0c 	jmp	0x188e	; 0x188e <__vector_42>
      ac:	50 c1       	rjmp	.+672    	; 0x34e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4e c1       	rjmp	.+668    	; 0x34e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	4c c1       	rjmp	.+664    	; 0x34e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	4a c1       	rjmp	.+660    	; 0x34e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	cd c4       	rjmp	.+2458   	; 0xa58 <__vector_47>
      be:	00 00       	nop
      c0:	f8 c4       	rjmp	.+2544   	; 0xab2 <__vector_48>
      c2:	00 00       	nop
      c4:	23 c5       	rjmp	.+2630   	; 0xb0c <__vector_49>
      c6:	00 00       	nop
      c8:	4e c5       	rjmp	.+2716   	; 0xb66 <__vector_50>
      ca:	00 00       	nop
      cc:	79 c5       	rjmp	.+2802   	; 0xbc0 <__vector_51>
      ce:	00 00       	nop
      d0:	a4 c5       	rjmp	.+2888   	; 0xc1a <__vector_52>
      d2:	00 00       	nop
      d4:	cf c5       	rjmp	.+2974   	; 0xc74 <__vector_53>
      d6:	00 00       	nop
      d8:	fa c5       	rjmp	.+3060   	; 0xcce <__vector_54>
      da:	00 00       	nop
      dc:	25 c6       	rjmp	.+3146   	; 0xd28 <__vector_55>
      de:	00 00       	nop
      e0:	50 c6       	rjmp	.+3232   	; 0xd82 <__vector_56>
      e2:	00 00       	nop
      e4:	34 c1       	rjmp	.+616    	; 0x34e <__bad_interrupt>
      e6:	00 00       	nop
      e8:	32 c1       	rjmp	.+612    	; 0x34e <__bad_interrupt>
      ea:	00 00       	nop
      ec:	30 c1       	rjmp	.+608    	; 0x34e <__bad_interrupt>
      ee:	00 00       	nop
      f0:	2e c1       	rjmp	.+604    	; 0x34e <__bad_interrupt>
      f2:	00 00       	nop
      f4:	2c c1       	rjmp	.+600    	; 0x34e <__bad_interrupt>
      f6:	00 00       	nop
      f8:	2a c1       	rjmp	.+596    	; 0x34e <__bad_interrupt>
      fa:	00 00       	nop
      fc:	28 c1       	rjmp	.+592    	; 0x34e <__bad_interrupt>
      fe:	00 00       	nop
     100:	26 c1       	rjmp	.+588    	; 0x34e <__bad_interrupt>
     102:	00 00       	nop
     104:	24 c1       	rjmp	.+584    	; 0x34e <__bad_interrupt>
     106:	00 00       	nop
     108:	22 c1       	rjmp	.+580    	; 0x34e <__bad_interrupt>
     10a:	00 00       	nop
     10c:	20 c1       	rjmp	.+576    	; 0x34e <__bad_interrupt>
     10e:	00 00       	nop
     110:	1e c1       	rjmp	.+572    	; 0x34e <__bad_interrupt>
     112:	00 00       	nop
     114:	1c c1       	rjmp	.+568    	; 0x34e <__bad_interrupt>
     116:	00 00       	nop
     118:	1a c1       	rjmp	.+564    	; 0x34e <__bad_interrupt>
     11a:	00 00       	nop
     11c:	0c 94 e9 0a 	jmp	0x15d2	; 0x15d2 <__vector_71>
     120:	0c 94 1b 0b 	jmp	0x1636	; 0x1636 <__vector_72>
     124:	0c 94 4d 0b 	jmp	0x169a	; 0x169a <__vector_73>
     128:	0c 94 7f 0b 	jmp	0x16fe	; 0x16fe <__vector_74>
     12c:	10 c1       	rjmp	.+544    	; 0x34e <__bad_interrupt>
     12e:	00 00       	nop
     130:	0e c1       	rjmp	.+540    	; 0x34e <__bad_interrupt>
     132:	00 00       	nop
     134:	cf c2       	rjmp	.+1438   	; 0x6d4 <__vector_77>
     136:	00 00       	nop
     138:	fa c2       	rjmp	.+1524   	; 0x72e <__vector_78>
     13a:	00 00       	nop
     13c:	25 c3       	rjmp	.+1610   	; 0x788 <__vector_79>
     13e:	00 00       	nop
     140:	50 c3       	rjmp	.+1696   	; 0x7e2 <__vector_80>
     142:	00 00       	nop
     144:	7b c3       	rjmp	.+1782   	; 0x83c <__vector_81>
     146:	00 00       	nop
     148:	a6 c3       	rjmp	.+1868   	; 0x896 <__vector_82>
     14a:	00 00       	nop
     14c:	d1 c3       	rjmp	.+1954   	; 0x8f0 <__vector_83>
     14e:	00 00       	nop
     150:	fc c3       	rjmp	.+2040   	; 0x94a <__vector_84>
     152:	00 00       	nop
     154:	27 c4       	rjmp	.+2126   	; 0x9a4 <__vector_85>
     156:	00 00       	nop
     158:	52 c4       	rjmp	.+2212   	; 0x9fe <__vector_86>
     15a:	00 00       	nop
     15c:	f8 c0       	rjmp	.+496    	; 0x34e <__bad_interrupt>
     15e:	00 00       	nop
     160:	f6 c0       	rjmp	.+492    	; 0x34e <__bad_interrupt>
     162:	00 00       	nop
     164:	f4 c0       	rjmp	.+488    	; 0x34e <__bad_interrupt>
     166:	00 00       	nop
     168:	f2 c0       	rjmp	.+484    	; 0x34e <__bad_interrupt>
     16a:	00 00       	nop
     16c:	f0 c0       	rjmp	.+480    	; 0x34e <__bad_interrupt>
     16e:	00 00       	nop
     170:	ee c0       	rjmp	.+476    	; 0x34e <__bad_interrupt>
     172:	00 00       	nop
     174:	ec c0       	rjmp	.+472    	; 0x34e <__bad_interrupt>
     176:	00 00       	nop
     178:	ea c0       	rjmp	.+468    	; 0x34e <__bad_interrupt>
     17a:	00 00       	nop
     17c:	e8 c0       	rjmp	.+464    	; 0x34e <__bad_interrupt>
     17e:	00 00       	nop
     180:	e6 c0       	rjmp	.+460    	; 0x34e <__bad_interrupt>
     182:	00 00       	nop
     184:	e4 c0       	rjmp	.+456    	; 0x34e <__bad_interrupt>
     186:	00 00       	nop
     188:	e2 c0       	rjmp	.+452    	; 0x34e <__bad_interrupt>
     18a:	00 00       	nop
     18c:	e0 c0       	rjmp	.+448    	; 0x34e <__bad_interrupt>
     18e:	00 00       	nop
     190:	de c0       	rjmp	.+444    	; 0x34e <__bad_interrupt>
     192:	00 00       	nop
     194:	dc c0       	rjmp	.+440    	; 0x34e <__bad_interrupt>
     196:	00 00       	nop
     198:	da c0       	rjmp	.+436    	; 0x34e <__bad_interrupt>
     19a:	00 00       	nop
     19c:	d8 c0       	rjmp	.+432    	; 0x34e <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	d6 c0       	rjmp	.+428    	; 0x34e <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	d4 c0       	rjmp	.+424    	; 0x34e <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	d2 c0       	rjmp	.+420    	; 0x34e <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	d0 c0       	rjmp	.+416    	; 0x34e <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	15 c6       	rjmp	.+3114   	; 0xddc <__vector_108>
     1b2:	00 00       	nop
     1b4:	40 c6       	rjmp	.+3200   	; 0xe36 <__vector_109>
     1b6:	00 00       	nop
     1b8:	6b c6       	rjmp	.+3286   	; 0xe90 <__vector_110>
     1ba:	00 00       	nop
     1bc:	96 c6       	rjmp	.+3372   	; 0xeea <__vector_111>
     1be:	00 00       	nop
     1c0:	c1 c6       	rjmp	.+3458   	; 0xf44 <__vector_112>
     1c2:	00 00       	nop
     1c4:	ec c6       	rjmp	.+3544   	; 0xf9e <__vector_113>
     1c6:	00 00       	nop
     1c8:	c2 c0       	rjmp	.+388    	; 0x34e <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	c0 c0       	rjmp	.+384    	; 0x34e <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	be c0       	rjmp	.+380    	; 0x34e <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	bc c0       	rjmp	.+376    	; 0x34e <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	ba c0       	rjmp	.+372    	; 0x34e <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	b8 c0       	rjmp	.+368    	; 0x34e <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	b6 c0       	rjmp	.+364    	; 0x34e <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	b4 c0       	rjmp	.+360    	; 0x34e <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	b2 c0       	rjmp	.+356    	; 0x34e <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	b0 c0       	rjmp	.+352    	; 0x34e <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	ae c0       	rjmp	.+348    	; 0x34e <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	ac c0       	rjmp	.+344    	; 0x34e <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	aa c0       	rjmp	.+340    	; 0x34e <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	db 0d       	add	r29, r11
     1fe:	f9 0d       	add	r31, r9
     200:	f4 0d       	add	r31, r4
     202:	ef 0d       	add	r30, r15
     204:	ea 0d       	add	r30, r10
     206:	e5 0d       	add	r30, r5
     208:	e0 0d       	add	r30, r0

0000020a <__trampolines_end>:
     20a:	6e 61       	ori	r22, 0x1E	; 30
     20c:	6e 00       	.word	0x006e	; ????

0000020e <__c.2159>:
     20e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     21e:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     22e:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     23e:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     24e:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     25e:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     26e:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     27e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     28e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     29e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2ae:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2be:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2ce:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2de:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2ee:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2fe:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000030c <__ctors_end>:
     30c:	11 24       	eor	r1, r1
     30e:	1f be       	out	0x3f, r1	; 63
     310:	cf ef       	ldi	r28, 0xFF	; 255
     312:	cd bf       	out	0x3d, r28	; 61
     314:	df e5       	ldi	r29, 0x5F	; 95
     316:	de bf       	out	0x3e, r29	; 62
     318:	00 e0       	ldi	r16, 0x00	; 0
     31a:	0c bf       	out	0x3c, r16	; 60

0000031c <__do_copy_data>:
     31c:	10 e2       	ldi	r17, 0x20	; 32
     31e:	a0 e0       	ldi	r26, 0x00	; 0
     320:	b0 e2       	ldi	r27, 0x20	; 32
     322:	ec e1       	ldi	r30, 0x1C	; 28
     324:	f7 e2       	ldi	r31, 0x27	; 39
     326:	00 e0       	ldi	r16, 0x00	; 0
     328:	0b bf       	out	0x3b, r16	; 59
     32a:	02 c0       	rjmp	.+4      	; 0x330 <__do_copy_data+0x14>
     32c:	07 90       	elpm	r0, Z+
     32e:	0d 92       	st	X+, r0
     330:	a8 30       	cpi	r26, 0x08	; 8
     332:	b1 07       	cpc	r27, r17
     334:	d9 f7       	brne	.-10     	; 0x32c <__do_copy_data+0x10>

00000336 <__do_clear_bss>:
     336:	20 e2       	ldi	r18, 0x20	; 32
     338:	a8 e0       	ldi	r26, 0x08	; 8
     33a:	b0 e2       	ldi	r27, 0x20	; 32
     33c:	01 c0       	rjmp	.+2      	; 0x340 <.do_clear_bss_start>

0000033e <.do_clear_bss_loop>:
     33e:	1d 92       	st	X+, r1

00000340 <.do_clear_bss_start>:
     340:	ac 35       	cpi	r26, 0x5C	; 92
     342:	b2 07       	cpc	r27, r18
     344:	e1 f7       	brne	.-8      	; 0x33e <.do_clear_bss_loop>
     346:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <main>
     34a:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <_exit>

0000034e <__bad_interrupt>:
     34e:	58 ce       	rjmp	.-848    	; 0x0 <__vectors>

00000350 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     350:	1f 92       	push	r1
     352:	0f 92       	push	r0
     354:	0f b6       	in	r0, 0x3f	; 63
     356:	0f 92       	push	r0
     358:	11 24       	eor	r1, r1
     35a:	0b b6       	in	r0, 0x3b	; 59
     35c:	0f 92       	push	r0
     35e:	2f 93       	push	r18
     360:	3f 93       	push	r19
     362:	4f 93       	push	r20
     364:	5f 93       	push	r21
     366:	6f 93       	push	r22
     368:	7f 93       	push	r23
     36a:	8f 93       	push	r24
     36c:	9f 93       	push	r25
     36e:	af 93       	push	r26
     370:	bf 93       	push	r27
     372:	ef 93       	push	r30
     374:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     376:	e0 91 4e 20 	lds	r30, 0x204E
     37a:	f0 91 4f 20 	lds	r31, 0x204F
     37e:	30 97       	sbiw	r30, 0x00	; 0
     380:	09 f0       	breq	.+2      	; 0x384 <__vector_14+0x34>
		tc_tcc0_ovf_callback();
     382:	19 95       	eicall
	}
}
     384:	ff 91       	pop	r31
     386:	ef 91       	pop	r30
     388:	bf 91       	pop	r27
     38a:	af 91       	pop	r26
     38c:	9f 91       	pop	r25
     38e:	8f 91       	pop	r24
     390:	7f 91       	pop	r23
     392:	6f 91       	pop	r22
     394:	5f 91       	pop	r21
     396:	4f 91       	pop	r20
     398:	3f 91       	pop	r19
     39a:	2f 91       	pop	r18
     39c:	0f 90       	pop	r0
     39e:	0b be       	out	0x3b, r0	; 59
     3a0:	0f 90       	pop	r0
     3a2:	0f be       	out	0x3f, r0	; 63
     3a4:	0f 90       	pop	r0
     3a6:	1f 90       	pop	r1
     3a8:	18 95       	reti

000003aa <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     3aa:	1f 92       	push	r1
     3ac:	0f 92       	push	r0
     3ae:	0f b6       	in	r0, 0x3f	; 63
     3b0:	0f 92       	push	r0
     3b2:	11 24       	eor	r1, r1
     3b4:	0b b6       	in	r0, 0x3b	; 59
     3b6:	0f 92       	push	r0
     3b8:	2f 93       	push	r18
     3ba:	3f 93       	push	r19
     3bc:	4f 93       	push	r20
     3be:	5f 93       	push	r21
     3c0:	6f 93       	push	r22
     3c2:	7f 93       	push	r23
     3c4:	8f 93       	push	r24
     3c6:	9f 93       	push	r25
     3c8:	af 93       	push	r26
     3ca:	bf 93       	push	r27
     3cc:	ef 93       	push	r30
     3ce:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     3d0:	e0 91 4c 20 	lds	r30, 0x204C
     3d4:	f0 91 4d 20 	lds	r31, 0x204D
     3d8:	30 97       	sbiw	r30, 0x00	; 0
     3da:	09 f0       	breq	.+2      	; 0x3de <__vector_15+0x34>
		tc_tcc0_err_callback();
     3dc:	19 95       	eicall
	}
}
     3de:	ff 91       	pop	r31
     3e0:	ef 91       	pop	r30
     3e2:	bf 91       	pop	r27
     3e4:	af 91       	pop	r26
     3e6:	9f 91       	pop	r25
     3e8:	8f 91       	pop	r24
     3ea:	7f 91       	pop	r23
     3ec:	6f 91       	pop	r22
     3ee:	5f 91       	pop	r21
     3f0:	4f 91       	pop	r20
     3f2:	3f 91       	pop	r19
     3f4:	2f 91       	pop	r18
     3f6:	0f 90       	pop	r0
     3f8:	0b be       	out	0x3b, r0	; 59
     3fa:	0f 90       	pop	r0
     3fc:	0f be       	out	0x3f, r0	; 63
     3fe:	0f 90       	pop	r0
     400:	1f 90       	pop	r1
     402:	18 95       	reti

00000404 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     404:	1f 92       	push	r1
     406:	0f 92       	push	r0
     408:	0f b6       	in	r0, 0x3f	; 63
     40a:	0f 92       	push	r0
     40c:	11 24       	eor	r1, r1
     40e:	0b b6       	in	r0, 0x3b	; 59
     410:	0f 92       	push	r0
     412:	2f 93       	push	r18
     414:	3f 93       	push	r19
     416:	4f 93       	push	r20
     418:	5f 93       	push	r21
     41a:	6f 93       	push	r22
     41c:	7f 93       	push	r23
     41e:	8f 93       	push	r24
     420:	9f 93       	push	r25
     422:	af 93       	push	r26
     424:	bf 93       	push	r27
     426:	ef 93       	push	r30
     428:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     42a:	e0 91 4a 20 	lds	r30, 0x204A
     42e:	f0 91 4b 20 	lds	r31, 0x204B
     432:	30 97       	sbiw	r30, 0x00	; 0
     434:	09 f0       	breq	.+2      	; 0x438 <__vector_16+0x34>
		tc_tcc0_cca_callback();
     436:	19 95       	eicall
	}
}
     438:	ff 91       	pop	r31
     43a:	ef 91       	pop	r30
     43c:	bf 91       	pop	r27
     43e:	af 91       	pop	r26
     440:	9f 91       	pop	r25
     442:	8f 91       	pop	r24
     444:	7f 91       	pop	r23
     446:	6f 91       	pop	r22
     448:	5f 91       	pop	r21
     44a:	4f 91       	pop	r20
     44c:	3f 91       	pop	r19
     44e:	2f 91       	pop	r18
     450:	0f 90       	pop	r0
     452:	0b be       	out	0x3b, r0	; 59
     454:	0f 90       	pop	r0
     456:	0f be       	out	0x3f, r0	; 63
     458:	0f 90       	pop	r0
     45a:	1f 90       	pop	r1
     45c:	18 95       	reti

0000045e <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     45e:	1f 92       	push	r1
     460:	0f 92       	push	r0
     462:	0f b6       	in	r0, 0x3f	; 63
     464:	0f 92       	push	r0
     466:	11 24       	eor	r1, r1
     468:	0b b6       	in	r0, 0x3b	; 59
     46a:	0f 92       	push	r0
     46c:	2f 93       	push	r18
     46e:	3f 93       	push	r19
     470:	4f 93       	push	r20
     472:	5f 93       	push	r21
     474:	6f 93       	push	r22
     476:	7f 93       	push	r23
     478:	8f 93       	push	r24
     47a:	9f 93       	push	r25
     47c:	af 93       	push	r26
     47e:	bf 93       	push	r27
     480:	ef 93       	push	r30
     482:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     484:	e0 91 48 20 	lds	r30, 0x2048
     488:	f0 91 49 20 	lds	r31, 0x2049
     48c:	30 97       	sbiw	r30, 0x00	; 0
     48e:	09 f0       	breq	.+2      	; 0x492 <__vector_17+0x34>
		tc_tcc0_ccb_callback();
     490:	19 95       	eicall
	}
}
     492:	ff 91       	pop	r31
     494:	ef 91       	pop	r30
     496:	bf 91       	pop	r27
     498:	af 91       	pop	r26
     49a:	9f 91       	pop	r25
     49c:	8f 91       	pop	r24
     49e:	7f 91       	pop	r23
     4a0:	6f 91       	pop	r22
     4a2:	5f 91       	pop	r21
     4a4:	4f 91       	pop	r20
     4a6:	3f 91       	pop	r19
     4a8:	2f 91       	pop	r18
     4aa:	0f 90       	pop	r0
     4ac:	0b be       	out	0x3b, r0	; 59
     4ae:	0f 90       	pop	r0
     4b0:	0f be       	out	0x3f, r0	; 63
     4b2:	0f 90       	pop	r0
     4b4:	1f 90       	pop	r1
     4b6:	18 95       	reti

000004b8 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     4b8:	1f 92       	push	r1
     4ba:	0f 92       	push	r0
     4bc:	0f b6       	in	r0, 0x3f	; 63
     4be:	0f 92       	push	r0
     4c0:	11 24       	eor	r1, r1
     4c2:	0b b6       	in	r0, 0x3b	; 59
     4c4:	0f 92       	push	r0
     4c6:	2f 93       	push	r18
     4c8:	3f 93       	push	r19
     4ca:	4f 93       	push	r20
     4cc:	5f 93       	push	r21
     4ce:	6f 93       	push	r22
     4d0:	7f 93       	push	r23
     4d2:	8f 93       	push	r24
     4d4:	9f 93       	push	r25
     4d6:	af 93       	push	r26
     4d8:	bf 93       	push	r27
     4da:	ef 93       	push	r30
     4dc:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     4de:	e0 91 46 20 	lds	r30, 0x2046
     4e2:	f0 91 47 20 	lds	r31, 0x2047
     4e6:	30 97       	sbiw	r30, 0x00	; 0
     4e8:	09 f0       	breq	.+2      	; 0x4ec <__vector_18+0x34>
		tc_tcc0_ccc_callback();
     4ea:	19 95       	eicall
	}
}
     4ec:	ff 91       	pop	r31
     4ee:	ef 91       	pop	r30
     4f0:	bf 91       	pop	r27
     4f2:	af 91       	pop	r26
     4f4:	9f 91       	pop	r25
     4f6:	8f 91       	pop	r24
     4f8:	7f 91       	pop	r23
     4fa:	6f 91       	pop	r22
     4fc:	5f 91       	pop	r21
     4fe:	4f 91       	pop	r20
     500:	3f 91       	pop	r19
     502:	2f 91       	pop	r18
     504:	0f 90       	pop	r0
     506:	0b be       	out	0x3b, r0	; 59
     508:	0f 90       	pop	r0
     50a:	0f be       	out	0x3f, r0	; 63
     50c:	0f 90       	pop	r0
     50e:	1f 90       	pop	r1
     510:	18 95       	reti

00000512 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     512:	1f 92       	push	r1
     514:	0f 92       	push	r0
     516:	0f b6       	in	r0, 0x3f	; 63
     518:	0f 92       	push	r0
     51a:	11 24       	eor	r1, r1
     51c:	0b b6       	in	r0, 0x3b	; 59
     51e:	0f 92       	push	r0
     520:	2f 93       	push	r18
     522:	3f 93       	push	r19
     524:	4f 93       	push	r20
     526:	5f 93       	push	r21
     528:	6f 93       	push	r22
     52a:	7f 93       	push	r23
     52c:	8f 93       	push	r24
     52e:	9f 93       	push	r25
     530:	af 93       	push	r26
     532:	bf 93       	push	r27
     534:	ef 93       	push	r30
     536:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     538:	e0 91 44 20 	lds	r30, 0x2044
     53c:	f0 91 45 20 	lds	r31, 0x2045
     540:	30 97       	sbiw	r30, 0x00	; 0
     542:	09 f0       	breq	.+2      	; 0x546 <__vector_19+0x34>
		tc_tcc0_ccd_callback();
     544:	19 95       	eicall
	}
}
     546:	ff 91       	pop	r31
     548:	ef 91       	pop	r30
     54a:	bf 91       	pop	r27
     54c:	af 91       	pop	r26
     54e:	9f 91       	pop	r25
     550:	8f 91       	pop	r24
     552:	7f 91       	pop	r23
     554:	6f 91       	pop	r22
     556:	5f 91       	pop	r21
     558:	4f 91       	pop	r20
     55a:	3f 91       	pop	r19
     55c:	2f 91       	pop	r18
     55e:	0f 90       	pop	r0
     560:	0b be       	out	0x3b, r0	; 59
     562:	0f 90       	pop	r0
     564:	0f be       	out	0x3f, r0	; 63
     566:	0f 90       	pop	r0
     568:	1f 90       	pop	r1
     56a:	18 95       	reti

0000056c <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     56c:	1f 92       	push	r1
     56e:	0f 92       	push	r0
     570:	0f b6       	in	r0, 0x3f	; 63
     572:	0f 92       	push	r0
     574:	11 24       	eor	r1, r1
     576:	0b b6       	in	r0, 0x3b	; 59
     578:	0f 92       	push	r0
     57a:	2f 93       	push	r18
     57c:	3f 93       	push	r19
     57e:	4f 93       	push	r20
     580:	5f 93       	push	r21
     582:	6f 93       	push	r22
     584:	7f 93       	push	r23
     586:	8f 93       	push	r24
     588:	9f 93       	push	r25
     58a:	af 93       	push	r26
     58c:	bf 93       	push	r27
     58e:	ef 93       	push	r30
     590:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     592:	e0 91 42 20 	lds	r30, 0x2042
     596:	f0 91 43 20 	lds	r31, 0x2043
     59a:	30 97       	sbiw	r30, 0x00	; 0
     59c:	09 f0       	breq	.+2      	; 0x5a0 <__vector_20+0x34>
		tc_tcc1_ovf_callback();
     59e:	19 95       	eicall
	}
}
     5a0:	ff 91       	pop	r31
     5a2:	ef 91       	pop	r30
     5a4:	bf 91       	pop	r27
     5a6:	af 91       	pop	r26
     5a8:	9f 91       	pop	r25
     5aa:	8f 91       	pop	r24
     5ac:	7f 91       	pop	r23
     5ae:	6f 91       	pop	r22
     5b0:	5f 91       	pop	r21
     5b2:	4f 91       	pop	r20
     5b4:	3f 91       	pop	r19
     5b6:	2f 91       	pop	r18
     5b8:	0f 90       	pop	r0
     5ba:	0b be       	out	0x3b, r0	; 59
     5bc:	0f 90       	pop	r0
     5be:	0f be       	out	0x3f, r0	; 63
     5c0:	0f 90       	pop	r0
     5c2:	1f 90       	pop	r1
     5c4:	18 95       	reti

000005c6 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     5c6:	1f 92       	push	r1
     5c8:	0f 92       	push	r0
     5ca:	0f b6       	in	r0, 0x3f	; 63
     5cc:	0f 92       	push	r0
     5ce:	11 24       	eor	r1, r1
     5d0:	0b b6       	in	r0, 0x3b	; 59
     5d2:	0f 92       	push	r0
     5d4:	2f 93       	push	r18
     5d6:	3f 93       	push	r19
     5d8:	4f 93       	push	r20
     5da:	5f 93       	push	r21
     5dc:	6f 93       	push	r22
     5de:	7f 93       	push	r23
     5e0:	8f 93       	push	r24
     5e2:	9f 93       	push	r25
     5e4:	af 93       	push	r26
     5e6:	bf 93       	push	r27
     5e8:	ef 93       	push	r30
     5ea:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     5ec:	e0 91 40 20 	lds	r30, 0x2040
     5f0:	f0 91 41 20 	lds	r31, 0x2041
     5f4:	30 97       	sbiw	r30, 0x00	; 0
     5f6:	09 f0       	breq	.+2      	; 0x5fa <__vector_21+0x34>
		tc_tcc1_err_callback();
     5f8:	19 95       	eicall
	}
}
     5fa:	ff 91       	pop	r31
     5fc:	ef 91       	pop	r30
     5fe:	bf 91       	pop	r27
     600:	af 91       	pop	r26
     602:	9f 91       	pop	r25
     604:	8f 91       	pop	r24
     606:	7f 91       	pop	r23
     608:	6f 91       	pop	r22
     60a:	5f 91       	pop	r21
     60c:	4f 91       	pop	r20
     60e:	3f 91       	pop	r19
     610:	2f 91       	pop	r18
     612:	0f 90       	pop	r0
     614:	0b be       	out	0x3b, r0	; 59
     616:	0f 90       	pop	r0
     618:	0f be       	out	0x3f, r0	; 63
     61a:	0f 90       	pop	r0
     61c:	1f 90       	pop	r1
     61e:	18 95       	reti

00000620 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     620:	1f 92       	push	r1
     622:	0f 92       	push	r0
     624:	0f b6       	in	r0, 0x3f	; 63
     626:	0f 92       	push	r0
     628:	11 24       	eor	r1, r1
     62a:	0b b6       	in	r0, 0x3b	; 59
     62c:	0f 92       	push	r0
     62e:	2f 93       	push	r18
     630:	3f 93       	push	r19
     632:	4f 93       	push	r20
     634:	5f 93       	push	r21
     636:	6f 93       	push	r22
     638:	7f 93       	push	r23
     63a:	8f 93       	push	r24
     63c:	9f 93       	push	r25
     63e:	af 93       	push	r26
     640:	bf 93       	push	r27
     642:	ef 93       	push	r30
     644:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     646:	e0 91 3e 20 	lds	r30, 0x203E
     64a:	f0 91 3f 20 	lds	r31, 0x203F
     64e:	30 97       	sbiw	r30, 0x00	; 0
     650:	09 f0       	breq	.+2      	; 0x654 <__vector_22+0x34>
		tc_tcc1_cca_callback();
     652:	19 95       	eicall
	}
}
     654:	ff 91       	pop	r31
     656:	ef 91       	pop	r30
     658:	bf 91       	pop	r27
     65a:	af 91       	pop	r26
     65c:	9f 91       	pop	r25
     65e:	8f 91       	pop	r24
     660:	7f 91       	pop	r23
     662:	6f 91       	pop	r22
     664:	5f 91       	pop	r21
     666:	4f 91       	pop	r20
     668:	3f 91       	pop	r19
     66a:	2f 91       	pop	r18
     66c:	0f 90       	pop	r0
     66e:	0b be       	out	0x3b, r0	; 59
     670:	0f 90       	pop	r0
     672:	0f be       	out	0x3f, r0	; 63
     674:	0f 90       	pop	r0
     676:	1f 90       	pop	r1
     678:	18 95       	reti

0000067a <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     67a:	1f 92       	push	r1
     67c:	0f 92       	push	r0
     67e:	0f b6       	in	r0, 0x3f	; 63
     680:	0f 92       	push	r0
     682:	11 24       	eor	r1, r1
     684:	0b b6       	in	r0, 0x3b	; 59
     686:	0f 92       	push	r0
     688:	2f 93       	push	r18
     68a:	3f 93       	push	r19
     68c:	4f 93       	push	r20
     68e:	5f 93       	push	r21
     690:	6f 93       	push	r22
     692:	7f 93       	push	r23
     694:	8f 93       	push	r24
     696:	9f 93       	push	r25
     698:	af 93       	push	r26
     69a:	bf 93       	push	r27
     69c:	ef 93       	push	r30
     69e:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     6a0:	e0 91 3c 20 	lds	r30, 0x203C
     6a4:	f0 91 3d 20 	lds	r31, 0x203D
     6a8:	30 97       	sbiw	r30, 0x00	; 0
     6aa:	09 f0       	breq	.+2      	; 0x6ae <__vector_23+0x34>
		tc_tcc1_ccb_callback();
     6ac:	19 95       	eicall
	}
}
     6ae:	ff 91       	pop	r31
     6b0:	ef 91       	pop	r30
     6b2:	bf 91       	pop	r27
     6b4:	af 91       	pop	r26
     6b6:	9f 91       	pop	r25
     6b8:	8f 91       	pop	r24
     6ba:	7f 91       	pop	r23
     6bc:	6f 91       	pop	r22
     6be:	5f 91       	pop	r21
     6c0:	4f 91       	pop	r20
     6c2:	3f 91       	pop	r19
     6c4:	2f 91       	pop	r18
     6c6:	0f 90       	pop	r0
     6c8:	0b be       	out	0x3b, r0	; 59
     6ca:	0f 90       	pop	r0
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	0f 90       	pop	r0
     6d0:	1f 90       	pop	r1
     6d2:	18 95       	reti

000006d4 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     6d4:	1f 92       	push	r1
     6d6:	0f 92       	push	r0
     6d8:	0f b6       	in	r0, 0x3f	; 63
     6da:	0f 92       	push	r0
     6dc:	11 24       	eor	r1, r1
     6de:	0b b6       	in	r0, 0x3b	; 59
     6e0:	0f 92       	push	r0
     6e2:	2f 93       	push	r18
     6e4:	3f 93       	push	r19
     6e6:	4f 93       	push	r20
     6e8:	5f 93       	push	r21
     6ea:	6f 93       	push	r22
     6ec:	7f 93       	push	r23
     6ee:	8f 93       	push	r24
     6f0:	9f 93       	push	r25
     6f2:	af 93       	push	r26
     6f4:	bf 93       	push	r27
     6f6:	ef 93       	push	r30
     6f8:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     6fa:	e0 91 3a 20 	lds	r30, 0x203A
     6fe:	f0 91 3b 20 	lds	r31, 0x203B
     702:	30 97       	sbiw	r30, 0x00	; 0
     704:	09 f0       	breq	.+2      	; 0x708 <__vector_77+0x34>
		tc_tcd0_ovf_callback();
     706:	19 95       	eicall
	}
}
     708:	ff 91       	pop	r31
     70a:	ef 91       	pop	r30
     70c:	bf 91       	pop	r27
     70e:	af 91       	pop	r26
     710:	9f 91       	pop	r25
     712:	8f 91       	pop	r24
     714:	7f 91       	pop	r23
     716:	6f 91       	pop	r22
     718:	5f 91       	pop	r21
     71a:	4f 91       	pop	r20
     71c:	3f 91       	pop	r19
     71e:	2f 91       	pop	r18
     720:	0f 90       	pop	r0
     722:	0b be       	out	0x3b, r0	; 59
     724:	0f 90       	pop	r0
     726:	0f be       	out	0x3f, r0	; 63
     728:	0f 90       	pop	r0
     72a:	1f 90       	pop	r1
     72c:	18 95       	reti

0000072e <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     72e:	1f 92       	push	r1
     730:	0f 92       	push	r0
     732:	0f b6       	in	r0, 0x3f	; 63
     734:	0f 92       	push	r0
     736:	11 24       	eor	r1, r1
     738:	0b b6       	in	r0, 0x3b	; 59
     73a:	0f 92       	push	r0
     73c:	2f 93       	push	r18
     73e:	3f 93       	push	r19
     740:	4f 93       	push	r20
     742:	5f 93       	push	r21
     744:	6f 93       	push	r22
     746:	7f 93       	push	r23
     748:	8f 93       	push	r24
     74a:	9f 93       	push	r25
     74c:	af 93       	push	r26
     74e:	bf 93       	push	r27
     750:	ef 93       	push	r30
     752:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     754:	e0 91 38 20 	lds	r30, 0x2038
     758:	f0 91 39 20 	lds	r31, 0x2039
     75c:	30 97       	sbiw	r30, 0x00	; 0
     75e:	09 f0       	breq	.+2      	; 0x762 <__vector_78+0x34>
		tc_tcd0_err_callback();
     760:	19 95       	eicall
	}
}
     762:	ff 91       	pop	r31
     764:	ef 91       	pop	r30
     766:	bf 91       	pop	r27
     768:	af 91       	pop	r26
     76a:	9f 91       	pop	r25
     76c:	8f 91       	pop	r24
     76e:	7f 91       	pop	r23
     770:	6f 91       	pop	r22
     772:	5f 91       	pop	r21
     774:	4f 91       	pop	r20
     776:	3f 91       	pop	r19
     778:	2f 91       	pop	r18
     77a:	0f 90       	pop	r0
     77c:	0b be       	out	0x3b, r0	; 59
     77e:	0f 90       	pop	r0
     780:	0f be       	out	0x3f, r0	; 63
     782:	0f 90       	pop	r0
     784:	1f 90       	pop	r1
     786:	18 95       	reti

00000788 <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     788:	1f 92       	push	r1
     78a:	0f 92       	push	r0
     78c:	0f b6       	in	r0, 0x3f	; 63
     78e:	0f 92       	push	r0
     790:	11 24       	eor	r1, r1
     792:	0b b6       	in	r0, 0x3b	; 59
     794:	0f 92       	push	r0
     796:	2f 93       	push	r18
     798:	3f 93       	push	r19
     79a:	4f 93       	push	r20
     79c:	5f 93       	push	r21
     79e:	6f 93       	push	r22
     7a0:	7f 93       	push	r23
     7a2:	8f 93       	push	r24
     7a4:	9f 93       	push	r25
     7a6:	af 93       	push	r26
     7a8:	bf 93       	push	r27
     7aa:	ef 93       	push	r30
     7ac:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
     7ae:	e0 91 36 20 	lds	r30, 0x2036
     7b2:	f0 91 37 20 	lds	r31, 0x2037
     7b6:	30 97       	sbiw	r30, 0x00	; 0
     7b8:	09 f0       	breq	.+2      	; 0x7bc <__vector_79+0x34>
		tc_tcd0_cca_callback();
     7ba:	19 95       	eicall
	}
}
     7bc:	ff 91       	pop	r31
     7be:	ef 91       	pop	r30
     7c0:	bf 91       	pop	r27
     7c2:	af 91       	pop	r26
     7c4:	9f 91       	pop	r25
     7c6:	8f 91       	pop	r24
     7c8:	7f 91       	pop	r23
     7ca:	6f 91       	pop	r22
     7cc:	5f 91       	pop	r21
     7ce:	4f 91       	pop	r20
     7d0:	3f 91       	pop	r19
     7d2:	2f 91       	pop	r18
     7d4:	0f 90       	pop	r0
     7d6:	0b be       	out	0x3b, r0	; 59
     7d8:	0f 90       	pop	r0
     7da:	0f be       	out	0x3f, r0	; 63
     7dc:	0f 90       	pop	r0
     7de:	1f 90       	pop	r1
     7e0:	18 95       	reti

000007e2 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
     7e2:	1f 92       	push	r1
     7e4:	0f 92       	push	r0
     7e6:	0f b6       	in	r0, 0x3f	; 63
     7e8:	0f 92       	push	r0
     7ea:	11 24       	eor	r1, r1
     7ec:	0b b6       	in	r0, 0x3b	; 59
     7ee:	0f 92       	push	r0
     7f0:	2f 93       	push	r18
     7f2:	3f 93       	push	r19
     7f4:	4f 93       	push	r20
     7f6:	5f 93       	push	r21
     7f8:	6f 93       	push	r22
     7fa:	7f 93       	push	r23
     7fc:	8f 93       	push	r24
     7fe:	9f 93       	push	r25
     800:	af 93       	push	r26
     802:	bf 93       	push	r27
     804:	ef 93       	push	r30
     806:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
     808:	e0 91 34 20 	lds	r30, 0x2034
     80c:	f0 91 35 20 	lds	r31, 0x2035
     810:	30 97       	sbiw	r30, 0x00	; 0
     812:	09 f0       	breq	.+2      	; 0x816 <__vector_80+0x34>
		tc_tcd0_ccb_callback();
     814:	19 95       	eicall
	}
}
     816:	ff 91       	pop	r31
     818:	ef 91       	pop	r30
     81a:	bf 91       	pop	r27
     81c:	af 91       	pop	r26
     81e:	9f 91       	pop	r25
     820:	8f 91       	pop	r24
     822:	7f 91       	pop	r23
     824:	6f 91       	pop	r22
     826:	5f 91       	pop	r21
     828:	4f 91       	pop	r20
     82a:	3f 91       	pop	r19
     82c:	2f 91       	pop	r18
     82e:	0f 90       	pop	r0
     830:	0b be       	out	0x3b, r0	; 59
     832:	0f 90       	pop	r0
     834:	0f be       	out	0x3f, r0	; 63
     836:	0f 90       	pop	r0
     838:	1f 90       	pop	r1
     83a:	18 95       	reti

0000083c <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
     83c:	1f 92       	push	r1
     83e:	0f 92       	push	r0
     840:	0f b6       	in	r0, 0x3f	; 63
     842:	0f 92       	push	r0
     844:	11 24       	eor	r1, r1
     846:	0b b6       	in	r0, 0x3b	; 59
     848:	0f 92       	push	r0
     84a:	2f 93       	push	r18
     84c:	3f 93       	push	r19
     84e:	4f 93       	push	r20
     850:	5f 93       	push	r21
     852:	6f 93       	push	r22
     854:	7f 93       	push	r23
     856:	8f 93       	push	r24
     858:	9f 93       	push	r25
     85a:	af 93       	push	r26
     85c:	bf 93       	push	r27
     85e:	ef 93       	push	r30
     860:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
     862:	e0 91 32 20 	lds	r30, 0x2032
     866:	f0 91 33 20 	lds	r31, 0x2033
     86a:	30 97       	sbiw	r30, 0x00	; 0
     86c:	09 f0       	breq	.+2      	; 0x870 <__vector_81+0x34>
		tc_tcd0_ccc_callback();
     86e:	19 95       	eicall
	}
}
     870:	ff 91       	pop	r31
     872:	ef 91       	pop	r30
     874:	bf 91       	pop	r27
     876:	af 91       	pop	r26
     878:	9f 91       	pop	r25
     87a:	8f 91       	pop	r24
     87c:	7f 91       	pop	r23
     87e:	6f 91       	pop	r22
     880:	5f 91       	pop	r21
     882:	4f 91       	pop	r20
     884:	3f 91       	pop	r19
     886:	2f 91       	pop	r18
     888:	0f 90       	pop	r0
     88a:	0b be       	out	0x3b, r0	; 59
     88c:	0f 90       	pop	r0
     88e:	0f be       	out	0x3f, r0	; 63
     890:	0f 90       	pop	r0
     892:	1f 90       	pop	r1
     894:	18 95       	reti

00000896 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
     896:	1f 92       	push	r1
     898:	0f 92       	push	r0
     89a:	0f b6       	in	r0, 0x3f	; 63
     89c:	0f 92       	push	r0
     89e:	11 24       	eor	r1, r1
     8a0:	0b b6       	in	r0, 0x3b	; 59
     8a2:	0f 92       	push	r0
     8a4:	2f 93       	push	r18
     8a6:	3f 93       	push	r19
     8a8:	4f 93       	push	r20
     8aa:	5f 93       	push	r21
     8ac:	6f 93       	push	r22
     8ae:	7f 93       	push	r23
     8b0:	8f 93       	push	r24
     8b2:	9f 93       	push	r25
     8b4:	af 93       	push	r26
     8b6:	bf 93       	push	r27
     8b8:	ef 93       	push	r30
     8ba:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
     8bc:	e0 91 30 20 	lds	r30, 0x2030
     8c0:	f0 91 31 20 	lds	r31, 0x2031
     8c4:	30 97       	sbiw	r30, 0x00	; 0
     8c6:	09 f0       	breq	.+2      	; 0x8ca <__vector_82+0x34>
		tc_tcd0_ccd_callback();
     8c8:	19 95       	eicall
	}
}
     8ca:	ff 91       	pop	r31
     8cc:	ef 91       	pop	r30
     8ce:	bf 91       	pop	r27
     8d0:	af 91       	pop	r26
     8d2:	9f 91       	pop	r25
     8d4:	8f 91       	pop	r24
     8d6:	7f 91       	pop	r23
     8d8:	6f 91       	pop	r22
     8da:	5f 91       	pop	r21
     8dc:	4f 91       	pop	r20
     8de:	3f 91       	pop	r19
     8e0:	2f 91       	pop	r18
     8e2:	0f 90       	pop	r0
     8e4:	0b be       	out	0x3b, r0	; 59
     8e6:	0f 90       	pop	r0
     8e8:	0f be       	out	0x3f, r0	; 63
     8ea:	0f 90       	pop	r0
     8ec:	1f 90       	pop	r1
     8ee:	18 95       	reti

000008f0 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
     8f0:	1f 92       	push	r1
     8f2:	0f 92       	push	r0
     8f4:	0f b6       	in	r0, 0x3f	; 63
     8f6:	0f 92       	push	r0
     8f8:	11 24       	eor	r1, r1
     8fa:	0b b6       	in	r0, 0x3b	; 59
     8fc:	0f 92       	push	r0
     8fe:	2f 93       	push	r18
     900:	3f 93       	push	r19
     902:	4f 93       	push	r20
     904:	5f 93       	push	r21
     906:	6f 93       	push	r22
     908:	7f 93       	push	r23
     90a:	8f 93       	push	r24
     90c:	9f 93       	push	r25
     90e:	af 93       	push	r26
     910:	bf 93       	push	r27
     912:	ef 93       	push	r30
     914:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
     916:	e0 91 2e 20 	lds	r30, 0x202E
     91a:	f0 91 2f 20 	lds	r31, 0x202F
     91e:	30 97       	sbiw	r30, 0x00	; 0
     920:	09 f0       	breq	.+2      	; 0x924 <__vector_83+0x34>
		tc_tcd1_ovf_callback();
     922:	19 95       	eicall
	}
}
     924:	ff 91       	pop	r31
     926:	ef 91       	pop	r30
     928:	bf 91       	pop	r27
     92a:	af 91       	pop	r26
     92c:	9f 91       	pop	r25
     92e:	8f 91       	pop	r24
     930:	7f 91       	pop	r23
     932:	6f 91       	pop	r22
     934:	5f 91       	pop	r21
     936:	4f 91       	pop	r20
     938:	3f 91       	pop	r19
     93a:	2f 91       	pop	r18
     93c:	0f 90       	pop	r0
     93e:	0b be       	out	0x3b, r0	; 59
     940:	0f 90       	pop	r0
     942:	0f be       	out	0x3f, r0	; 63
     944:	0f 90       	pop	r0
     946:	1f 90       	pop	r1
     948:	18 95       	reti

0000094a <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
     94a:	1f 92       	push	r1
     94c:	0f 92       	push	r0
     94e:	0f b6       	in	r0, 0x3f	; 63
     950:	0f 92       	push	r0
     952:	11 24       	eor	r1, r1
     954:	0b b6       	in	r0, 0x3b	; 59
     956:	0f 92       	push	r0
     958:	2f 93       	push	r18
     95a:	3f 93       	push	r19
     95c:	4f 93       	push	r20
     95e:	5f 93       	push	r21
     960:	6f 93       	push	r22
     962:	7f 93       	push	r23
     964:	8f 93       	push	r24
     966:	9f 93       	push	r25
     968:	af 93       	push	r26
     96a:	bf 93       	push	r27
     96c:	ef 93       	push	r30
     96e:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
     970:	e0 91 2c 20 	lds	r30, 0x202C
     974:	f0 91 2d 20 	lds	r31, 0x202D
     978:	30 97       	sbiw	r30, 0x00	; 0
     97a:	09 f0       	breq	.+2      	; 0x97e <__vector_84+0x34>
		tc_tcd1_err_callback();
     97c:	19 95       	eicall
	}
}
     97e:	ff 91       	pop	r31
     980:	ef 91       	pop	r30
     982:	bf 91       	pop	r27
     984:	af 91       	pop	r26
     986:	9f 91       	pop	r25
     988:	8f 91       	pop	r24
     98a:	7f 91       	pop	r23
     98c:	6f 91       	pop	r22
     98e:	5f 91       	pop	r21
     990:	4f 91       	pop	r20
     992:	3f 91       	pop	r19
     994:	2f 91       	pop	r18
     996:	0f 90       	pop	r0
     998:	0b be       	out	0x3b, r0	; 59
     99a:	0f 90       	pop	r0
     99c:	0f be       	out	0x3f, r0	; 63
     99e:	0f 90       	pop	r0
     9a0:	1f 90       	pop	r1
     9a2:	18 95       	reti

000009a4 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
     9a4:	1f 92       	push	r1
     9a6:	0f 92       	push	r0
     9a8:	0f b6       	in	r0, 0x3f	; 63
     9aa:	0f 92       	push	r0
     9ac:	11 24       	eor	r1, r1
     9ae:	0b b6       	in	r0, 0x3b	; 59
     9b0:	0f 92       	push	r0
     9b2:	2f 93       	push	r18
     9b4:	3f 93       	push	r19
     9b6:	4f 93       	push	r20
     9b8:	5f 93       	push	r21
     9ba:	6f 93       	push	r22
     9bc:	7f 93       	push	r23
     9be:	8f 93       	push	r24
     9c0:	9f 93       	push	r25
     9c2:	af 93       	push	r26
     9c4:	bf 93       	push	r27
     9c6:	ef 93       	push	r30
     9c8:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
     9ca:	e0 91 2a 20 	lds	r30, 0x202A
     9ce:	f0 91 2b 20 	lds	r31, 0x202B
     9d2:	30 97       	sbiw	r30, 0x00	; 0
     9d4:	09 f0       	breq	.+2      	; 0x9d8 <__vector_85+0x34>
		tc_tcd1_cca_callback();
     9d6:	19 95       	eicall
	}
}
     9d8:	ff 91       	pop	r31
     9da:	ef 91       	pop	r30
     9dc:	bf 91       	pop	r27
     9de:	af 91       	pop	r26
     9e0:	9f 91       	pop	r25
     9e2:	8f 91       	pop	r24
     9e4:	7f 91       	pop	r23
     9e6:	6f 91       	pop	r22
     9e8:	5f 91       	pop	r21
     9ea:	4f 91       	pop	r20
     9ec:	3f 91       	pop	r19
     9ee:	2f 91       	pop	r18
     9f0:	0f 90       	pop	r0
     9f2:	0b be       	out	0x3b, r0	; 59
     9f4:	0f 90       	pop	r0
     9f6:	0f be       	out	0x3f, r0	; 63
     9f8:	0f 90       	pop	r0
     9fa:	1f 90       	pop	r1
     9fc:	18 95       	reti

000009fe <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
     9fe:	1f 92       	push	r1
     a00:	0f 92       	push	r0
     a02:	0f b6       	in	r0, 0x3f	; 63
     a04:	0f 92       	push	r0
     a06:	11 24       	eor	r1, r1
     a08:	0b b6       	in	r0, 0x3b	; 59
     a0a:	0f 92       	push	r0
     a0c:	2f 93       	push	r18
     a0e:	3f 93       	push	r19
     a10:	4f 93       	push	r20
     a12:	5f 93       	push	r21
     a14:	6f 93       	push	r22
     a16:	7f 93       	push	r23
     a18:	8f 93       	push	r24
     a1a:	9f 93       	push	r25
     a1c:	af 93       	push	r26
     a1e:	bf 93       	push	r27
     a20:	ef 93       	push	r30
     a22:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
     a24:	e0 91 28 20 	lds	r30, 0x2028
     a28:	f0 91 29 20 	lds	r31, 0x2029
     a2c:	30 97       	sbiw	r30, 0x00	; 0
     a2e:	09 f0       	breq	.+2      	; 0xa32 <__vector_86+0x34>
		tc_tcd1_ccb_callback();
     a30:	19 95       	eicall
	}
}
     a32:	ff 91       	pop	r31
     a34:	ef 91       	pop	r30
     a36:	bf 91       	pop	r27
     a38:	af 91       	pop	r26
     a3a:	9f 91       	pop	r25
     a3c:	8f 91       	pop	r24
     a3e:	7f 91       	pop	r23
     a40:	6f 91       	pop	r22
     a42:	5f 91       	pop	r21
     a44:	4f 91       	pop	r20
     a46:	3f 91       	pop	r19
     a48:	2f 91       	pop	r18
     a4a:	0f 90       	pop	r0
     a4c:	0b be       	out	0x3b, r0	; 59
     a4e:	0f 90       	pop	r0
     a50:	0f be       	out	0x3f, r0	; 63
     a52:	0f 90       	pop	r0
     a54:	1f 90       	pop	r1
     a56:	18 95       	reti

00000a58 <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
     a58:	1f 92       	push	r1
     a5a:	0f 92       	push	r0
     a5c:	0f b6       	in	r0, 0x3f	; 63
     a5e:	0f 92       	push	r0
     a60:	11 24       	eor	r1, r1
     a62:	0b b6       	in	r0, 0x3b	; 59
     a64:	0f 92       	push	r0
     a66:	2f 93       	push	r18
     a68:	3f 93       	push	r19
     a6a:	4f 93       	push	r20
     a6c:	5f 93       	push	r21
     a6e:	6f 93       	push	r22
     a70:	7f 93       	push	r23
     a72:	8f 93       	push	r24
     a74:	9f 93       	push	r25
     a76:	af 93       	push	r26
     a78:	bf 93       	push	r27
     a7a:	ef 93       	push	r30
     a7c:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
     a7e:	e0 91 26 20 	lds	r30, 0x2026
     a82:	f0 91 27 20 	lds	r31, 0x2027
     a86:	30 97       	sbiw	r30, 0x00	; 0
     a88:	09 f0       	breq	.+2      	; 0xa8c <__vector_47+0x34>
		tc_tce0_ovf_callback();
     a8a:	19 95       	eicall
	}
}
     a8c:	ff 91       	pop	r31
     a8e:	ef 91       	pop	r30
     a90:	bf 91       	pop	r27
     a92:	af 91       	pop	r26
     a94:	9f 91       	pop	r25
     a96:	8f 91       	pop	r24
     a98:	7f 91       	pop	r23
     a9a:	6f 91       	pop	r22
     a9c:	5f 91       	pop	r21
     a9e:	4f 91       	pop	r20
     aa0:	3f 91       	pop	r19
     aa2:	2f 91       	pop	r18
     aa4:	0f 90       	pop	r0
     aa6:	0b be       	out	0x3b, r0	; 59
     aa8:	0f 90       	pop	r0
     aaa:	0f be       	out	0x3f, r0	; 63
     aac:	0f 90       	pop	r0
     aae:	1f 90       	pop	r1
     ab0:	18 95       	reti

00000ab2 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
     ab2:	1f 92       	push	r1
     ab4:	0f 92       	push	r0
     ab6:	0f b6       	in	r0, 0x3f	; 63
     ab8:	0f 92       	push	r0
     aba:	11 24       	eor	r1, r1
     abc:	0b b6       	in	r0, 0x3b	; 59
     abe:	0f 92       	push	r0
     ac0:	2f 93       	push	r18
     ac2:	3f 93       	push	r19
     ac4:	4f 93       	push	r20
     ac6:	5f 93       	push	r21
     ac8:	6f 93       	push	r22
     aca:	7f 93       	push	r23
     acc:	8f 93       	push	r24
     ace:	9f 93       	push	r25
     ad0:	af 93       	push	r26
     ad2:	bf 93       	push	r27
     ad4:	ef 93       	push	r30
     ad6:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
     ad8:	e0 91 24 20 	lds	r30, 0x2024
     adc:	f0 91 25 20 	lds	r31, 0x2025
     ae0:	30 97       	sbiw	r30, 0x00	; 0
     ae2:	09 f0       	breq	.+2      	; 0xae6 <__vector_48+0x34>
		tc_tce0_err_callback();
     ae4:	19 95       	eicall
	}
}
     ae6:	ff 91       	pop	r31
     ae8:	ef 91       	pop	r30
     aea:	bf 91       	pop	r27
     aec:	af 91       	pop	r26
     aee:	9f 91       	pop	r25
     af0:	8f 91       	pop	r24
     af2:	7f 91       	pop	r23
     af4:	6f 91       	pop	r22
     af6:	5f 91       	pop	r21
     af8:	4f 91       	pop	r20
     afa:	3f 91       	pop	r19
     afc:	2f 91       	pop	r18
     afe:	0f 90       	pop	r0
     b00:	0b be       	out	0x3b, r0	; 59
     b02:	0f 90       	pop	r0
     b04:	0f be       	out	0x3f, r0	; 63
     b06:	0f 90       	pop	r0
     b08:	1f 90       	pop	r1
     b0a:	18 95       	reti

00000b0c <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
     b0c:	1f 92       	push	r1
     b0e:	0f 92       	push	r0
     b10:	0f b6       	in	r0, 0x3f	; 63
     b12:	0f 92       	push	r0
     b14:	11 24       	eor	r1, r1
     b16:	0b b6       	in	r0, 0x3b	; 59
     b18:	0f 92       	push	r0
     b1a:	2f 93       	push	r18
     b1c:	3f 93       	push	r19
     b1e:	4f 93       	push	r20
     b20:	5f 93       	push	r21
     b22:	6f 93       	push	r22
     b24:	7f 93       	push	r23
     b26:	8f 93       	push	r24
     b28:	9f 93       	push	r25
     b2a:	af 93       	push	r26
     b2c:	bf 93       	push	r27
     b2e:	ef 93       	push	r30
     b30:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
     b32:	e0 91 22 20 	lds	r30, 0x2022
     b36:	f0 91 23 20 	lds	r31, 0x2023
     b3a:	30 97       	sbiw	r30, 0x00	; 0
     b3c:	09 f0       	breq	.+2      	; 0xb40 <__vector_49+0x34>
		tc_tce0_cca_callback();
     b3e:	19 95       	eicall
	}
}
     b40:	ff 91       	pop	r31
     b42:	ef 91       	pop	r30
     b44:	bf 91       	pop	r27
     b46:	af 91       	pop	r26
     b48:	9f 91       	pop	r25
     b4a:	8f 91       	pop	r24
     b4c:	7f 91       	pop	r23
     b4e:	6f 91       	pop	r22
     b50:	5f 91       	pop	r21
     b52:	4f 91       	pop	r20
     b54:	3f 91       	pop	r19
     b56:	2f 91       	pop	r18
     b58:	0f 90       	pop	r0
     b5a:	0b be       	out	0x3b, r0	; 59
     b5c:	0f 90       	pop	r0
     b5e:	0f be       	out	0x3f, r0	; 63
     b60:	0f 90       	pop	r0
     b62:	1f 90       	pop	r1
     b64:	18 95       	reti

00000b66 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
     b66:	1f 92       	push	r1
     b68:	0f 92       	push	r0
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	0f 92       	push	r0
     b6e:	11 24       	eor	r1, r1
     b70:	0b b6       	in	r0, 0x3b	; 59
     b72:	0f 92       	push	r0
     b74:	2f 93       	push	r18
     b76:	3f 93       	push	r19
     b78:	4f 93       	push	r20
     b7a:	5f 93       	push	r21
     b7c:	6f 93       	push	r22
     b7e:	7f 93       	push	r23
     b80:	8f 93       	push	r24
     b82:	9f 93       	push	r25
     b84:	af 93       	push	r26
     b86:	bf 93       	push	r27
     b88:	ef 93       	push	r30
     b8a:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
     b8c:	e0 91 20 20 	lds	r30, 0x2020
     b90:	f0 91 21 20 	lds	r31, 0x2021
     b94:	30 97       	sbiw	r30, 0x00	; 0
     b96:	09 f0       	breq	.+2      	; 0xb9a <__vector_50+0x34>
		tc_tce0_ccb_callback();
     b98:	19 95       	eicall
	}
}
     b9a:	ff 91       	pop	r31
     b9c:	ef 91       	pop	r30
     b9e:	bf 91       	pop	r27
     ba0:	af 91       	pop	r26
     ba2:	9f 91       	pop	r25
     ba4:	8f 91       	pop	r24
     ba6:	7f 91       	pop	r23
     ba8:	6f 91       	pop	r22
     baa:	5f 91       	pop	r21
     bac:	4f 91       	pop	r20
     bae:	3f 91       	pop	r19
     bb0:	2f 91       	pop	r18
     bb2:	0f 90       	pop	r0
     bb4:	0b be       	out	0x3b, r0	; 59
     bb6:	0f 90       	pop	r0
     bb8:	0f be       	out	0x3f, r0	; 63
     bba:	0f 90       	pop	r0
     bbc:	1f 90       	pop	r1
     bbe:	18 95       	reti

00000bc0 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
     bc0:	1f 92       	push	r1
     bc2:	0f 92       	push	r0
     bc4:	0f b6       	in	r0, 0x3f	; 63
     bc6:	0f 92       	push	r0
     bc8:	11 24       	eor	r1, r1
     bca:	0b b6       	in	r0, 0x3b	; 59
     bcc:	0f 92       	push	r0
     bce:	2f 93       	push	r18
     bd0:	3f 93       	push	r19
     bd2:	4f 93       	push	r20
     bd4:	5f 93       	push	r21
     bd6:	6f 93       	push	r22
     bd8:	7f 93       	push	r23
     bda:	8f 93       	push	r24
     bdc:	9f 93       	push	r25
     bde:	af 93       	push	r26
     be0:	bf 93       	push	r27
     be2:	ef 93       	push	r30
     be4:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
     be6:	e0 91 1e 20 	lds	r30, 0x201E
     bea:	f0 91 1f 20 	lds	r31, 0x201F
     bee:	30 97       	sbiw	r30, 0x00	; 0
     bf0:	09 f0       	breq	.+2      	; 0xbf4 <__vector_51+0x34>
		tc_tce0_ccc_callback();
     bf2:	19 95       	eicall
	}
}
     bf4:	ff 91       	pop	r31
     bf6:	ef 91       	pop	r30
     bf8:	bf 91       	pop	r27
     bfa:	af 91       	pop	r26
     bfc:	9f 91       	pop	r25
     bfe:	8f 91       	pop	r24
     c00:	7f 91       	pop	r23
     c02:	6f 91       	pop	r22
     c04:	5f 91       	pop	r21
     c06:	4f 91       	pop	r20
     c08:	3f 91       	pop	r19
     c0a:	2f 91       	pop	r18
     c0c:	0f 90       	pop	r0
     c0e:	0b be       	out	0x3b, r0	; 59
     c10:	0f 90       	pop	r0
     c12:	0f be       	out	0x3f, r0	; 63
     c14:	0f 90       	pop	r0
     c16:	1f 90       	pop	r1
     c18:	18 95       	reti

00000c1a <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
     c1a:	1f 92       	push	r1
     c1c:	0f 92       	push	r0
     c1e:	0f b6       	in	r0, 0x3f	; 63
     c20:	0f 92       	push	r0
     c22:	11 24       	eor	r1, r1
     c24:	0b b6       	in	r0, 0x3b	; 59
     c26:	0f 92       	push	r0
     c28:	2f 93       	push	r18
     c2a:	3f 93       	push	r19
     c2c:	4f 93       	push	r20
     c2e:	5f 93       	push	r21
     c30:	6f 93       	push	r22
     c32:	7f 93       	push	r23
     c34:	8f 93       	push	r24
     c36:	9f 93       	push	r25
     c38:	af 93       	push	r26
     c3a:	bf 93       	push	r27
     c3c:	ef 93       	push	r30
     c3e:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
     c40:	e0 91 1c 20 	lds	r30, 0x201C
     c44:	f0 91 1d 20 	lds	r31, 0x201D
     c48:	30 97       	sbiw	r30, 0x00	; 0
     c4a:	09 f0       	breq	.+2      	; 0xc4e <__vector_52+0x34>
		tc_tce0_ccd_callback();
     c4c:	19 95       	eicall
	}
}
     c4e:	ff 91       	pop	r31
     c50:	ef 91       	pop	r30
     c52:	bf 91       	pop	r27
     c54:	af 91       	pop	r26
     c56:	9f 91       	pop	r25
     c58:	8f 91       	pop	r24
     c5a:	7f 91       	pop	r23
     c5c:	6f 91       	pop	r22
     c5e:	5f 91       	pop	r21
     c60:	4f 91       	pop	r20
     c62:	3f 91       	pop	r19
     c64:	2f 91       	pop	r18
     c66:	0f 90       	pop	r0
     c68:	0b be       	out	0x3b, r0	; 59
     c6a:	0f 90       	pop	r0
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	0f 90       	pop	r0
     c70:	1f 90       	pop	r1
     c72:	18 95       	reti

00000c74 <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
     c74:	1f 92       	push	r1
     c76:	0f 92       	push	r0
     c78:	0f b6       	in	r0, 0x3f	; 63
     c7a:	0f 92       	push	r0
     c7c:	11 24       	eor	r1, r1
     c7e:	0b b6       	in	r0, 0x3b	; 59
     c80:	0f 92       	push	r0
     c82:	2f 93       	push	r18
     c84:	3f 93       	push	r19
     c86:	4f 93       	push	r20
     c88:	5f 93       	push	r21
     c8a:	6f 93       	push	r22
     c8c:	7f 93       	push	r23
     c8e:	8f 93       	push	r24
     c90:	9f 93       	push	r25
     c92:	af 93       	push	r26
     c94:	bf 93       	push	r27
     c96:	ef 93       	push	r30
     c98:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
     c9a:	e0 91 1a 20 	lds	r30, 0x201A
     c9e:	f0 91 1b 20 	lds	r31, 0x201B
     ca2:	30 97       	sbiw	r30, 0x00	; 0
     ca4:	09 f0       	breq	.+2      	; 0xca8 <__vector_53+0x34>
		tc_tce1_ovf_callback();
     ca6:	19 95       	eicall
	}
}
     ca8:	ff 91       	pop	r31
     caa:	ef 91       	pop	r30
     cac:	bf 91       	pop	r27
     cae:	af 91       	pop	r26
     cb0:	9f 91       	pop	r25
     cb2:	8f 91       	pop	r24
     cb4:	7f 91       	pop	r23
     cb6:	6f 91       	pop	r22
     cb8:	5f 91       	pop	r21
     cba:	4f 91       	pop	r20
     cbc:	3f 91       	pop	r19
     cbe:	2f 91       	pop	r18
     cc0:	0f 90       	pop	r0
     cc2:	0b be       	out	0x3b, r0	; 59
     cc4:	0f 90       	pop	r0
     cc6:	0f be       	out	0x3f, r0	; 63
     cc8:	0f 90       	pop	r0
     cca:	1f 90       	pop	r1
     ccc:	18 95       	reti

00000cce <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
     cce:	1f 92       	push	r1
     cd0:	0f 92       	push	r0
     cd2:	0f b6       	in	r0, 0x3f	; 63
     cd4:	0f 92       	push	r0
     cd6:	11 24       	eor	r1, r1
     cd8:	0b b6       	in	r0, 0x3b	; 59
     cda:	0f 92       	push	r0
     cdc:	2f 93       	push	r18
     cde:	3f 93       	push	r19
     ce0:	4f 93       	push	r20
     ce2:	5f 93       	push	r21
     ce4:	6f 93       	push	r22
     ce6:	7f 93       	push	r23
     ce8:	8f 93       	push	r24
     cea:	9f 93       	push	r25
     cec:	af 93       	push	r26
     cee:	bf 93       	push	r27
     cf0:	ef 93       	push	r30
     cf2:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
     cf4:	e0 91 18 20 	lds	r30, 0x2018
     cf8:	f0 91 19 20 	lds	r31, 0x2019
     cfc:	30 97       	sbiw	r30, 0x00	; 0
     cfe:	09 f0       	breq	.+2      	; 0xd02 <__vector_54+0x34>
		tc_tce1_err_callback();
     d00:	19 95       	eicall
	}
}
     d02:	ff 91       	pop	r31
     d04:	ef 91       	pop	r30
     d06:	bf 91       	pop	r27
     d08:	af 91       	pop	r26
     d0a:	9f 91       	pop	r25
     d0c:	8f 91       	pop	r24
     d0e:	7f 91       	pop	r23
     d10:	6f 91       	pop	r22
     d12:	5f 91       	pop	r21
     d14:	4f 91       	pop	r20
     d16:	3f 91       	pop	r19
     d18:	2f 91       	pop	r18
     d1a:	0f 90       	pop	r0
     d1c:	0b be       	out	0x3b, r0	; 59
     d1e:	0f 90       	pop	r0
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	0f 90       	pop	r0
     d24:	1f 90       	pop	r1
     d26:	18 95       	reti

00000d28 <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
     d28:	1f 92       	push	r1
     d2a:	0f 92       	push	r0
     d2c:	0f b6       	in	r0, 0x3f	; 63
     d2e:	0f 92       	push	r0
     d30:	11 24       	eor	r1, r1
     d32:	0b b6       	in	r0, 0x3b	; 59
     d34:	0f 92       	push	r0
     d36:	2f 93       	push	r18
     d38:	3f 93       	push	r19
     d3a:	4f 93       	push	r20
     d3c:	5f 93       	push	r21
     d3e:	6f 93       	push	r22
     d40:	7f 93       	push	r23
     d42:	8f 93       	push	r24
     d44:	9f 93       	push	r25
     d46:	af 93       	push	r26
     d48:	bf 93       	push	r27
     d4a:	ef 93       	push	r30
     d4c:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
     d4e:	e0 91 16 20 	lds	r30, 0x2016
     d52:	f0 91 17 20 	lds	r31, 0x2017
     d56:	30 97       	sbiw	r30, 0x00	; 0
     d58:	09 f0       	breq	.+2      	; 0xd5c <__vector_55+0x34>
		tc_tce1_cca_callback();
     d5a:	19 95       	eicall
	}
}
     d5c:	ff 91       	pop	r31
     d5e:	ef 91       	pop	r30
     d60:	bf 91       	pop	r27
     d62:	af 91       	pop	r26
     d64:	9f 91       	pop	r25
     d66:	8f 91       	pop	r24
     d68:	7f 91       	pop	r23
     d6a:	6f 91       	pop	r22
     d6c:	5f 91       	pop	r21
     d6e:	4f 91       	pop	r20
     d70:	3f 91       	pop	r19
     d72:	2f 91       	pop	r18
     d74:	0f 90       	pop	r0
     d76:	0b be       	out	0x3b, r0	; 59
     d78:	0f 90       	pop	r0
     d7a:	0f be       	out	0x3f, r0	; 63
     d7c:	0f 90       	pop	r0
     d7e:	1f 90       	pop	r1
     d80:	18 95       	reti

00000d82 <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
     d82:	1f 92       	push	r1
     d84:	0f 92       	push	r0
     d86:	0f b6       	in	r0, 0x3f	; 63
     d88:	0f 92       	push	r0
     d8a:	11 24       	eor	r1, r1
     d8c:	0b b6       	in	r0, 0x3b	; 59
     d8e:	0f 92       	push	r0
     d90:	2f 93       	push	r18
     d92:	3f 93       	push	r19
     d94:	4f 93       	push	r20
     d96:	5f 93       	push	r21
     d98:	6f 93       	push	r22
     d9a:	7f 93       	push	r23
     d9c:	8f 93       	push	r24
     d9e:	9f 93       	push	r25
     da0:	af 93       	push	r26
     da2:	bf 93       	push	r27
     da4:	ef 93       	push	r30
     da6:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
     da8:	e0 91 14 20 	lds	r30, 0x2014
     dac:	f0 91 15 20 	lds	r31, 0x2015
     db0:	30 97       	sbiw	r30, 0x00	; 0
     db2:	09 f0       	breq	.+2      	; 0xdb6 <__vector_56+0x34>
		tc_tce1_ccb_callback();
     db4:	19 95       	eicall
	}
}
     db6:	ff 91       	pop	r31
     db8:	ef 91       	pop	r30
     dba:	bf 91       	pop	r27
     dbc:	af 91       	pop	r26
     dbe:	9f 91       	pop	r25
     dc0:	8f 91       	pop	r24
     dc2:	7f 91       	pop	r23
     dc4:	6f 91       	pop	r22
     dc6:	5f 91       	pop	r21
     dc8:	4f 91       	pop	r20
     dca:	3f 91       	pop	r19
     dcc:	2f 91       	pop	r18
     dce:	0f 90       	pop	r0
     dd0:	0b be       	out	0x3b, r0	; 59
     dd2:	0f 90       	pop	r0
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	0f 90       	pop	r0
     dd8:	1f 90       	pop	r1
     dda:	18 95       	reti

00000ddc <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
     ddc:	1f 92       	push	r1
     dde:	0f 92       	push	r0
     de0:	0f b6       	in	r0, 0x3f	; 63
     de2:	0f 92       	push	r0
     de4:	11 24       	eor	r1, r1
     de6:	0b b6       	in	r0, 0x3b	; 59
     de8:	0f 92       	push	r0
     dea:	2f 93       	push	r18
     dec:	3f 93       	push	r19
     dee:	4f 93       	push	r20
     df0:	5f 93       	push	r21
     df2:	6f 93       	push	r22
     df4:	7f 93       	push	r23
     df6:	8f 93       	push	r24
     df8:	9f 93       	push	r25
     dfa:	af 93       	push	r26
     dfc:	bf 93       	push	r27
     dfe:	ef 93       	push	r30
     e00:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
     e02:	e0 91 12 20 	lds	r30, 0x2012
     e06:	f0 91 13 20 	lds	r31, 0x2013
     e0a:	30 97       	sbiw	r30, 0x00	; 0
     e0c:	09 f0       	breq	.+2      	; 0xe10 <__vector_108+0x34>
		tc_tcf0_ovf_callback();
     e0e:	19 95       	eicall
	}
}
     e10:	ff 91       	pop	r31
     e12:	ef 91       	pop	r30
     e14:	bf 91       	pop	r27
     e16:	af 91       	pop	r26
     e18:	9f 91       	pop	r25
     e1a:	8f 91       	pop	r24
     e1c:	7f 91       	pop	r23
     e1e:	6f 91       	pop	r22
     e20:	5f 91       	pop	r21
     e22:	4f 91       	pop	r20
     e24:	3f 91       	pop	r19
     e26:	2f 91       	pop	r18
     e28:	0f 90       	pop	r0
     e2a:	0b be       	out	0x3b, r0	; 59
     e2c:	0f 90       	pop	r0
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	0f 90       	pop	r0
     e32:	1f 90       	pop	r1
     e34:	18 95       	reti

00000e36 <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
     e36:	1f 92       	push	r1
     e38:	0f 92       	push	r0
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	0f 92       	push	r0
     e3e:	11 24       	eor	r1, r1
     e40:	0b b6       	in	r0, 0x3b	; 59
     e42:	0f 92       	push	r0
     e44:	2f 93       	push	r18
     e46:	3f 93       	push	r19
     e48:	4f 93       	push	r20
     e4a:	5f 93       	push	r21
     e4c:	6f 93       	push	r22
     e4e:	7f 93       	push	r23
     e50:	8f 93       	push	r24
     e52:	9f 93       	push	r25
     e54:	af 93       	push	r26
     e56:	bf 93       	push	r27
     e58:	ef 93       	push	r30
     e5a:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
     e5c:	e0 91 10 20 	lds	r30, 0x2010
     e60:	f0 91 11 20 	lds	r31, 0x2011
     e64:	30 97       	sbiw	r30, 0x00	; 0
     e66:	09 f0       	breq	.+2      	; 0xe6a <__vector_109+0x34>
		tc_tcf0_err_callback();
     e68:	19 95       	eicall
	}
}
     e6a:	ff 91       	pop	r31
     e6c:	ef 91       	pop	r30
     e6e:	bf 91       	pop	r27
     e70:	af 91       	pop	r26
     e72:	9f 91       	pop	r25
     e74:	8f 91       	pop	r24
     e76:	7f 91       	pop	r23
     e78:	6f 91       	pop	r22
     e7a:	5f 91       	pop	r21
     e7c:	4f 91       	pop	r20
     e7e:	3f 91       	pop	r19
     e80:	2f 91       	pop	r18
     e82:	0f 90       	pop	r0
     e84:	0b be       	out	0x3b, r0	; 59
     e86:	0f 90       	pop	r0
     e88:	0f be       	out	0x3f, r0	; 63
     e8a:	0f 90       	pop	r0
     e8c:	1f 90       	pop	r1
     e8e:	18 95       	reti

00000e90 <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
     e90:	1f 92       	push	r1
     e92:	0f 92       	push	r0
     e94:	0f b6       	in	r0, 0x3f	; 63
     e96:	0f 92       	push	r0
     e98:	11 24       	eor	r1, r1
     e9a:	0b b6       	in	r0, 0x3b	; 59
     e9c:	0f 92       	push	r0
     e9e:	2f 93       	push	r18
     ea0:	3f 93       	push	r19
     ea2:	4f 93       	push	r20
     ea4:	5f 93       	push	r21
     ea6:	6f 93       	push	r22
     ea8:	7f 93       	push	r23
     eaa:	8f 93       	push	r24
     eac:	9f 93       	push	r25
     eae:	af 93       	push	r26
     eb0:	bf 93       	push	r27
     eb2:	ef 93       	push	r30
     eb4:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
     eb6:	e0 91 0e 20 	lds	r30, 0x200E
     eba:	f0 91 0f 20 	lds	r31, 0x200F
     ebe:	30 97       	sbiw	r30, 0x00	; 0
     ec0:	09 f0       	breq	.+2      	; 0xec4 <__vector_110+0x34>
		tc_tcf0_cca_callback();
     ec2:	19 95       	eicall
	}
}
     ec4:	ff 91       	pop	r31
     ec6:	ef 91       	pop	r30
     ec8:	bf 91       	pop	r27
     eca:	af 91       	pop	r26
     ecc:	9f 91       	pop	r25
     ece:	8f 91       	pop	r24
     ed0:	7f 91       	pop	r23
     ed2:	6f 91       	pop	r22
     ed4:	5f 91       	pop	r21
     ed6:	4f 91       	pop	r20
     ed8:	3f 91       	pop	r19
     eda:	2f 91       	pop	r18
     edc:	0f 90       	pop	r0
     ede:	0b be       	out	0x3b, r0	; 59
     ee0:	0f 90       	pop	r0
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	0f 90       	pop	r0
     ee6:	1f 90       	pop	r1
     ee8:	18 95       	reti

00000eea <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
     eea:	1f 92       	push	r1
     eec:	0f 92       	push	r0
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	0f 92       	push	r0
     ef2:	11 24       	eor	r1, r1
     ef4:	0b b6       	in	r0, 0x3b	; 59
     ef6:	0f 92       	push	r0
     ef8:	2f 93       	push	r18
     efa:	3f 93       	push	r19
     efc:	4f 93       	push	r20
     efe:	5f 93       	push	r21
     f00:	6f 93       	push	r22
     f02:	7f 93       	push	r23
     f04:	8f 93       	push	r24
     f06:	9f 93       	push	r25
     f08:	af 93       	push	r26
     f0a:	bf 93       	push	r27
     f0c:	ef 93       	push	r30
     f0e:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
     f10:	e0 91 0c 20 	lds	r30, 0x200C
     f14:	f0 91 0d 20 	lds	r31, 0x200D
     f18:	30 97       	sbiw	r30, 0x00	; 0
     f1a:	09 f0       	breq	.+2      	; 0xf1e <__vector_111+0x34>
		tc_tcf0_ccb_callback();
     f1c:	19 95       	eicall
	}
}
     f1e:	ff 91       	pop	r31
     f20:	ef 91       	pop	r30
     f22:	bf 91       	pop	r27
     f24:	af 91       	pop	r26
     f26:	9f 91       	pop	r25
     f28:	8f 91       	pop	r24
     f2a:	7f 91       	pop	r23
     f2c:	6f 91       	pop	r22
     f2e:	5f 91       	pop	r21
     f30:	4f 91       	pop	r20
     f32:	3f 91       	pop	r19
     f34:	2f 91       	pop	r18
     f36:	0f 90       	pop	r0
     f38:	0b be       	out	0x3b, r0	; 59
     f3a:	0f 90       	pop	r0
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	0f 90       	pop	r0
     f40:	1f 90       	pop	r1
     f42:	18 95       	reti

00000f44 <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
     f44:	1f 92       	push	r1
     f46:	0f 92       	push	r0
     f48:	0f b6       	in	r0, 0x3f	; 63
     f4a:	0f 92       	push	r0
     f4c:	11 24       	eor	r1, r1
     f4e:	0b b6       	in	r0, 0x3b	; 59
     f50:	0f 92       	push	r0
     f52:	2f 93       	push	r18
     f54:	3f 93       	push	r19
     f56:	4f 93       	push	r20
     f58:	5f 93       	push	r21
     f5a:	6f 93       	push	r22
     f5c:	7f 93       	push	r23
     f5e:	8f 93       	push	r24
     f60:	9f 93       	push	r25
     f62:	af 93       	push	r26
     f64:	bf 93       	push	r27
     f66:	ef 93       	push	r30
     f68:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
     f6a:	e0 91 0a 20 	lds	r30, 0x200A
     f6e:	f0 91 0b 20 	lds	r31, 0x200B
     f72:	30 97       	sbiw	r30, 0x00	; 0
     f74:	09 f0       	breq	.+2      	; 0xf78 <__vector_112+0x34>
		tc_tcf0_ccc_callback();
     f76:	19 95       	eicall
	}
}
     f78:	ff 91       	pop	r31
     f7a:	ef 91       	pop	r30
     f7c:	bf 91       	pop	r27
     f7e:	af 91       	pop	r26
     f80:	9f 91       	pop	r25
     f82:	8f 91       	pop	r24
     f84:	7f 91       	pop	r23
     f86:	6f 91       	pop	r22
     f88:	5f 91       	pop	r21
     f8a:	4f 91       	pop	r20
     f8c:	3f 91       	pop	r19
     f8e:	2f 91       	pop	r18
     f90:	0f 90       	pop	r0
     f92:	0b be       	out	0x3b, r0	; 59
     f94:	0f 90       	pop	r0
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	0f 90       	pop	r0
     f9a:	1f 90       	pop	r1
     f9c:	18 95       	reti

00000f9e <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
     f9e:	1f 92       	push	r1
     fa0:	0f 92       	push	r0
     fa2:	0f b6       	in	r0, 0x3f	; 63
     fa4:	0f 92       	push	r0
     fa6:	11 24       	eor	r1, r1
     fa8:	0b b6       	in	r0, 0x3b	; 59
     faa:	0f 92       	push	r0
     fac:	2f 93       	push	r18
     fae:	3f 93       	push	r19
     fb0:	4f 93       	push	r20
     fb2:	5f 93       	push	r21
     fb4:	6f 93       	push	r22
     fb6:	7f 93       	push	r23
     fb8:	8f 93       	push	r24
     fba:	9f 93       	push	r25
     fbc:	af 93       	push	r26
     fbe:	bf 93       	push	r27
     fc0:	ef 93       	push	r30
     fc2:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
     fc4:	e0 91 08 20 	lds	r30, 0x2008
     fc8:	f0 91 09 20 	lds	r31, 0x2009
     fcc:	30 97       	sbiw	r30, 0x00	; 0
     fce:	09 f0       	breq	.+2      	; 0xfd2 <__vector_113+0x34>
		tc_tcf0_ccd_callback();
     fd0:	19 95       	eicall
	}
}
     fd2:	ff 91       	pop	r31
     fd4:	ef 91       	pop	r30
     fd6:	bf 91       	pop	r27
     fd8:	af 91       	pop	r26
     fda:	9f 91       	pop	r25
     fdc:	8f 91       	pop	r24
     fde:	7f 91       	pop	r23
     fe0:	6f 91       	pop	r22
     fe2:	5f 91       	pop	r21
     fe4:	4f 91       	pop	r20
     fe6:	3f 91       	pop	r19
     fe8:	2f 91       	pop	r18
     fea:	0f 90       	pop	r0
     fec:	0b be       	out	0x3b, r0	; 59
     fee:	0f 90       	pop	r0
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	0f 90       	pop	r0
     ff4:	1f 90       	pop	r1
     ff6:	18 95       	reti

00000ff8 <tc_enable>:
 *
 * \note
 * unmask TC clock (sysclk), but does not configure the TC clock source.
 */
void tc_enable(volatile void *tc)
{
     ff8:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     ffa:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
     ffc:	f8 94       	cli
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
     ffe:	28 2f       	mov	r18, r24
    1000:	39 2f       	mov	r19, r25
    1002:	21 15       	cp	r18, r1
    1004:	88 e0       	ldi	r24, 0x08	; 8
    1006:	38 07       	cpc	r19, r24
    1008:	39 f4       	brne	.+14     	; 0x1018 <tc_enable+0x20>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    100a:	61 e0       	ldi	r22, 0x01	; 1
    100c:	83 e0       	ldi	r24, 0x03	; 3
    100e:	7f d5       	rcall	.+2814   	; 0x1b0e <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1010:	64 e0       	ldi	r22, 0x04	; 4
    1012:	83 e0       	ldi	r24, 0x03	; 3
    1014:	7c d5       	rcall	.+2808   	; 0x1b0e <sysclk_enable_module>
    1016:	43 c0       	rjmp	.+134    	; 0x109e <tc_enable+0xa6>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    1018:	20 34       	cpi	r18, 0x40	; 64
    101a:	88 e0       	ldi	r24, 0x08	; 8
    101c:	38 07       	cpc	r19, r24
    101e:	39 f4       	brne	.+14     	; 0x102e <tc_enable+0x36>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1020:	62 e0       	ldi	r22, 0x02	; 2
    1022:	83 e0       	ldi	r24, 0x03	; 3
    1024:	74 d5       	rcall	.+2792   	; 0x1b0e <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1026:	64 e0       	ldi	r22, 0x04	; 4
    1028:	83 e0       	ldi	r24, 0x03	; 3
    102a:	71 d5       	rcall	.+2786   	; 0x1b0e <sysclk_enable_module>
    102c:	38 c0       	rjmp	.+112    	; 0x109e <tc_enable+0xa6>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    102e:	21 15       	cp	r18, r1
    1030:	89 e0       	ldi	r24, 0x09	; 9
    1032:	38 07       	cpc	r19, r24
    1034:	39 f4       	brne	.+14     	; 0x1044 <tc_enable+0x4c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1036:	61 e0       	ldi	r22, 0x01	; 1
    1038:	84 e0       	ldi	r24, 0x04	; 4
    103a:	69 d5       	rcall	.+2770   	; 0x1b0e <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    103c:	64 e0       	ldi	r22, 0x04	; 4
    103e:	84 e0       	ldi	r24, 0x04	; 4
    1040:	66 d5       	rcall	.+2764   	; 0x1b0e <sysclk_enable_module>
    1042:	2d c0       	rjmp	.+90     	; 0x109e <tc_enable+0xa6>
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    1044:	20 34       	cpi	r18, 0x40	; 64
    1046:	89 e0       	ldi	r24, 0x09	; 9
    1048:	38 07       	cpc	r19, r24
    104a:	39 f4       	brne	.+14     	; 0x105a <tc_enable+0x62>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    104c:	62 e0       	ldi	r22, 0x02	; 2
    104e:	84 e0       	ldi	r24, 0x04	; 4
    1050:	5e d5       	rcall	.+2748   	; 0x1b0e <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1052:	64 e0       	ldi	r22, 0x04	; 4
    1054:	84 e0       	ldi	r24, 0x04	; 4
    1056:	5b d5       	rcall	.+2742   	; 0x1b0e <sysclk_enable_module>
    1058:	22 c0       	rjmp	.+68     	; 0x109e <tc_enable+0xa6>
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    105a:	21 15       	cp	r18, r1
    105c:	8a e0       	ldi	r24, 0x0A	; 10
    105e:	38 07       	cpc	r19, r24
    1060:	39 f4       	brne	.+14     	; 0x1070 <tc_enable+0x78>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1062:	61 e0       	ldi	r22, 0x01	; 1
    1064:	85 e0       	ldi	r24, 0x05	; 5
    1066:	53 d5       	rcall	.+2726   	; 0x1b0e <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1068:	64 e0       	ldi	r22, 0x04	; 4
    106a:	85 e0       	ldi	r24, 0x05	; 5
    106c:	50 d5       	rcall	.+2720   	; 0x1b0e <sysclk_enable_module>
    106e:	17 c0       	rjmp	.+46     	; 0x109e <tc_enable+0xa6>
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    1070:	20 34       	cpi	r18, 0x40	; 64
    1072:	8a e0       	ldi	r24, 0x0A	; 10
    1074:	38 07       	cpc	r19, r24
    1076:	39 f4       	brne	.+14     	; 0x1086 <tc_enable+0x8e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1078:	62 e0       	ldi	r22, 0x02	; 2
    107a:	85 e0       	ldi	r24, 0x05	; 5
    107c:	48 d5       	rcall	.+2704   	; 0x1b0e <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    107e:	64 e0       	ldi	r22, 0x04	; 4
    1080:	85 e0       	ldi	r24, 0x05	; 5
    1082:	45 d5       	rcall	.+2698   	; 0x1b0e <sysclk_enable_module>
    1084:	0c c0       	rjmp	.+24     	; 0x109e <tc_enable+0xa6>
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    1086:	21 15       	cp	r18, r1
    1088:	3b 40       	sbci	r19, 0x0B	; 11
    108a:	39 f4       	brne	.+14     	; 0x109a <tc_enable+0xa2>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    108c:	61 e0       	ldi	r22, 0x01	; 1
    108e:	86 e0       	ldi	r24, 0x06	; 6
    1090:	3e d5       	rcall	.+2684   	; 0x1b0e <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1092:	64 e0       	ldi	r22, 0x04	; 4
    1094:	86 e0       	ldi	r24, 0x06	; 6
    1096:	3b d5       	rcall	.+2678   	; 0x1b0e <sysclk_enable_module>
    1098:	02 c0       	rjmp	.+4      	; 0x109e <tc_enable+0xa6>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    109a:	cf bf       	out	0x3f, r28	; 63
    109c:	09 c0       	rjmp	.+18     	; 0x10b0 <tc_enable+0xb8>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    109e:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    10a0:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    10a2:	e7 e5       	ldi	r30, 0x57	; 87
    10a4:	f0 e2       	ldi	r31, 0x20	; 32
    10a6:	90 81       	ld	r25, Z
    10a8:	9f 5f       	subi	r25, 0xFF	; 255
    10aa:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    10ac:	8f bf       	out	0x3f, r24	; 63
    10ae:	cf bf       	out	0x3f, r28	; 63
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    10b0:	cf 91       	pop	r28
    10b2:	08 95       	ret

000010b4 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    10b4:	fc 01       	movw	r30, r24
    10b6:	81 81       	ldd	r24, Z+1	; 0x01
    10b8:	85 ff       	sbrs	r24, 5
    10ba:	fd cf       	rjmp	.-6      	; 0x10b6 <usart_putchar+0x2>
    10bc:	60 83       	st	Z, r22
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	08 95       	ret

000010c4 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    10c4:	4f 92       	push	r4
    10c6:	5f 92       	push	r5
    10c8:	6f 92       	push	r6
    10ca:	7f 92       	push	r7
    10cc:	8f 92       	push	r8
    10ce:	9f 92       	push	r9
    10d0:	af 92       	push	r10
    10d2:	bf 92       	push	r11
    10d4:	cf 92       	push	r12
    10d6:	df 92       	push	r13
    10d8:	ef 92       	push	r14
    10da:	ff 92       	push	r15
    10dc:	0f 93       	push	r16
    10de:	1f 93       	push	r17
    10e0:	cf 93       	push	r28
    10e2:	df 93       	push	r29
    10e4:	ec 01       	movw	r28, r24
    10e6:	4a 01       	movw	r8, r20
    10e8:	5b 01       	movw	r10, r22
    10ea:	28 01       	movw	r4, r16
    10ec:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    10ee:	d9 01       	movw	r26, r18
    10f0:	c8 01       	movw	r24, r16
    10f2:	68 94       	set
    10f4:	12 f8       	bld	r1, 2
    10f6:	b6 95       	lsr	r27
    10f8:	a7 95       	ror	r26
    10fa:	97 95       	ror	r25
    10fc:	87 95       	ror	r24
    10fe:	16 94       	lsr	r1
    1100:	d1 f7       	brne	.-12     	; 0x10f6 <usart_set_baudrate+0x32>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    1102:	b9 01       	movw	r22, r18
    1104:	a8 01       	movw	r20, r16
    1106:	03 2e       	mov	r0, r19
    1108:	36 e1       	ldi	r19, 0x16	; 22
    110a:	76 95       	lsr	r23
    110c:	67 95       	ror	r22
    110e:	57 95       	ror	r21
    1110:	47 95       	ror	r20
    1112:	3a 95       	dec	r19
    1114:	d1 f7       	brne	.-12     	; 0x110a <usart_set_baudrate+0x46>
    1116:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1118:	2c 81       	ldd	r18, Y+4	; 0x04
    111a:	22 fd       	sbrc	r18, 2
    111c:	08 c0       	rjmp	.+16     	; 0x112e <usart_set_baudrate+0x6a>
		max_rate /= 2;
    111e:	b6 95       	lsr	r27
    1120:	a7 95       	ror	r26
    1122:	97 95       	ror	r25
    1124:	87 95       	ror	r24
		min_rate /= 2;
    1126:	76 95       	lsr	r23
    1128:	67 95       	ror	r22
    112a:	57 95       	ror	r21
    112c:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    112e:	88 15       	cp	r24, r8
    1130:	99 05       	cpc	r25, r9
    1132:	aa 05       	cpc	r26, r10
    1134:	bb 05       	cpc	r27, r11
    1136:	08 f4       	brcc	.+2      	; 0x113a <usart_set_baudrate+0x76>
    1138:	a6 c0       	rjmp	.+332    	; 0x1286 <usart_set_baudrate+0x1c2>
    113a:	84 16       	cp	r8, r20
    113c:	95 06       	cpc	r9, r21
    113e:	a6 06       	cpc	r10, r22
    1140:	b7 06       	cpc	r11, r23
    1142:	08 f4       	brcc	.+2      	; 0x1146 <usart_set_baudrate+0x82>
    1144:	a2 c0       	rjmp	.+324    	; 0x128a <usart_set_baudrate+0x1c6>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1146:	8c 81       	ldd	r24, Y+4	; 0x04
    1148:	82 fd       	sbrc	r24, 2
    114a:	04 c0       	rjmp	.+8      	; 0x1154 <usart_set_baudrate+0x90>
		baud *= 2;
    114c:	88 0c       	add	r8, r8
    114e:	99 1c       	adc	r9, r9
    1150:	aa 1c       	adc	r10, r10
    1152:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    1154:	c3 01       	movw	r24, r6
    1156:	b2 01       	movw	r22, r4
    1158:	a5 01       	movw	r20, r10
    115a:	94 01       	movw	r18, r8
    115c:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    1160:	2f 3f       	cpi	r18, 0xFF	; 255
    1162:	31 05       	cpc	r19, r1
    1164:	41 05       	cpc	r20, r1
    1166:	51 05       	cpc	r21, r1
    1168:	08 f4       	brcc	.+2      	; 0x116c <usart_set_baudrate+0xa8>
    116a:	91 c0       	rjmp	.+290    	; 0x128e <usart_set_baudrate+0x1ca>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
    116c:	c1 2c       	mov	r12, r1
    116e:	d1 2c       	mov	r13, r1
    1170:	76 01       	movw	r14, r12
    1172:	ca 94       	dec	r12
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1174:	19 ef       	ldi	r17, 0xF9	; 249
    1176:	05 c0       	rjmp	.+10     	; 0x1182 <usart_set_baudrate+0xbe>
		if (ratio < limit) {
    1178:	2c 15       	cp	r18, r12
    117a:	3d 05       	cpc	r19, r13
    117c:	4e 05       	cpc	r20, r14
    117e:	5f 05       	cpc	r21, r15
    1180:	68 f0       	brcs	.+26     	; 0x119c <usart_set_baudrate+0xd8>
			break;
		}

		limit <<= 1;
    1182:	cc 0c       	add	r12, r12
    1184:	dd 1c       	adc	r13, r13
    1186:	ee 1c       	adc	r14, r14
    1188:	ff 1c       	adc	r15, r15

		if (exp < -3) {
    118a:	1d 3f       	cpi	r17, 0xFD	; 253
    118c:	14 f4       	brge	.+4      	; 0x1192 <usart_set_baudrate+0xce>
			limit |= 1;
    118e:	68 94       	set
    1190:	c0 f8       	bld	r12, 0

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1192:	1f 5f       	subi	r17, 0xFF	; 255
    1194:	17 30       	cpi	r17, 0x07	; 7
    1196:	81 f7       	brne	.-32     	; 0x1178 <usart_set_baudrate+0xb4>
    1198:	21 2f       	mov	r18, r17
    119a:	50 c0       	rjmp	.+160    	; 0x123c <usart_set_baudrate+0x178>
    119c:	21 2f       	mov	r18, r17
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    119e:	11 23       	and	r17, r17
    11a0:	0c f0       	brlt	.+2      	; 0x11a4 <usart_set_baudrate+0xe0>
    11a2:	4c c0       	rjmp	.+152    	; 0x123c <usart_set_baudrate+0x178>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    11a4:	d5 01       	movw	r26, r10
    11a6:	c4 01       	movw	r24, r8
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	aa 1f       	adc	r26, r26
    11ae:	bb 1f       	adc	r27, r27
    11b0:	88 0f       	add	r24, r24
    11b2:	99 1f       	adc	r25, r25
    11b4:	aa 1f       	adc	r26, r26
    11b6:	bb 1f       	adc	r27, r27
    11b8:	88 0f       	add	r24, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	aa 1f       	adc	r26, r26
    11be:	bb 1f       	adc	r27, r27
    11c0:	48 1a       	sub	r4, r24
    11c2:	59 0a       	sbc	r5, r25
    11c4:	6a 0a       	sbc	r6, r26
    11c6:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    11c8:	1e 3f       	cpi	r17, 0xFE	; 254
    11ca:	f4 f4       	brge	.+60     	; 0x1208 <usart_set_baudrate+0x144>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    11cc:	6d ef       	ldi	r22, 0xFD	; 253
    11ce:	7f ef       	ldi	r23, 0xFF	; 255
    11d0:	61 1b       	sub	r22, r17
    11d2:	71 09       	sbc	r23, r1
    11d4:	17 fd       	sbrc	r17, 7
    11d6:	73 95       	inc	r23
    11d8:	04 c0       	rjmp	.+8      	; 0x11e2 <usart_set_baudrate+0x11e>
    11da:	44 0c       	add	r4, r4
    11dc:	55 1c       	adc	r5, r5
    11de:	66 1c       	adc	r6, r6
    11e0:	77 1c       	adc	r7, r7
    11e2:	6a 95       	dec	r22
    11e4:	d2 f7       	brpl	.-12     	; 0x11da <usart_set_baudrate+0x116>
    11e6:	d5 01       	movw	r26, r10
    11e8:	c4 01       	movw	r24, r8
    11ea:	b6 95       	lsr	r27
    11ec:	a7 95       	ror	r26
    11ee:	97 95       	ror	r25
    11f0:	87 95       	ror	r24
    11f2:	bc 01       	movw	r22, r24
    11f4:	cd 01       	movw	r24, r26
    11f6:	64 0d       	add	r22, r4
    11f8:	75 1d       	adc	r23, r5
    11fa:	86 1d       	adc	r24, r6
    11fc:	97 1d       	adc	r25, r7
    11fe:	a5 01       	movw	r20, r10
    1200:	94 01       	movw	r18, r8
    1202:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__udivmodsi4>
    1206:	36 c0       	rjmp	.+108    	; 0x1274 <usart_set_baudrate+0x1b0>
		} else {
			baud <<= exp + 3;
    1208:	23 e0       	ldi	r18, 0x03	; 3
    120a:	21 0f       	add	r18, r17
    120c:	d5 01       	movw	r26, r10
    120e:	c4 01       	movw	r24, r8
    1210:	04 c0       	rjmp	.+8      	; 0x121a <usart_set_baudrate+0x156>
    1212:	88 0f       	add	r24, r24
    1214:	99 1f       	adc	r25, r25
    1216:	aa 1f       	adc	r26, r26
    1218:	bb 1f       	adc	r27, r27
    121a:	2a 95       	dec	r18
    121c:	d2 f7       	brpl	.-12     	; 0x1212 <usart_set_baudrate+0x14e>
    121e:	9c 01       	movw	r18, r24
    1220:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
    1222:	b6 95       	lsr	r27
    1224:	a7 95       	ror	r26
    1226:	97 95       	ror	r25
    1228:	87 95       	ror	r24
    122a:	bc 01       	movw	r22, r24
    122c:	cd 01       	movw	r24, r26
    122e:	64 0d       	add	r22, r4
    1230:	75 1d       	adc	r23, r5
    1232:	86 1d       	adc	r24, r6
    1234:	97 1d       	adc	r25, r7
    1236:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__udivmodsi4>
    123a:	1c c0       	rjmp	.+56     	; 0x1274 <usart_set_baudrate+0x1b0>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    123c:	2d 5f       	subi	r18, 0xFD	; 253
    123e:	d5 01       	movw	r26, r10
    1240:	c4 01       	movw	r24, r8
    1242:	04 c0       	rjmp	.+8      	; 0x124c <usart_set_baudrate+0x188>
    1244:	88 0f       	add	r24, r24
    1246:	99 1f       	adc	r25, r25
    1248:	aa 1f       	adc	r26, r26
    124a:	bb 1f       	adc	r27, r27
    124c:	2a 95       	dec	r18
    124e:	d2 f7       	brpl	.-12     	; 0x1244 <usart_set_baudrate+0x180>
    1250:	9c 01       	movw	r18, r24
    1252:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
    1254:	b6 95       	lsr	r27
    1256:	a7 95       	ror	r26
    1258:	97 95       	ror	r25
    125a:	87 95       	ror	r24
    125c:	bc 01       	movw	r22, r24
    125e:	cd 01       	movw	r24, r26
    1260:	64 0d       	add	r22, r4
    1262:	75 1d       	adc	r23, r5
    1264:	86 1d       	adc	r24, r6
    1266:	97 1d       	adc	r25, r7
    1268:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__udivmodsi4>
    126c:	21 50       	subi	r18, 0x01	; 1
    126e:	31 09       	sbc	r19, r1
    1270:	41 09       	sbc	r20, r1
    1272:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    1274:	83 2f       	mov	r24, r19
    1276:	8f 70       	andi	r24, 0x0F	; 15
    1278:	12 95       	swap	r17
    127a:	10 7f       	andi	r17, 0xF0	; 240
    127c:	18 2b       	or	r17, r24
    127e:	1f 83       	std	Y+7, r17	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    1280:	2e 83       	std	Y+6, r18	; 0x06

	return true;
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	18 c0       	rjmp	.+48     	; 0x12b6 <usart_set_baudrate+0x1f2>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	16 c0       	rjmp	.+44     	; 0x12b6 <usart_set_baudrate+0x1f2>
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	14 c0       	rjmp	.+40     	; 0x12b6 <usart_set_baudrate+0x1f2>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    128e:	d5 01       	movw	r26, r10
    1290:	c4 01       	movw	r24, r8
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	aa 1f       	adc	r26, r26
    1298:	bb 1f       	adc	r27, r27
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	aa 1f       	adc	r26, r26
    12a0:	bb 1f       	adc	r27, r27
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	aa 1f       	adc	r26, r26
    12a8:	bb 1f       	adc	r27, r27
    12aa:	48 1a       	sub	r4, r24
    12ac:	59 0a       	sbc	r5, r25
    12ae:	6a 0a       	sbc	r6, r26
    12b0:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    12b2:	19 ef       	ldi	r17, 0xF9	; 249
    12b4:	8b cf       	rjmp	.-234    	; 0x11cc <usart_set_baudrate+0x108>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    12b6:	df 91       	pop	r29
    12b8:	cf 91       	pop	r28
    12ba:	1f 91       	pop	r17
    12bc:	0f 91       	pop	r16
    12be:	ff 90       	pop	r15
    12c0:	ef 90       	pop	r14
    12c2:	df 90       	pop	r13
    12c4:	cf 90       	pop	r12
    12c6:	bf 90       	pop	r11
    12c8:	af 90       	pop	r10
    12ca:	9f 90       	pop	r9
    12cc:	8f 90       	pop	r8
    12ce:	7f 90       	pop	r7
    12d0:	6f 90       	pop	r6
    12d2:	5f 90       	pop	r5
    12d4:	4f 90       	pop	r4
    12d6:	08 95       	ret

000012d8 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    12d8:	0f 93       	push	r16
    12da:	1f 93       	push	r17
    12dc:	cf 93       	push	r28
    12de:	df 93       	push	r29
    12e0:	ec 01       	movw	r28, r24
    12e2:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    12e4:	00 97       	sbiw	r24, 0x00	; 0
    12e6:	09 f4       	brne	.+2      	; 0x12ea <usart_init_rs232+0x12>
    12e8:	e6 c0       	rjmp	.+460    	; 0x14b6 <usart_init_rs232+0x1de>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    12ea:	80 3c       	cpi	r24, 0xC0	; 192
    12ec:	91 05       	cpc	r25, r1
    12ee:	21 f4       	brne	.+8      	; 0x12f8 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    12f0:	60 e1       	ldi	r22, 0x10	; 16
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	0c d4       	rcall	.+2072   	; 0x1b0e <sysclk_enable_module>
    12f6:	df c0       	rjmp	.+446    	; 0x14b6 <usart_init_rs232+0x1de>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    12f8:	c0 38       	cpi	r28, 0x80	; 128
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	d8 07       	cpc	r29, r24
    12fe:	21 f4       	brne	.+8      	; 0x1308 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1300:	62 e0       	ldi	r22, 0x02	; 2
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	04 d4       	rcall	.+2056   	; 0x1b0e <sysclk_enable_module>
    1306:	d7 c0       	rjmp	.+430    	; 0x14b6 <usart_init_rs232+0x1de>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1308:	c1 15       	cp	r28, r1
    130a:	e1 e0       	ldi	r30, 0x01	; 1
    130c:	de 07       	cpc	r29, r30
    130e:	21 f4       	brne	.+8      	; 0x1318 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1310:	61 e0       	ldi	r22, 0x01	; 1
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	fc d3       	rcall	.+2040   	; 0x1b0e <sysclk_enable_module>
    1316:	cf c0       	rjmp	.+414    	; 0x14b6 <usart_init_rs232+0x1de>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1318:	c0 38       	cpi	r28, 0x80	; 128
    131a:	f3 e0       	ldi	r31, 0x03	; 3
    131c:	df 07       	cpc	r29, r31
    131e:	21 f4       	brne	.+8      	; 0x1328 <usart_init_rs232+0x50>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1320:	61 e0       	ldi	r22, 0x01	; 1
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	f4 d3       	rcall	.+2024   	; 0x1b0e <sysclk_enable_module>
    1326:	c7 c0       	rjmp	.+398    	; 0x14b6 <usart_init_rs232+0x1de>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    1328:	c0 39       	cpi	r28, 0x90	; 144
    132a:	83 e0       	ldi	r24, 0x03	; 3
    132c:	d8 07       	cpc	r29, r24
    132e:	21 f4       	brne	.+8      	; 0x1338 <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    1330:	61 e0       	ldi	r22, 0x01	; 1
    1332:	82 e0       	ldi	r24, 0x02	; 2
    1334:	ec d3       	rcall	.+2008   	; 0x1b0e <sysclk_enable_module>
    1336:	bf c0       	rjmp	.+382    	; 0x14b6 <usart_init_rs232+0x1de>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1338:	c1 15       	cp	r28, r1
    133a:	e2 e0       	ldi	r30, 0x02	; 2
    133c:	de 07       	cpc	r29, r30
    133e:	21 f4       	brne	.+8      	; 0x1348 <usart_init_rs232+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1340:	62 e0       	ldi	r22, 0x02	; 2
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	e4 d3       	rcall	.+1992   	; 0x1b0e <sysclk_enable_module>
    1346:	b7 c0       	rjmp	.+366    	; 0x14b6 <usart_init_rs232+0x1de>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1348:	c0 34       	cpi	r28, 0x40	; 64
    134a:	f2 e0       	ldi	r31, 0x02	; 2
    134c:	df 07       	cpc	r29, r31
    134e:	21 f4       	brne	.+8      	; 0x1358 <usart_init_rs232+0x80>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1350:	62 e0       	ldi	r22, 0x02	; 2
    1352:	82 e0       	ldi	r24, 0x02	; 2
    1354:	dc d3       	rcall	.+1976   	; 0x1b0e <sysclk_enable_module>
    1356:	af c0       	rjmp	.+350    	; 0x14b6 <usart_init_rs232+0x1de>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1358:	c0 32       	cpi	r28, 0x20	; 32
    135a:	83 e0       	ldi	r24, 0x03	; 3
    135c:	d8 07       	cpc	r29, r24
    135e:	21 f4       	brne	.+8      	; 0x1368 <usart_init_rs232+0x90>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1360:	64 e0       	ldi	r22, 0x04	; 4
    1362:	82 e0       	ldi	r24, 0x02	; 2
    1364:	d4 d3       	rcall	.+1960   	; 0x1b0e <sysclk_enable_module>
    1366:	a7 c0       	rjmp	.+334    	; 0x14b6 <usart_init_rs232+0x1de>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1368:	c1 15       	cp	r28, r1
    136a:	e8 e0       	ldi	r30, 0x08	; 8
    136c:	de 07       	cpc	r29, r30
    136e:	21 f4       	brne	.+8      	; 0x1378 <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1370:	61 e0       	ldi	r22, 0x01	; 1
    1372:	83 e0       	ldi	r24, 0x03	; 3
    1374:	cc d3       	rcall	.+1944   	; 0x1b0e <sysclk_enable_module>
    1376:	9f c0       	rjmp	.+318    	; 0x14b6 <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1378:	c1 15       	cp	r28, r1
    137a:	f9 e0       	ldi	r31, 0x09	; 9
    137c:	df 07       	cpc	r29, r31
    137e:	21 f4       	brne	.+8      	; 0x1388 <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1380:	61 e0       	ldi	r22, 0x01	; 1
    1382:	84 e0       	ldi	r24, 0x04	; 4
    1384:	c4 d3       	rcall	.+1928   	; 0x1b0e <sysclk_enable_module>
    1386:	97 c0       	rjmp	.+302    	; 0x14b6 <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1388:	c1 15       	cp	r28, r1
    138a:	8a e0       	ldi	r24, 0x0A	; 10
    138c:	d8 07       	cpc	r29, r24
    138e:	21 f4       	brne	.+8      	; 0x1398 <usart_init_rs232+0xc0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1390:	61 e0       	ldi	r22, 0x01	; 1
    1392:	85 e0       	ldi	r24, 0x05	; 5
    1394:	bc d3       	rcall	.+1912   	; 0x1b0e <sysclk_enable_module>
    1396:	8f c0       	rjmp	.+286    	; 0x14b6 <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1398:	c1 15       	cp	r28, r1
    139a:	eb e0       	ldi	r30, 0x0B	; 11
    139c:	de 07       	cpc	r29, r30
    139e:	21 f4       	brne	.+8      	; 0x13a8 <usart_init_rs232+0xd0>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    13a0:	61 e0       	ldi	r22, 0x01	; 1
    13a2:	86 e0       	ldi	r24, 0x06	; 6
    13a4:	b4 d3       	rcall	.+1896   	; 0x1b0e <sysclk_enable_module>
    13a6:	87 c0       	rjmp	.+270    	; 0x14b6 <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    13a8:	c0 34       	cpi	r28, 0x40	; 64
    13aa:	f8 e0       	ldi	r31, 0x08	; 8
    13ac:	df 07       	cpc	r29, r31
    13ae:	21 f4       	brne	.+8      	; 0x13b8 <usart_init_rs232+0xe0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    13b0:	62 e0       	ldi	r22, 0x02	; 2
    13b2:	83 e0       	ldi	r24, 0x03	; 3
    13b4:	ac d3       	rcall	.+1880   	; 0x1b0e <sysclk_enable_module>
    13b6:	7f c0       	rjmp	.+254    	; 0x14b6 <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    13b8:	c0 34       	cpi	r28, 0x40	; 64
    13ba:	89 e0       	ldi	r24, 0x09	; 9
    13bc:	d8 07       	cpc	r29, r24
    13be:	21 f4       	brne	.+8      	; 0x13c8 <usart_init_rs232+0xf0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    13c0:	62 e0       	ldi	r22, 0x02	; 2
    13c2:	84 e0       	ldi	r24, 0x04	; 4
    13c4:	a4 d3       	rcall	.+1864   	; 0x1b0e <sysclk_enable_module>
    13c6:	77 c0       	rjmp	.+238    	; 0x14b6 <usart_init_rs232+0x1de>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    13c8:	c0 34       	cpi	r28, 0x40	; 64
    13ca:	ea e0       	ldi	r30, 0x0A	; 10
    13cc:	de 07       	cpc	r29, r30
    13ce:	21 f4       	brne	.+8      	; 0x13d8 <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    13d0:	62 e0       	ldi	r22, 0x02	; 2
    13d2:	85 e0       	ldi	r24, 0x05	; 5
    13d4:	9c d3       	rcall	.+1848   	; 0x1b0e <sysclk_enable_module>
    13d6:	6f c0       	rjmp	.+222    	; 0x14b6 <usart_init_rs232+0x1de>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    13d8:	c0 39       	cpi	r28, 0x90	; 144
    13da:	f8 e0       	ldi	r31, 0x08	; 8
    13dc:	df 07       	cpc	r29, r31
    13de:	21 f4       	brne	.+8      	; 0x13e8 <usart_init_rs232+0x110>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    13e0:	64 e0       	ldi	r22, 0x04	; 4
    13e2:	83 e0       	ldi	r24, 0x03	; 3
    13e4:	94 d3       	rcall	.+1832   	; 0x1b0e <sysclk_enable_module>
    13e6:	67 c0       	rjmp	.+206    	; 0x14b6 <usart_init_rs232+0x1de>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    13e8:	c0 39       	cpi	r28, 0x90	; 144
    13ea:	89 e0       	ldi	r24, 0x09	; 9
    13ec:	d8 07       	cpc	r29, r24
    13ee:	21 f4       	brne	.+8      	; 0x13f8 <usart_init_rs232+0x120>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    13f0:	64 e0       	ldi	r22, 0x04	; 4
    13f2:	84 e0       	ldi	r24, 0x04	; 4
    13f4:	8c d3       	rcall	.+1816   	; 0x1b0e <sysclk_enable_module>
    13f6:	5f c0       	rjmp	.+190    	; 0x14b6 <usart_init_rs232+0x1de>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    13f8:	c0 39       	cpi	r28, 0x90	; 144
    13fa:	ea e0       	ldi	r30, 0x0A	; 10
    13fc:	de 07       	cpc	r29, r30
    13fe:	21 f4       	brne	.+8      	; 0x1408 <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1400:	64 e0       	ldi	r22, 0x04	; 4
    1402:	85 e0       	ldi	r24, 0x05	; 5
    1404:	84 d3       	rcall	.+1800   	; 0x1b0e <sysclk_enable_module>
    1406:	57 c0       	rjmp	.+174    	; 0x14b6 <usart_init_rs232+0x1de>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1408:	c0 39       	cpi	r28, 0x90	; 144
    140a:	fb e0       	ldi	r31, 0x0B	; 11
    140c:	df 07       	cpc	r29, r31
    140e:	21 f4       	brne	.+8      	; 0x1418 <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1410:	64 e0       	ldi	r22, 0x04	; 4
    1412:	86 e0       	ldi	r24, 0x06	; 6
    1414:	7c d3       	rcall	.+1784   	; 0x1b0e <sysclk_enable_module>
    1416:	4f c0       	rjmp	.+158    	; 0x14b6 <usart_init_rs232+0x1de>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1418:	c0 3c       	cpi	r28, 0xC0	; 192
    141a:	88 e0       	ldi	r24, 0x08	; 8
    141c:	d8 07       	cpc	r29, r24
    141e:	21 f4       	brne	.+8      	; 0x1428 <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1420:	68 e0       	ldi	r22, 0x08	; 8
    1422:	83 e0       	ldi	r24, 0x03	; 3
    1424:	74 d3       	rcall	.+1768   	; 0x1b0e <sysclk_enable_module>
    1426:	47 c0       	rjmp	.+142    	; 0x14b6 <usart_init_rs232+0x1de>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1428:	c0 3c       	cpi	r28, 0xC0	; 192
    142a:	e9 e0       	ldi	r30, 0x09	; 9
    142c:	de 07       	cpc	r29, r30
    142e:	21 f4       	brne	.+8      	; 0x1438 <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1430:	68 e0       	ldi	r22, 0x08	; 8
    1432:	84 e0       	ldi	r24, 0x04	; 4
    1434:	6c d3       	rcall	.+1752   	; 0x1b0e <sysclk_enable_module>
    1436:	3f c0       	rjmp	.+126    	; 0x14b6 <usart_init_rs232+0x1de>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1438:	c0 3a       	cpi	r28, 0xA0	; 160
    143a:	f8 e0       	ldi	r31, 0x08	; 8
    143c:	df 07       	cpc	r29, r31
    143e:	21 f4       	brne	.+8      	; 0x1448 <usart_init_rs232+0x170>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1440:	60 e1       	ldi	r22, 0x10	; 16
    1442:	83 e0       	ldi	r24, 0x03	; 3
    1444:	64 d3       	rcall	.+1736   	; 0x1b0e <sysclk_enable_module>
    1446:	37 c0       	rjmp	.+110    	; 0x14b6 <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1448:	c0 3a       	cpi	r28, 0xA0	; 160
    144a:	89 e0       	ldi	r24, 0x09	; 9
    144c:	d8 07       	cpc	r29, r24
    144e:	21 f4       	brne	.+8      	; 0x1458 <usart_init_rs232+0x180>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1450:	60 e1       	ldi	r22, 0x10	; 16
    1452:	84 e0       	ldi	r24, 0x04	; 4
    1454:	5c d3       	rcall	.+1720   	; 0x1b0e <sysclk_enable_module>
    1456:	2f c0       	rjmp	.+94     	; 0x14b6 <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1458:	c0 3a       	cpi	r28, 0xA0	; 160
    145a:	ea e0       	ldi	r30, 0x0A	; 10
    145c:	de 07       	cpc	r29, r30
    145e:	21 f4       	brne	.+8      	; 0x1468 <usart_init_rs232+0x190>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1460:	60 e1       	ldi	r22, 0x10	; 16
    1462:	85 e0       	ldi	r24, 0x05	; 5
    1464:	54 d3       	rcall	.+1704   	; 0x1b0e <sysclk_enable_module>
    1466:	27 c0       	rjmp	.+78     	; 0x14b6 <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1468:	c0 3a       	cpi	r28, 0xA0	; 160
    146a:	fb e0       	ldi	r31, 0x0B	; 11
    146c:	df 07       	cpc	r29, r31
    146e:	21 f4       	brne	.+8      	; 0x1478 <usart_init_rs232+0x1a0>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1470:	60 e1       	ldi	r22, 0x10	; 16
    1472:	86 e0       	ldi	r24, 0x06	; 6
    1474:	4c d3       	rcall	.+1688   	; 0x1b0e <sysclk_enable_module>
    1476:	1f c0       	rjmp	.+62     	; 0x14b6 <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1478:	c0 3b       	cpi	r28, 0xB0	; 176
    147a:	88 e0       	ldi	r24, 0x08	; 8
    147c:	d8 07       	cpc	r29, r24
    147e:	21 f4       	brne	.+8      	; 0x1488 <usart_init_rs232+0x1b0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1480:	60 e2       	ldi	r22, 0x20	; 32
    1482:	83 e0       	ldi	r24, 0x03	; 3
    1484:	44 d3       	rcall	.+1672   	; 0x1b0e <sysclk_enable_module>
    1486:	17 c0       	rjmp	.+46     	; 0x14b6 <usart_init_rs232+0x1de>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1488:	c0 3b       	cpi	r28, 0xB0	; 176
    148a:	e9 e0       	ldi	r30, 0x09	; 9
    148c:	de 07       	cpc	r29, r30
    148e:	21 f4       	brne	.+8      	; 0x1498 <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1490:	60 e2       	ldi	r22, 0x20	; 32
    1492:	84 e0       	ldi	r24, 0x04	; 4
    1494:	3c d3       	rcall	.+1656   	; 0x1b0e <sysclk_enable_module>
    1496:	0f c0       	rjmp	.+30     	; 0x14b6 <usart_init_rs232+0x1de>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1498:	c0 38       	cpi	r28, 0x80	; 128
    149a:	f4 e0       	ldi	r31, 0x04	; 4
    149c:	df 07       	cpc	r29, r31
    149e:	21 f4       	brne	.+8      	; 0x14a8 <usart_init_rs232+0x1d0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    14a0:	60 e4       	ldi	r22, 0x40	; 64
    14a2:	83 e0       	ldi	r24, 0x03	; 3
    14a4:	34 d3       	rcall	.+1640   	; 0x1b0e <sysclk_enable_module>
    14a6:	07 c0       	rjmp	.+14     	; 0x14b6 <usart_init_rs232+0x1de>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    14a8:	c0 3a       	cpi	r28, 0xA0	; 160
    14aa:	84 e0       	ldi	r24, 0x04	; 4
    14ac:	d8 07       	cpc	r29, r24
    14ae:	19 f4       	brne	.+6      	; 0x14b6 <usart_init_rs232+0x1de>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    14b0:	60 e4       	ldi	r22, 0x40	; 64
    14b2:	85 e0       	ldi	r24, 0x05	; 5
    14b4:	2c d3       	rcall	.+1624   	; 0x1b0e <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    14b6:	8d 81       	ldd	r24, Y+5	; 0x05
    14b8:	8f 73       	andi	r24, 0x3F	; 63
    14ba:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    14bc:	f8 01       	movw	r30, r16
    14be:	94 81       	ldd	r25, Z+4	; 0x04
    14c0:	85 81       	ldd	r24, Z+5	; 0x05
    14c2:	89 2b       	or	r24, r25
    14c4:	96 81       	ldd	r25, Z+6	; 0x06
    14c6:	99 23       	and	r25, r25
    14c8:	11 f0       	breq	.+4      	; 0x14ce <usart_init_rs232+0x1f6>
    14ca:	98 e0       	ldi	r25, 0x08	; 8
    14cc:	01 c0       	rjmp	.+2      	; 0x14d0 <usart_init_rs232+0x1f8>
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	89 2b       	or	r24, r25
    14d2:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    14d4:	f8 01       	movw	r30, r16
    14d6:	40 81       	ld	r20, Z
    14d8:	51 81       	ldd	r21, Z+1	; 0x01
    14da:	62 81       	ldd	r22, Z+2	; 0x02
    14dc:	73 81       	ldd	r23, Z+3	; 0x03
    14de:	00 e0       	ldi	r16, 0x00	; 0
    14e0:	18 e4       	ldi	r17, 0x48	; 72
    14e2:	28 ee       	ldi	r18, 0xE8	; 232
    14e4:	31 e0       	ldi	r19, 0x01	; 1
    14e6:	ce 01       	movw	r24, r28
    14e8:	ed dd       	rcall	.-1062   	; 0x10c4 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    14ea:	9c 81       	ldd	r25, Y+4	; 0x04
    14ec:	98 60       	ori	r25, 0x08	; 8
    14ee:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    14f0:	9c 81       	ldd	r25, Y+4	; 0x04
    14f2:	90 61       	ori	r25, 0x10	; 16
    14f4:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    14f6:	df 91       	pop	r29
    14f8:	cf 91       	pop	r28
    14fa:	1f 91       	pop	r17
    14fc:	0f 91       	pop	r16
    14fe:	08 95       	ret

00001500 <adc_set_callback>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1500:	4f b7       	in	r20, 0x3f	; 63
	cpu_irq_disable();
    1502:	f8 94       	cli
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    1504:	28 2f       	mov	r18, r24
    1506:	39 2f       	mov	r19, r25
    1508:	21 15       	cp	r18, r1
    150a:	82 e0       	ldi	r24, 0x02	; 2
    150c:	38 07       	cpc	r19, r24
    150e:	29 f4       	brne	.+10     	; 0x151a <adc_set_callback+0x1a>
		adca_callback = callback;
    1510:	60 93 54 20 	sts	0x2054, r22
    1514:	70 93 55 20 	sts	0x2055, r23
    1518:	07 c0       	rjmp	.+14     	; 0x1528 <adc_set_callback+0x28>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    151a:	20 34       	cpi	r18, 0x40	; 64
    151c:	32 40       	sbci	r19, 0x02	; 2
    151e:	21 f4       	brne	.+8      	; 0x1528 <adc_set_callback+0x28>
		adcb_callback = callback;
    1520:	60 93 52 20 	sts	0x2052, r22
    1524:	70 93 53 20 	sts	0x2053, r23
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1528:	4f bf       	out	0x3f, r20	; 63
    152a:	08 95       	ret

0000152c <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    152c:	81 15       	cp	r24, r1
    152e:	22 e0       	ldi	r18, 0x02	; 2
    1530:	92 07       	cpc	r25, r18
    1532:	61 f4       	brne	.+24     	; 0x154c <adc_enable_clock+0x20>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    1534:	80 91 51 20 	lds	r24, 0x2051
    1538:	91 e0       	ldi	r25, 0x01	; 1
    153a:	98 0f       	add	r25, r24
    153c:	90 93 51 20 	sts	0x2051, r25
    1540:	81 11       	cpse	r24, r1
    1542:	12 c0       	rjmp	.+36     	; 0x1568 <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1544:	62 e0       	ldi	r22, 0x02	; 2
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	e2 c2       	rjmp	.+1476   	; 0x1b0e <sysclk_enable_module>
    154a:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    154c:	80 34       	cpi	r24, 0x40	; 64
    154e:	92 40       	sbci	r25, 0x02	; 2
    1550:	59 f4       	brne	.+22     	; 0x1568 <adc_enable_clock+0x3c>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
    1552:	80 91 50 20 	lds	r24, 0x2050
    1556:	91 e0       	ldi	r25, 0x01	; 1
    1558:	98 0f       	add	r25, r24
    155a:	90 93 50 20 	sts	0x2050, r25
    155e:	81 11       	cpse	r24, r1
    1560:	03 c0       	rjmp	.+6      	; 0x1568 <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1562:	62 e0       	ldi	r22, 0x02	; 2
    1564:	82 e0       	ldi	r24, 0x02	; 2
    1566:	d3 c2       	rjmp	.+1446   	; 0x1b0e <sysclk_enable_module>
    1568:	08 95       	ret

0000156a <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    156a:	81 15       	cp	r24, r1
    156c:	22 e0       	ldi	r18, 0x02	; 2
    156e:	92 07       	cpc	r25, r18
    1570:	59 f4       	brne	.+22     	; 0x1588 <adc_disable_clock+0x1e>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    1572:	80 91 51 20 	lds	r24, 0x2051
    1576:	81 50       	subi	r24, 0x01	; 1
    1578:	80 93 51 20 	sts	0x2051, r24
    157c:	81 11       	cpse	r24, r1
    157e:	11 c0       	rjmp	.+34     	; 0x15a2 <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1580:	62 e0       	ldi	r22, 0x02	; 2
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	d0 c2       	rjmp	.+1440   	; 0x1b26 <sysclk_disable_module>
    1586:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    1588:	80 34       	cpi	r24, 0x40	; 64
    158a:	92 40       	sbci	r25, 0x02	; 2
    158c:	51 f4       	brne	.+20     	; 0x15a2 <adc_disable_clock+0x38>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
    158e:	80 91 50 20 	lds	r24, 0x2050
    1592:	81 50       	subi	r24, 0x01	; 1
    1594:	80 93 50 20 	sts	0x2050, r24
    1598:	81 11       	cpse	r24, r1
    159a:	03 c0       	rjmp	.+6      	; 0x15a2 <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    159c:	62 e0       	ldi	r22, 0x02	; 2
    159e:	82 e0       	ldi	r24, 0x02	; 2
    15a0:	c2 c2       	rjmp	.+1412   	; 0x1b26 <sysclk_disable_module>
    15a2:	08 95       	ret

000015a4 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    15a4:	1f 93       	push	r17
    15a6:	cf 93       	push	r28
    15a8:	df 93       	push	r29
    15aa:	ec 01       	movw	r28, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    15ac:	1f b7       	in	r17, 0x3f	; 63
	cpu_irq_disable();
    15ae:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
    15b0:	bd df       	rcall	.-134    	; 0x152c <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    15b2:	88 81       	ld	r24, Y
    15b4:	81 60       	ori	r24, 0x01	; 1
    15b6:	88 83       	st	Y, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    15b8:	1f bf       	out	0x3f, r17	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    15ba:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    15bc:	f8 94       	cli
    15be:	e7 e5       	ldi	r30, 0x57	; 87
    15c0:	f0 e2       	ldi	r31, 0x20	; 32
    15c2:	90 81       	ld	r25, Z
    15c4:	9f 5f       	subi	r25, 0xFF	; 255
    15c6:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    15c8:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
    15ca:	df 91       	pop	r29
    15cc:	cf 91       	pop	r28
    15ce:	1f 91       	pop	r17
    15d0:	08 95       	ret

000015d2 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    15d2:	1f 92       	push	r1
    15d4:	0f 92       	push	r0
    15d6:	0f b6       	in	r0, 0x3f	; 63
    15d8:	0f 92       	push	r0
    15da:	11 24       	eor	r1, r1
    15dc:	0b b6       	in	r0, 0x3b	; 59
    15de:	0f 92       	push	r0
    15e0:	2f 93       	push	r18
    15e2:	3f 93       	push	r19
    15e4:	4f 93       	push	r20
    15e6:	5f 93       	push	r21
    15e8:	6f 93       	push	r22
    15ea:	7f 93       	push	r23
    15ec:	8f 93       	push	r24
    15ee:	9f 93       	push	r25
    15f0:	af 93       	push	r26
    15f2:	bf 93       	push	r27
    15f4:	ef 93       	push	r30
    15f6:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    15f8:	e0 e0       	ldi	r30, 0x00	; 0
    15fa:	f2 e0       	ldi	r31, 0x02	; 2
    15fc:	44 a1       	ldd	r20, Z+36	; 0x24
    15fe:	55 a1       	ldd	r21, Z+37	; 0x25
    1600:	e0 91 54 20 	lds	r30, 0x2054
    1604:	f0 91 55 20 	lds	r31, 0x2055
    1608:	61 e0       	ldi	r22, 0x01	; 1
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	92 e0       	ldi	r25, 0x02	; 2
    160e:	19 95       	eicall
}
    1610:	ff 91       	pop	r31
    1612:	ef 91       	pop	r30
    1614:	bf 91       	pop	r27
    1616:	af 91       	pop	r26
    1618:	9f 91       	pop	r25
    161a:	8f 91       	pop	r24
    161c:	7f 91       	pop	r23
    161e:	6f 91       	pop	r22
    1620:	5f 91       	pop	r21
    1622:	4f 91       	pop	r20
    1624:	3f 91       	pop	r19
    1626:	2f 91       	pop	r18
    1628:	0f 90       	pop	r0
    162a:	0b be       	out	0x3b, r0	; 59
    162c:	0f 90       	pop	r0
    162e:	0f be       	out	0x3f, r0	; 63
    1630:	0f 90       	pop	r0
    1632:	1f 90       	pop	r1
    1634:	18 95       	reti

00001636 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    1636:	1f 92       	push	r1
    1638:	0f 92       	push	r0
    163a:	0f b6       	in	r0, 0x3f	; 63
    163c:	0f 92       	push	r0
    163e:	11 24       	eor	r1, r1
    1640:	0b b6       	in	r0, 0x3b	; 59
    1642:	0f 92       	push	r0
    1644:	2f 93       	push	r18
    1646:	3f 93       	push	r19
    1648:	4f 93       	push	r20
    164a:	5f 93       	push	r21
    164c:	6f 93       	push	r22
    164e:	7f 93       	push	r23
    1650:	8f 93       	push	r24
    1652:	9f 93       	push	r25
    1654:	af 93       	push	r26
    1656:	bf 93       	push	r27
    1658:	ef 93       	push	r30
    165a:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    165c:	e8 e2       	ldi	r30, 0x28	; 40
    165e:	f2 e0       	ldi	r31, 0x02	; 2
    1660:	44 81       	ldd	r20, Z+4	; 0x04
    1662:	55 81       	ldd	r21, Z+5	; 0x05
    1664:	e0 91 54 20 	lds	r30, 0x2054
    1668:	f0 91 55 20 	lds	r31, 0x2055
    166c:	62 e0       	ldi	r22, 0x02	; 2
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	92 e0       	ldi	r25, 0x02	; 2
    1672:	19 95       	eicall
}
    1674:	ff 91       	pop	r31
    1676:	ef 91       	pop	r30
    1678:	bf 91       	pop	r27
    167a:	af 91       	pop	r26
    167c:	9f 91       	pop	r25
    167e:	8f 91       	pop	r24
    1680:	7f 91       	pop	r23
    1682:	6f 91       	pop	r22
    1684:	5f 91       	pop	r21
    1686:	4f 91       	pop	r20
    1688:	3f 91       	pop	r19
    168a:	2f 91       	pop	r18
    168c:	0f 90       	pop	r0
    168e:	0b be       	out	0x3b, r0	; 59
    1690:	0f 90       	pop	r0
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	0f 90       	pop	r0
    1696:	1f 90       	pop	r1
    1698:	18 95       	reti

0000169a <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    169a:	1f 92       	push	r1
    169c:	0f 92       	push	r0
    169e:	0f b6       	in	r0, 0x3f	; 63
    16a0:	0f 92       	push	r0
    16a2:	11 24       	eor	r1, r1
    16a4:	0b b6       	in	r0, 0x3b	; 59
    16a6:	0f 92       	push	r0
    16a8:	2f 93       	push	r18
    16aa:	3f 93       	push	r19
    16ac:	4f 93       	push	r20
    16ae:	5f 93       	push	r21
    16b0:	6f 93       	push	r22
    16b2:	7f 93       	push	r23
    16b4:	8f 93       	push	r24
    16b6:	9f 93       	push	r25
    16b8:	af 93       	push	r26
    16ba:	bf 93       	push	r27
    16bc:	ef 93       	push	r30
    16be:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    16c0:	e0 e3       	ldi	r30, 0x30	; 48
    16c2:	f2 e0       	ldi	r31, 0x02	; 2
    16c4:	44 81       	ldd	r20, Z+4	; 0x04
    16c6:	55 81       	ldd	r21, Z+5	; 0x05
    16c8:	e0 91 54 20 	lds	r30, 0x2054
    16cc:	f0 91 55 20 	lds	r31, 0x2055
    16d0:	64 e0       	ldi	r22, 0x04	; 4
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	92 e0       	ldi	r25, 0x02	; 2
    16d6:	19 95       	eicall
}
    16d8:	ff 91       	pop	r31
    16da:	ef 91       	pop	r30
    16dc:	bf 91       	pop	r27
    16de:	af 91       	pop	r26
    16e0:	9f 91       	pop	r25
    16e2:	8f 91       	pop	r24
    16e4:	7f 91       	pop	r23
    16e6:	6f 91       	pop	r22
    16e8:	5f 91       	pop	r21
    16ea:	4f 91       	pop	r20
    16ec:	3f 91       	pop	r19
    16ee:	2f 91       	pop	r18
    16f0:	0f 90       	pop	r0
    16f2:	0b be       	out	0x3b, r0	; 59
    16f4:	0f 90       	pop	r0
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	0f 90       	pop	r0
    16fa:	1f 90       	pop	r1
    16fc:	18 95       	reti

000016fe <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    16fe:	1f 92       	push	r1
    1700:	0f 92       	push	r0
    1702:	0f b6       	in	r0, 0x3f	; 63
    1704:	0f 92       	push	r0
    1706:	11 24       	eor	r1, r1
    1708:	0b b6       	in	r0, 0x3b	; 59
    170a:	0f 92       	push	r0
    170c:	2f 93       	push	r18
    170e:	3f 93       	push	r19
    1710:	4f 93       	push	r20
    1712:	5f 93       	push	r21
    1714:	6f 93       	push	r22
    1716:	7f 93       	push	r23
    1718:	8f 93       	push	r24
    171a:	9f 93       	push	r25
    171c:	af 93       	push	r26
    171e:	bf 93       	push	r27
    1720:	ef 93       	push	r30
    1722:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    1724:	e8 e3       	ldi	r30, 0x38	; 56
    1726:	f2 e0       	ldi	r31, 0x02	; 2
    1728:	44 81       	ldd	r20, Z+4	; 0x04
    172a:	55 81       	ldd	r21, Z+5	; 0x05
    172c:	e0 91 54 20 	lds	r30, 0x2054
    1730:	f0 91 55 20 	lds	r31, 0x2055
    1734:	68 e0       	ldi	r22, 0x08	; 8
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	92 e0       	ldi	r25, 0x02	; 2
    173a:	19 95       	eicall
}
    173c:	ff 91       	pop	r31
    173e:	ef 91       	pop	r30
    1740:	bf 91       	pop	r27
    1742:	af 91       	pop	r26
    1744:	9f 91       	pop	r25
    1746:	8f 91       	pop	r24
    1748:	7f 91       	pop	r23
    174a:	6f 91       	pop	r22
    174c:	5f 91       	pop	r21
    174e:	4f 91       	pop	r20
    1750:	3f 91       	pop	r19
    1752:	2f 91       	pop	r18
    1754:	0f 90       	pop	r0
    1756:	0b be       	out	0x3b, r0	; 59
    1758:	0f 90       	pop	r0
    175a:	0f be       	out	0x3f, r0	; 63
    175c:	0f 90       	pop	r0
    175e:	1f 90       	pop	r1
    1760:	18 95       	reti

00001762 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    1762:	1f 92       	push	r1
    1764:	0f 92       	push	r0
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	0f 92       	push	r0
    176a:	11 24       	eor	r1, r1
    176c:	0b b6       	in	r0, 0x3b	; 59
    176e:	0f 92       	push	r0
    1770:	2f 93       	push	r18
    1772:	3f 93       	push	r19
    1774:	4f 93       	push	r20
    1776:	5f 93       	push	r21
    1778:	6f 93       	push	r22
    177a:	7f 93       	push	r23
    177c:	8f 93       	push	r24
    177e:	9f 93       	push	r25
    1780:	af 93       	push	r26
    1782:	bf 93       	push	r27
    1784:	ef 93       	push	r30
    1786:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    1788:	e0 e4       	ldi	r30, 0x40	; 64
    178a:	f2 e0       	ldi	r31, 0x02	; 2
    178c:	44 a1       	ldd	r20, Z+36	; 0x24
    178e:	55 a1       	ldd	r21, Z+37	; 0x25
    1790:	e0 91 52 20 	lds	r30, 0x2052
    1794:	f0 91 53 20 	lds	r31, 0x2053
    1798:	61 e0       	ldi	r22, 0x01	; 1
    179a:	80 e4       	ldi	r24, 0x40	; 64
    179c:	92 e0       	ldi	r25, 0x02	; 2
    179e:	19 95       	eicall
}
    17a0:	ff 91       	pop	r31
    17a2:	ef 91       	pop	r30
    17a4:	bf 91       	pop	r27
    17a6:	af 91       	pop	r26
    17a8:	9f 91       	pop	r25
    17aa:	8f 91       	pop	r24
    17ac:	7f 91       	pop	r23
    17ae:	6f 91       	pop	r22
    17b0:	5f 91       	pop	r21
    17b2:	4f 91       	pop	r20
    17b4:	3f 91       	pop	r19
    17b6:	2f 91       	pop	r18
    17b8:	0f 90       	pop	r0
    17ba:	0b be       	out	0x3b, r0	; 59
    17bc:	0f 90       	pop	r0
    17be:	0f be       	out	0x3f, r0	; 63
    17c0:	0f 90       	pop	r0
    17c2:	1f 90       	pop	r1
    17c4:	18 95       	reti

000017c6 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    17c6:	1f 92       	push	r1
    17c8:	0f 92       	push	r0
    17ca:	0f b6       	in	r0, 0x3f	; 63
    17cc:	0f 92       	push	r0
    17ce:	11 24       	eor	r1, r1
    17d0:	0b b6       	in	r0, 0x3b	; 59
    17d2:	0f 92       	push	r0
    17d4:	2f 93       	push	r18
    17d6:	3f 93       	push	r19
    17d8:	4f 93       	push	r20
    17da:	5f 93       	push	r21
    17dc:	6f 93       	push	r22
    17de:	7f 93       	push	r23
    17e0:	8f 93       	push	r24
    17e2:	9f 93       	push	r25
    17e4:	af 93       	push	r26
    17e6:	bf 93       	push	r27
    17e8:	ef 93       	push	r30
    17ea:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    17ec:	e8 e6       	ldi	r30, 0x68	; 104
    17ee:	f2 e0       	ldi	r31, 0x02	; 2
    17f0:	44 81       	ldd	r20, Z+4	; 0x04
    17f2:	55 81       	ldd	r21, Z+5	; 0x05
    17f4:	e0 91 52 20 	lds	r30, 0x2052
    17f8:	f0 91 53 20 	lds	r31, 0x2053
    17fc:	62 e0       	ldi	r22, 0x02	; 2
    17fe:	80 e4       	ldi	r24, 0x40	; 64
    1800:	92 e0       	ldi	r25, 0x02	; 2
    1802:	19 95       	eicall
}
    1804:	ff 91       	pop	r31
    1806:	ef 91       	pop	r30
    1808:	bf 91       	pop	r27
    180a:	af 91       	pop	r26
    180c:	9f 91       	pop	r25
    180e:	8f 91       	pop	r24
    1810:	7f 91       	pop	r23
    1812:	6f 91       	pop	r22
    1814:	5f 91       	pop	r21
    1816:	4f 91       	pop	r20
    1818:	3f 91       	pop	r19
    181a:	2f 91       	pop	r18
    181c:	0f 90       	pop	r0
    181e:	0b be       	out	0x3b, r0	; 59
    1820:	0f 90       	pop	r0
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	0f 90       	pop	r0
    1826:	1f 90       	pop	r1
    1828:	18 95       	reti

0000182a <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    182a:	1f 92       	push	r1
    182c:	0f 92       	push	r0
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	0f 92       	push	r0
    1832:	11 24       	eor	r1, r1
    1834:	0b b6       	in	r0, 0x3b	; 59
    1836:	0f 92       	push	r0
    1838:	2f 93       	push	r18
    183a:	3f 93       	push	r19
    183c:	4f 93       	push	r20
    183e:	5f 93       	push	r21
    1840:	6f 93       	push	r22
    1842:	7f 93       	push	r23
    1844:	8f 93       	push	r24
    1846:	9f 93       	push	r25
    1848:	af 93       	push	r26
    184a:	bf 93       	push	r27
    184c:	ef 93       	push	r30
    184e:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    1850:	e0 e7       	ldi	r30, 0x70	; 112
    1852:	f2 e0       	ldi	r31, 0x02	; 2
    1854:	44 81       	ldd	r20, Z+4	; 0x04
    1856:	55 81       	ldd	r21, Z+5	; 0x05
    1858:	e0 91 52 20 	lds	r30, 0x2052
    185c:	f0 91 53 20 	lds	r31, 0x2053
    1860:	64 e0       	ldi	r22, 0x04	; 4
    1862:	80 e4       	ldi	r24, 0x40	; 64
    1864:	92 e0       	ldi	r25, 0x02	; 2
    1866:	19 95       	eicall
}
    1868:	ff 91       	pop	r31
    186a:	ef 91       	pop	r30
    186c:	bf 91       	pop	r27
    186e:	af 91       	pop	r26
    1870:	9f 91       	pop	r25
    1872:	8f 91       	pop	r24
    1874:	7f 91       	pop	r23
    1876:	6f 91       	pop	r22
    1878:	5f 91       	pop	r21
    187a:	4f 91       	pop	r20
    187c:	3f 91       	pop	r19
    187e:	2f 91       	pop	r18
    1880:	0f 90       	pop	r0
    1882:	0b be       	out	0x3b, r0	; 59
    1884:	0f 90       	pop	r0
    1886:	0f be       	out	0x3f, r0	; 63
    1888:	0f 90       	pop	r0
    188a:	1f 90       	pop	r1
    188c:	18 95       	reti

0000188e <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    188e:	1f 92       	push	r1
    1890:	0f 92       	push	r0
    1892:	0f b6       	in	r0, 0x3f	; 63
    1894:	0f 92       	push	r0
    1896:	11 24       	eor	r1, r1
    1898:	0b b6       	in	r0, 0x3b	; 59
    189a:	0f 92       	push	r0
    189c:	2f 93       	push	r18
    189e:	3f 93       	push	r19
    18a0:	4f 93       	push	r20
    18a2:	5f 93       	push	r21
    18a4:	6f 93       	push	r22
    18a6:	7f 93       	push	r23
    18a8:	8f 93       	push	r24
    18aa:	9f 93       	push	r25
    18ac:	af 93       	push	r26
    18ae:	bf 93       	push	r27
    18b0:	ef 93       	push	r30
    18b2:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    18b4:	e8 e7       	ldi	r30, 0x78	; 120
    18b6:	f2 e0       	ldi	r31, 0x02	; 2
    18b8:	44 81       	ldd	r20, Z+4	; 0x04
    18ba:	55 81       	ldd	r21, Z+5	; 0x05
    18bc:	e0 91 52 20 	lds	r30, 0x2052
    18c0:	f0 91 53 20 	lds	r31, 0x2053
    18c4:	68 e0       	ldi	r22, 0x08	; 8
    18c6:	80 e4       	ldi	r24, 0x40	; 64
    18c8:	92 e0       	ldi	r25, 0x02	; 2
    18ca:	19 95       	eicall
}
    18cc:	ff 91       	pop	r31
    18ce:	ef 91       	pop	r30
    18d0:	bf 91       	pop	r27
    18d2:	af 91       	pop	r26
    18d4:	9f 91       	pop	r25
    18d6:	8f 91       	pop	r24
    18d8:	7f 91       	pop	r23
    18da:	6f 91       	pop	r22
    18dc:	5f 91       	pop	r21
    18de:	4f 91       	pop	r20
    18e0:	3f 91       	pop	r19
    18e2:	2f 91       	pop	r18
    18e4:	0f 90       	pop	r0
    18e6:	0b be       	out	0x3b, r0	; 59
    18e8:	0f 90       	pop	r0
    18ea:	0f be       	out	0x3f, r0	; 63
    18ec:	0f 90       	pop	r0
    18ee:	1f 90       	pop	r1
    18f0:	18 95       	reti

000018f2 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    18f2:	df 92       	push	r13
    18f4:	ef 92       	push	r14
    18f6:	ff 92       	push	r15
    18f8:	0f 93       	push	r16
    18fa:	1f 93       	push	r17
    18fc:	cf 93       	push	r28
    18fe:	df 93       	push	r29
    1900:	ec 01       	movw	r28, r24
    1902:	8b 01       	movw	r16, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    1904:	c1 15       	cp	r28, r1
    1906:	22 e0       	ldi	r18, 0x02	; 2
    1908:	d2 07       	cpc	r29, r18
    190a:	71 f4       	brne	.+28     	; 0x1928 <adc_write_configuration+0x36>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    190c:	61 e2       	ldi	r22, 0x21	; 33
    190e:	70 e0       	ldi	r23, 0x00	; 0
    1910:	82 e0       	ldi	r24, 0x02	; 2
    1912:	14 d1       	rcall	.+552    	; 0x1b3c <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    1914:	e8 2e       	mov	r14, r24
    1916:	f1 2c       	mov	r15, r1
    1918:	60 e2       	ldi	r22, 0x20	; 32
    191a:	70 e0       	ldi	r23, 0x00	; 0
    191c:	82 e0       	ldi	r24, 0x02	; 2
    191e:	0e d1       	rcall	.+540    	; 0x1b3c <nvm_read_byte>
		data <<= 8;
    1920:	fe 2c       	mov	r15, r14
    1922:	ee 24       	eor	r14, r14
		data |= nvm_read_production_signature_row(ADCACAL0);
    1924:	e8 2a       	or	r14, r24
    1926:	10 c0       	rjmp	.+32     	; 0x1948 <adc_write_configuration+0x56>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    1928:	80 34       	cpi	r24, 0x40	; 64
    192a:	92 40       	sbci	r25, 0x02	; 2
    192c:	59 f5       	brne	.+86     	; 0x1984 <adc_write_configuration+0x92>
    192e:	65 e2       	ldi	r22, 0x25	; 37
    1930:	70 e0       	ldi	r23, 0x00	; 0
    1932:	82 e0       	ldi	r24, 0x02	; 2
    1934:	03 d1       	rcall	.+518    	; 0x1b3c <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    1936:	e8 2e       	mov	r14, r24
    1938:	f1 2c       	mov	r15, r1
    193a:	64 e2       	ldi	r22, 0x24	; 36
    193c:	70 e0       	ldi	r23, 0x00	; 0
    193e:	82 e0       	ldi	r24, 0x02	; 2
    1940:	fd d0       	rcall	.+506    	; 0x1b3c <nvm_read_byte>
		data <<= 8;
    1942:	fe 2c       	mov	r15, r14
    1944:	ee 24       	eor	r14, r14
		data |= nvm_read_production_signature_row(ADCBCAL0);
    1946:	e8 2a       	or	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1948:	df b6       	in	r13, 0x3f	; 63
	cpu_irq_disable();
    194a:	f8 94       	cli
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    194c:	ce 01       	movw	r24, r28
    194e:	ee dd       	rcall	.-1060   	; 0x152c <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    1950:	28 81       	ld	r18, Y

	adc->CTRLA = ADC_FLUSH_bm;
    1952:	82 e0       	ldi	r24, 0x02	; 2
    1954:	88 83       	st	Y, r24
	adc->CAL = cal;
    1956:	ec 86       	std	Y+12, r14	; 0x0c
    1958:	fd 86       	std	Y+13, r15	; 0x0d
	adc->CMP = conf->cmp;
    195a:	f8 01       	movw	r30, r16
    195c:	85 81       	ldd	r24, Z+5	; 0x05
    195e:	96 81       	ldd	r25, Z+6	; 0x06
    1960:	88 8f       	std	Y+24, r24	; 0x18
    1962:	99 8f       	std	Y+25, r25	; 0x19
	adc->REFCTRL = conf->refctrl;
    1964:	82 81       	ldd	r24, Z+2	; 0x02
    1966:	8a 83       	std	Y+2, r24	; 0x02
	adc->PRESCALER = conf->prescaler;
    1968:	84 81       	ldd	r24, Z+4	; 0x04
    196a:	8c 83       	std	Y+4, r24	; 0x04
	adc->EVCTRL = conf->evctrl;
    196c:	83 81       	ldd	r24, Z+3	; 0x03
    196e:	8b 83       	std	Y+3, r24	; 0x03
	adc->CTRLB = conf->ctrlb;
    1970:	81 81       	ldd	r24, Z+1	; 0x01
    1972:	89 83       	std	Y+1, r24	; 0x01
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
	enable = adc->CTRLA & ADC_ENABLE_bm;
    1974:	82 2f       	mov	r24, r18
    1976:	81 70       	andi	r24, 0x01	; 1
	adc->REFCTRL = conf->refctrl;
	adc->PRESCALER = conf->prescaler;
	adc->EVCTRL = conf->evctrl;
	adc->CTRLB = conf->ctrlb;

	adc->CTRLA = enable | conf->ctrla;
    1978:	90 81       	ld	r25, Z
    197a:	89 2b       	or	r24, r25
    197c:	88 83       	st	Y, r24

	adc_disable_clock(adc);
    197e:	ce 01       	movw	r24, r28
    1980:	f4 dd       	rcall	.-1048   	; 0x156a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1982:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
    1984:	df 91       	pop	r29
    1986:	cf 91       	pop	r28
    1988:	1f 91       	pop	r17
    198a:	0f 91       	pop	r16
    198c:	ff 90       	pop	r15
    198e:	ef 90       	pop	r14
    1990:	df 90       	pop	r13
    1992:	08 95       	ret

00001994 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    1994:	ff 92       	push	r15
    1996:	0f 93       	push	r16
    1998:	1f 93       	push	r17
    199a:	cf 93       	push	r28
    199c:	df 93       	push	r29
    199e:	ec 01       	movw	r28, r24
    19a0:	8b 01       	movw	r16, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    19a2:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
    19a4:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    19a6:	c2 dd       	rcall	.-1148   	; 0x152c <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    19a8:	88 81       	ld	r24, Y
    19aa:	80 7c       	andi	r24, 0xC0	; 192
    19ac:	f8 01       	movw	r30, r16
    19ae:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    19b0:	88 8d       	ldd	r24, Y+24	; 0x18
    19b2:	99 8d       	ldd	r25, Y+25	; 0x19
    19b4:	85 83       	std	Z+5, r24	; 0x05
    19b6:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    19b8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ba:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    19bc:	8c 81       	ldd	r24, Y+4	; 0x04
    19be:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    19c0:	8b 81       	ldd	r24, Y+3	; 0x03
    19c2:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    19c4:	89 81       	ldd	r24, Y+1	; 0x01
    19c6:	81 83       	std	Z+1, r24	; 0x01

	adc_disable_clock(adc);
    19c8:	ce 01       	movw	r24, r28
    19ca:	cf dd       	rcall	.-1122   	; 0x156a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    19cc:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
    19ce:	df 91       	pop	r29
    19d0:	cf 91       	pop	r28
    19d2:	1f 91       	pop	r17
    19d4:	0f 91       	pop	r16
    19d6:	ff 90       	pop	r15
    19d8:	08 95       	ret

000019da <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    19da:	cf 92       	push	r12
    19dc:	df 92       	push	r13
    19de:	ef 92       	push	r14
    19e0:	ff 92       	push	r15
    19e2:	0f 93       	push	r16
    19e4:	1f 93       	push	r17
    19e6:	cf 93       	push	r28
    19e8:	df 93       	push	r29
    19ea:	7c 01       	movw	r14, r24
    19ec:	d6 2e       	mov	r13, r22
    19ee:	8a 01       	movw	r16, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    19f0:	86 2f       	mov	r24, r22
    19f2:	83 70       	andi	r24, 0x03	; 3
    19f4:	29 f4       	brne	.+10     	; 0x1a00 <adcch_write_configuration+0x26>
		index += 2;
		ch_mask >>= 2;
    19f6:	96 2f       	mov	r25, r22
    19f8:	96 95       	lsr	r25
    19fa:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    19fc:	82 e0       	ldi	r24, 0x02	; 2
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <adcch_write_configuration+0x2a>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1a00:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
static __always_inline ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1a02:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1a04:	90 ff       	sbrs	r25, 0
		index++;
    1a06:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    1a08:	e7 01       	movw	r28, r14
    1a0a:	a0 96       	adiw	r28, 0x20	; 32
    1a0c:	98 e0       	ldi	r25, 0x08	; 8
    1a0e:	89 9f       	mul	r24, r25
    1a10:	c0 0d       	add	r28, r0
    1a12:	d1 1d       	adc	r29, r1
    1a14:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1a16:	cf b6       	in	r12, 0x3f	; 63
	cpu_irq_disable();
    1a18:	f8 94       	cli
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    1a1a:	c7 01       	movw	r24, r14
    1a1c:	87 dd       	rcall	.-1266   	; 0x152c <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    1a1e:	f8 01       	movw	r30, r16
    1a20:	80 81       	ld	r24, Z
    1a22:	88 83       	st	Y, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    1a24:	82 81       	ldd	r24, Z+2	; 0x02
    1a26:	8a 83       	std	Y+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    1a28:	81 81       	ldd	r24, Z+1	; 0x01
    1a2a:	89 83       	std	Y+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    1a2c:	d0 fe       	sbrs	r13, 0
    1a2e:	02 c0       	rjmp	.+4      	; 0x1a34 <adcch_write_configuration+0x5a>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    1a30:	83 81       	ldd	r24, Z+3	; 0x03
    1a32:	8e 83       	std	Y+6, r24	; 0x06
	}
	adc_disable_clock(adc);
    1a34:	c7 01       	movw	r24, r14
    1a36:	99 dd       	rcall	.-1230   	; 0x156a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1a38:	cf be       	out	0x3f, r12	; 63

	cpu_irq_restore(flags);
}
    1a3a:	df 91       	pop	r29
    1a3c:	cf 91       	pop	r28
    1a3e:	1f 91       	pop	r17
    1a40:	0f 91       	pop	r16
    1a42:	ff 90       	pop	r15
    1a44:	ef 90       	pop	r14
    1a46:	df 90       	pop	r13
    1a48:	cf 90       	pop	r12
    1a4a:	08 95       	ret

00001a4c <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    1a4c:	cf 92       	push	r12
    1a4e:	df 92       	push	r13
    1a50:	ef 92       	push	r14
    1a52:	ff 92       	push	r15
    1a54:	0f 93       	push	r16
    1a56:	1f 93       	push	r17
    1a58:	cf 93       	push	r28
    1a5a:	df 93       	push	r29
    1a5c:	7c 01       	movw	r14, r24
    1a5e:	d6 2e       	mov	r13, r22
    1a60:	ea 01       	movw	r28, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1a62:	86 2f       	mov	r24, r22
    1a64:	83 70       	andi	r24, 0x03	; 3
    1a66:	29 f4       	brne	.+10     	; 0x1a72 <adcch_read_configuration+0x26>
		index += 2;
		ch_mask >>= 2;
    1a68:	96 2f       	mov	r25, r22
    1a6a:	96 95       	lsr	r25
    1a6c:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    1a6e:	82 e0       	ldi	r24, 0x02	; 2
    1a70:	02 c0       	rjmp	.+4      	; 0x1a76 <adcch_read_configuration+0x2a>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1a72:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
static __always_inline ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1a74:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1a76:	90 ff       	sbrs	r25, 0
		index++;
    1a78:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    1a7a:	87 01       	movw	r16, r14
    1a7c:	00 5e       	subi	r16, 0xE0	; 224
    1a7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a80:	98 e0       	ldi	r25, 0x08	; 8
    1a82:	89 9f       	mul	r24, r25
    1a84:	00 0d       	add	r16, r0
    1a86:	11 1d       	adc	r17, r1
    1a88:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1a8a:	cf b6       	in	r12, 0x3f	; 63
	cpu_irq_disable();
    1a8c:	f8 94       	cli

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    1a8e:	c7 01       	movw	r24, r14
    1a90:	4d dd       	rcall	.-1382   	; 0x152c <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    1a92:	f8 01       	movw	r30, r16
    1a94:	80 81       	ld	r24, Z
    1a96:	88 83       	st	Y, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    1a98:	82 81       	ldd	r24, Z+2	; 0x02
    1a9a:	8a 83       	std	Y+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    1a9c:	81 81       	ldd	r24, Z+1	; 0x01
    1a9e:	89 83       	std	Y+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    1aa0:	d0 fe       	sbrs	r13, 0
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <adcch_read_configuration+0x5c>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    1aa4:	86 81       	ldd	r24, Z+6	; 0x06
    1aa6:	8b 83       	std	Y+3, r24	; 0x03
	}
	adc_disable_clock(adc);
    1aa8:	c7 01       	movw	r24, r14
    1aaa:	5f dd       	rcall	.-1346   	; 0x156a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1aac:	cf be       	out	0x3f, r12	; 63

	cpu_irq_restore(flags);
}
    1aae:	df 91       	pop	r29
    1ab0:	cf 91       	pop	r28
    1ab2:	1f 91       	pop	r17
    1ab4:	0f 91       	pop	r16
    1ab6:	ff 90       	pop	r15
    1ab8:	ef 90       	pop	r14
    1aba:	df 90       	pop	r13
    1abc:	cf 90       	pop	r12
    1abe:	08 95       	ret

00001ac0 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    1ac0:	8f ef       	ldi	r24, 0xFF	; 255
    1ac2:	80 93 70 00 	sts	0x0070, r24
    1ac6:	80 93 71 00 	sts	0x0071, r24
    1aca:	80 93 72 00 	sts	0x0072, r24
    1ace:	80 93 73 00 	sts	0x0073, r24
    1ad2:	80 93 74 00 	sts	0x0074, r24
    1ad6:	80 93 75 00 	sts	0x0075, r24
    1ada:	80 93 76 00 	sts	0x0076, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1ade:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1ae0:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    1ae2:	e0 e5       	ldi	r30, 0x50	; 80
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	90 81       	ld	r25, Z
    1ae8:	92 60       	ori	r25, 0x02	; 2
    1aea:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1aec:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1aee:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1af0:	81 ff       	sbrs	r24, 1
    1af2:	fd cf       	rjmp	.-6      	; 0x1aee <sysclk_init+0x2e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    1af4:	61 e0       	ldi	r22, 0x01	; 1
    1af6:	80 e4       	ldi	r24, 0x40	; 64
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	2a d0       	rcall	.+84     	; 0x1b50 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1afc:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1afe:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    1b00:	e0 e5       	ldi	r30, 0x50	; 80
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	90 81       	ld	r25, Z
    1b06:	9e 7f       	andi	r25, 0xFE	; 254
    1b08:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1b0a:	8f bf       	out	0x3f, r24	; 63
    1b0c:	08 95       	ret

00001b0e <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1b0e:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1b10:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    1b12:	e8 2f       	mov	r30, r24
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	e0 59       	subi	r30, 0x90	; 144
    1b18:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1a:	60 95       	com	r22
    1b1c:	80 81       	ld	r24, Z
    1b1e:	68 23       	and	r22, r24
    1b20:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1b22:	9f bf       	out	0x3f, r25	; 63
    1b24:	08 95       	ret

00001b26 <sysclk_disable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1b26:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1b28:	f8 94       	cli

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    1b2a:	e8 2f       	mov	r30, r24
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	e0 59       	subi	r30, 0x90	; 144
    1b30:	ff 4f       	sbci	r31, 0xFF	; 255
    1b32:	80 81       	ld	r24, Z
    1b34:	68 2b       	or	r22, r24
    1b36:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1b38:	9f bf       	out	0x3f, r25	; 63
    1b3a:	08 95       	ret

00001b3c <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1b3c:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    1b40:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1b42:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1b44:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    1b48:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1b4a:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1b4e:	08 95       	ret

00001b50 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1b50:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1b52:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1b54:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1b56:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1b58:	60 83       	st	Z, r22
	ret                             // Return to caller
    1b5a:	08 95       	ret

00001b5c <adc_handler>:
	tc_write_period(&MY_TIMER, tc_get_resolution(&MY_TIMER) / TIMER_TRIGGER_FREQ);
}

static void adc_handler(ADC_t *adc, uint8_t ch_mask, adc_result_t result)
{
	switch (ch_mask) {
    1b5c:	61 30       	cpi	r22, 0x01	; 1
    1b5e:	21 f4       	brne	.+8      	; 0x1b68 <adc_handler+0xc>
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    1b60:	64 2f       	mov	r22, r20
    1b62:	80 ea       	ldi	r24, 0xA0	; 160
    1b64:	9a e0       	ldi	r25, 0x0A	; 10
    1b66:	a6 ca       	rjmp	.-2740   	; 0x10b4 <usart_putchar>
    1b68:	08 95       	ret

00001b6a <main>:
	
	adc_write_configuration(&MY_ADC, &adc_conf);
	adcch_write_configuration(&MY_ADC, MY_ADC_CH, &adcch_conf);
}

int main (void) {
    1b6a:	cf 93       	push	r28
    1b6c:	df 93       	push	r29
    1b6e:	cd b7       	in	r28, 0x3d	; 61
    1b70:	de b7       	in	r29, 0x3e	; 62
    1b72:	2b 97       	sbiw	r28, 0x0b	; 11
    1b74:	cd bf       	out	0x3d, r28	; 61
    1b76:	de bf       	out	0x3e, r29	; 62
		.charlength = USART_CHSIZE_8BIT_gc,
		.paritytype = USART_PMODE_DISABLED_gc,
		.stopbits = false
	};
	
	cpu_irq_enable();
    1b78:	78 94       	sei
	sysclk_init();
    1b7a:	a2 df       	rcall	.-188    	; 0x1ac0 <sysclk_init>
#define MY_TIMER  TCC0
#define TIMER_TRIGGER_FREQ 50000


static void evsys_init(void) {
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1b7c:	62 e0       	ldi	r22, 0x02	; 2
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	c6 df       	rcall	.-116    	; 0x1b0e <sysclk_enable_module>
	EVSYS.CH0MUX = EVSYS_CHMUX_TCC0_OVF_gc;
    1b82:	80 ec       	ldi	r24, 0xC0	; 192
    1b84:	80 93 80 01 	sts	0x0180, r24
}

static void tc_init(void) {
	tc_enable(&MY_TIMER);
    1b88:	80 e0       	ldi	r24, 0x00	; 0
    1b8a:	98 e0       	ldi	r25, 0x08	; 8
    1b8c:	35 da       	rcall	.-2966   	; 0xff8 <tc_enable>
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    1b8e:	e0 e0       	ldi	r30, 0x00	; 0
    1b90:	f8 e0       	ldi	r31, 0x08	; 8
    1b92:	81 81       	ldd	r24, Z+1	; 0x01
    1b94:	88 7f       	andi	r24, 0xF8	; 248
    1b96:	81 83       	std	Z+1, r24	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    1b98:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    1b9a:	80 7f       	andi	r24, 0xF0	; 240
    1b9c:	85 60       	ori	r24, 0x05	; 5
    1b9e:	80 83       	st	Z, r24
 * \param tc Pointer to TC module.
 * \return TC_CLKSEL_enum Clock source selection
 */
static inline TC_CLKSEL_t tc_read_clock_source(volatile void *tc)
{
	return (TC_CLKSEL_t)(((TC0_t *)tc)->CTRLA & TC0_CLKSEL_gm);
    1ba0:	80 81       	ld	r24, Z
    1ba2:	8f 70       	andi	r24, 0x0F	; 15
 * \return The resolution of \a tc.
 */
static inline uint32_t tc_get_resolution(volatile void *tc)
{
	uint32_t tc_clk_rate = sysclk_get_per_hz();
	switch (tc_read_clock_source(tc)) {
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	fc 01       	movw	r30, r24
    1ba8:	31 97       	sbiw	r30, 0x01	; 1
    1baa:	e7 30       	cpi	r30, 0x07	; 7
    1bac:	f1 05       	cpc	r31, r1
    1bae:	30 f5       	brcc	.+76     	; 0x1bfc <main+0x92>
    1bb0:	e2 50       	subi	r30, 0x02	; 2
    1bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb4:	2d c4       	rjmp	.+2138   	; 0x2410 <__tablejump2__>
 *
 * \return The resolution of \a tc.
 */
static inline uint32_t tc_get_resolution(volatile void *tc)
{
	uint32_t tc_clk_rate = sysclk_get_per_hz();
    1bb6:	60 e0       	ldi	r22, 0x00	; 0
    1bb8:	78 e4       	ldi	r23, 0x48	; 72
    1bba:	88 ee       	ldi	r24, 0xE8	; 232
    1bbc:	91 e0       	ldi	r25, 0x01	; 1
    1bbe:	21 c0       	rjmp	.+66     	; 0x1c02 <main+0x98>
	case TC_CLKSEL_OFF_gc:
		tc_clk_rate = 0;
		break;

	case TC_CLKSEL_DIV1024_gc:
		tc_clk_rate /= 1024;
    1bc0:	62 e1       	ldi	r22, 0x12	; 18
    1bc2:	7a e7       	ldi	r23, 0x7A	; 122
    1bc4:	80 e0       	ldi	r24, 0x00	; 0
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	1c c0       	rjmp	.+56     	; 0x1c02 <main+0x98>
		break;

	case TC_CLKSEL_DIV256_gc:
		tc_clk_rate /= 256;
    1bca:	68 e4       	ldi	r22, 0x48	; 72
    1bcc:	78 ee       	ldi	r23, 0xE8	; 232
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	17 c0       	rjmp	.+46     	; 0x1c02 <main+0x98>
		break;

	case TC_CLKSEL_DIV64_gc:
		tc_clk_rate /= 64;
    1bd4:	60 e2       	ldi	r22, 0x20	; 32
    1bd6:	71 ea       	ldi	r23, 0xA1	; 161
    1bd8:	87 e0       	ldi	r24, 0x07	; 7
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	12 c0       	rjmp	.+36     	; 0x1c02 <main+0x98>
		break;

	case TC_CLKSEL_DIV8_gc:
		tc_clk_rate /= 8;
    1bde:	60 e0       	ldi	r22, 0x00	; 0
    1be0:	79 e0       	ldi	r23, 0x09	; 9
    1be2:	8d e3       	ldi	r24, 0x3D	; 61
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	0d c0       	rjmp	.+26     	; 0x1c02 <main+0x98>
		break;

	case TC_CLKSEL_DIV4_gc:
		tc_clk_rate /= 4;
    1be8:	60 e0       	ldi	r22, 0x00	; 0
    1bea:	72 e1       	ldi	r23, 0x12	; 18
    1bec:	8a e7       	ldi	r24, 0x7A	; 122
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	08 c0       	rjmp	.+16     	; 0x1c02 <main+0x98>
		break;

	case TC_CLKSEL_DIV2_gc:
		tc_clk_rate /= 2;
    1bf2:	60 e0       	ldi	r22, 0x00	; 0
    1bf4:	74 e2       	ldi	r23, 0x24	; 36
    1bf6:	84 ef       	ldi	r24, 0xF4	; 244
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	03 c0       	rjmp	.+6      	; 0x1c02 <main+0x98>
static inline uint32_t tc_get_resolution(volatile void *tc)
{
	uint32_t tc_clk_rate = sysclk_get_per_hz();
	switch (tc_read_clock_source(tc)) {
	case TC_CLKSEL_OFF_gc:
		tc_clk_rate = 0;
    1bfc:	60 e0       	ldi	r22, 0x00	; 0
    1bfe:	70 e0       	ldi	r23, 0x00	; 0
    1c00:	cb 01       	movw	r24, r22
	tc_set_wgm(&MY_TIMER, TC_WG_NORMAL);
	tc_set_resolution(&MY_TIMER, 500000);
	tc_write_period(&MY_TIMER, tc_get_resolution(&MY_TIMER) / TIMER_TRIGGER_FREQ);
    1c02:	20 e5       	ldi	r18, 0x50	; 80
    1c04:	33 ec       	ldi	r19, 0xC3	; 195
    1c06:	40 e0       	ldi	r20, 0x00	; 0
    1c08:	50 e0       	ldi	r21, 0x00	; 0
    1c0a:	e0 d3       	rcall	.+1984   	; 0x23cc <__udivmodsi4>
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    1c0c:	e0 e0       	ldi	r30, 0x00	; 0
    1c0e:	f8 e0       	ldi	r31, 0x08	; 8
    1c10:	26 a3       	std	Z+38, r18	; 0x26
    1c12:	37 a3       	std	Z+39, r19	; 0x27
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    1c14:	87 e0       	ldi	r24, 0x07	; 7
    1c16:	e0 ea       	ldi	r30, 0xA0	; 160
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	82 83       	std	Z+2, r24	; 0x02
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    1c1c:	80 91 04 20 	lds	r24, 0x2004
    1c20:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    1c22:	80 91 05 20 	lds	r24, 0x2005
    1c26:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    1c28:	80 91 06 20 	lds	r24, 0x2006
    1c2c:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    1c2e:	80 91 00 20 	lds	r24, 0x2000
    1c32:	90 91 01 20 	lds	r25, 0x2001
    1c36:	a0 91 02 20 	lds	r26, 0x2002
    1c3a:	b0 91 03 20 	lds	r27, 0x2003
    1c3e:	89 83       	std	Y+1, r24	; 0x01
    1c40:	9a 83       	std	Y+2, r25	; 0x02
    1c42:	ab 83       	std	Y+3, r26	; 0x03
    1c44:	bc 83       	std	Y+4, r27	; 0x04
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
    1c46:	60 e1       	ldi	r22, 0x10	; 16
    1c48:	85 e0       	ldi	r24, 0x05	; 5
    1c4a:	61 df       	rcall	.-318    	; 0x1b0e <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    1c4c:	be 01       	movw	r22, r28
    1c4e:	6f 5f       	subi	r22, 0xFF	; 255
    1c50:	7f 4f       	sbci	r23, 0xFF	; 255
    1c52:	80 ea       	ldi	r24, 0xA0	; 160
    1c54:	9a e0       	ldi	r25, 0x0A	; 10
    1c56:	40 db       	rcall	.-2432   	; 0x12d8 <usart_init_rs232>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    1c58:	18 e0       	ldi	r17, 0x08	; 8
    1c5a:	e0 e8       	ldi	r30, 0x80	; 128
    1c5c:	f6 e0       	ldi	r31, 0x06	; 6
    1c5e:	11 83       	std	Z+1, r17	; 0x01

static void adc_init(void) {
	struct adc_config adc_conf;
	struct adc_channel_config adcch_conf;
	
	adc_read_configuration(&MY_ADC, &adc_conf);
    1c60:	be 01       	movw	r22, r28
    1c62:	6f 5f       	subi	r22, 0xFF	; 255
    1c64:	7f 4f       	sbci	r23, 0xFF	; 255
    1c66:	80 e0       	ldi	r24, 0x00	; 0
    1c68:	92 e0       	ldi	r25, 0x02	; 2
    1c6a:	94 de       	rcall	.-728    	; 0x1994 <adc_read_configuration>
	adcch_read_configuration(&MY_ADC, MY_ADC_CH, &adcch_conf);
    1c6c:	ae 01       	movw	r20, r28
    1c6e:	48 5f       	subi	r20, 0xF8	; 248
    1c70:	5f 4f       	sbci	r21, 0xFF	; 255
    1c72:	61 e0       	ldi	r22, 0x01	; 1
    1c74:	80 e0       	ldi	r24, 0x00	; 0
    1c76:	92 e0       	ldi	r25, 0x02	; 2
    1c78:	e9 de       	rcall	.-558    	; 0x1a4c <adcch_read_configuration>
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    1c7a:	8a 81       	ldd	r24, Y+2	; 0x02
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    1c7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c7e:	9f 78       	andi	r25, 0x8F	; 143
	conf->refctrl |= ref;
    1c80:	90 62       	ori	r25, 0x20	; 32
    1c82:	9b 83       	std	Y+3, r25	; 0x03
		conf->ctrlb &= ~ADC_FREERUN_bm;
		conf->evctrl = ADC_EVACT_NONE_gc;
		break;

	case ADC_TRIG_EVENT_SINGLE:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    1c84:	81 7e       	andi	r24, 0xE1	; 225
    1c86:	84 60       	ori	r24, 0x04	; 4
    1c88:	8a 83       	std	Y+2, r24	; 0x02
		conf->evctrl = (base_ev_ch << ADC_EVSEL_gp) |
    1c8a:	01 e0       	ldi	r16, 0x01	; 1
    1c8c:	0c 83       	std	Y+4, r16	; 0x04
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    1c8e:	84 e0       	ldi	r24, 0x04	; 4
    1c90:	8d 83       	std	Y+5, r24	; 0x05
	
	adc_set_conversion_parameters(&adc_conf, ADC_SIGN_OFF, ADC_RES_8, ADC_REF_AREFA);
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_EVENT_SINGLE, 1, 0);
	adc_set_clock_rate(&adc_conf, 500000UL);
	adc_set_callback(&MY_ADC, &adc_handler);
    1c92:	6e ea       	ldi	r22, 0xAE	; 174
    1c94:	7d e0       	ldi	r23, 0x0D	; 13
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	92 e0       	ldi	r25, 0x02	; 2
    1c9a:	32 dc       	rcall	.-1948   	; 0x1500 <adc_set_callback>
 *
 * \param ch_conf Pointer to ADC channel configuration.
 */
static inline void adcch_enable_interrupt(struct adc_channel_config *ch_conf)
{
	ch_conf->intctrl &= ~ADC_CH_INTLVL_gm;
    1c9c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c9e:	8c 7f       	andi	r24, 0xFC	; 252
	ch_conf->intctrl |= CONFIG_ADC_INTLVL;
    1ca0:	81 60       	ori	r24, 0x01	; 1
    1ca2:	8a 87       	std	Y+10, r24	; 0x0a
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    1ca4:	08 87       	std	Y+8, r16	; 0x08
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
    1ca6:	19 87       	std	Y+9, r17	; 0x09
	
	adcch_enable_interrupt(&adcch_conf);
	adcch_set_input(&adcch_conf, ADCCH_POS_PIN1, ADCCH_NEG_NONE, 1);
	
	adc_write_configuration(&MY_ADC, &adc_conf);
    1ca8:	be 01       	movw	r22, r28
    1caa:	6f 5f       	subi	r22, 0xFF	; 255
    1cac:	7f 4f       	sbci	r23, 0xFF	; 255
    1cae:	80 e0       	ldi	r24, 0x00	; 0
    1cb0:	92 e0       	ldi	r25, 0x02	; 2
    1cb2:	1f de       	rcall	.-962    	; 0x18f2 <adc_write_configuration>
	adcch_write_configuration(&MY_ADC, MY_ADC_CH, &adcch_conf);
    1cb4:	ae 01       	movw	r20, r28
    1cb6:	48 5f       	subi	r20, 0xF8	; 248
    1cb8:	5f 4f       	sbci	r21, 0xFF	; 255
    1cba:	61 e0       	ldi	r22, 0x01	; 1
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
    1cbe:	92 e0       	ldi	r25, 0x02	; 2
    1cc0:	8c de       	rcall	.-744    	; 0x19da <adcch_write_configuration>
	tc_init();
	pmic_init();
	usart_serial_init(&USARTE0, &USART_SERIAL_OPTIONS);
	ioport_set_pin_dir(UART_TXPIN, IOPORT_DIR_OUTPUT);
	adc_init();
	adc_enable(&MY_ADC);
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	92 e0       	ldi	r25, 0x02	; 2
    1cc6:	6e dc       	rcall	.-1828   	; 0x15a4 <adc_enable>
    1cc8:	ff cf       	rjmp	.-2      	; 0x1cc8 <main+0x15e>

00001cca <vfprintf>:
    1cca:	2f 92       	push	r2
    1ccc:	3f 92       	push	r3
    1cce:	4f 92       	push	r4
    1cd0:	5f 92       	push	r5
    1cd2:	6f 92       	push	r6
    1cd4:	7f 92       	push	r7
    1cd6:	8f 92       	push	r8
    1cd8:	9f 92       	push	r9
    1cda:	af 92       	push	r10
    1cdc:	bf 92       	push	r11
    1cde:	cf 92       	push	r12
    1ce0:	df 92       	push	r13
    1ce2:	ef 92       	push	r14
    1ce4:	ff 92       	push	r15
    1ce6:	0f 93       	push	r16
    1ce8:	1f 93       	push	r17
    1cea:	cf 93       	push	r28
    1cec:	df 93       	push	r29
    1cee:	cd b7       	in	r28, 0x3d	; 61
    1cf0:	de b7       	in	r29, 0x3e	; 62
    1cf2:	63 97       	sbiw	r28, 0x13	; 19
    1cf4:	cd bf       	out	0x3d, r28	; 61
    1cf6:	de bf       	out	0x3e, r29	; 62
    1cf8:	7c 01       	movw	r14, r24
    1cfa:	1b 01       	movw	r2, r22
    1cfc:	6a 01       	movw	r12, r20
    1cfe:	fc 01       	movw	r30, r24
    1d00:	16 82       	std	Z+6, r1	; 0x06
    1d02:	17 82       	std	Z+7, r1	; 0x07
    1d04:	83 81       	ldd	r24, Z+3	; 0x03
    1d06:	81 ff       	sbrs	r24, 1
    1d08:	49 c3       	rjmp	.+1682   	; 0x239c <vfprintf+0x6d2>
    1d0a:	be 01       	movw	r22, r28
    1d0c:	6f 5f       	subi	r22, 0xFF	; 255
    1d0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d10:	4b 01       	movw	r8, r22
    1d12:	f7 01       	movw	r30, r14
    1d14:	93 81       	ldd	r25, Z+3	; 0x03
    1d16:	f1 01       	movw	r30, r2
    1d18:	93 fd       	sbrc	r25, 3
    1d1a:	85 91       	lpm	r24, Z+
    1d1c:	93 ff       	sbrs	r25, 3
    1d1e:	81 91       	ld	r24, Z+
    1d20:	1f 01       	movw	r2, r30
    1d22:	88 23       	and	r24, r24
    1d24:	09 f4       	brne	.+2      	; 0x1d28 <vfprintf+0x5e>
    1d26:	36 c3       	rjmp	.+1644   	; 0x2394 <vfprintf+0x6ca>
    1d28:	85 32       	cpi	r24, 0x25	; 37
    1d2a:	39 f4       	brne	.+14     	; 0x1d3a <vfprintf+0x70>
    1d2c:	93 fd       	sbrc	r25, 3
    1d2e:	85 91       	lpm	r24, Z+
    1d30:	93 ff       	sbrs	r25, 3
    1d32:	81 91       	ld	r24, Z+
    1d34:	1f 01       	movw	r2, r30
    1d36:	85 32       	cpi	r24, 0x25	; 37
    1d38:	31 f4       	brne	.+12     	; 0x1d46 <vfprintf+0x7c>
    1d3a:	b7 01       	movw	r22, r14
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	5c d4       	rcall	.+2232   	; 0x25f8 <fputc>
    1d40:	56 01       	movw	r10, r12
    1d42:	65 01       	movw	r12, r10
    1d44:	e6 cf       	rjmp	.-52     	; 0x1d12 <vfprintf+0x48>
    1d46:	10 e0       	ldi	r17, 0x00	; 0
    1d48:	51 2c       	mov	r5, r1
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	20 32       	cpi	r18, 0x20	; 32
    1d4e:	a0 f4       	brcc	.+40     	; 0x1d78 <vfprintf+0xae>
    1d50:	8b 32       	cpi	r24, 0x2B	; 43
    1d52:	69 f0       	breq	.+26     	; 0x1d6e <vfprintf+0xa4>
    1d54:	30 f4       	brcc	.+12     	; 0x1d62 <vfprintf+0x98>
    1d56:	80 32       	cpi	r24, 0x20	; 32
    1d58:	59 f0       	breq	.+22     	; 0x1d70 <vfprintf+0xa6>
    1d5a:	83 32       	cpi	r24, 0x23	; 35
    1d5c:	69 f4       	brne	.+26     	; 0x1d78 <vfprintf+0xae>
    1d5e:	20 61       	ori	r18, 0x10	; 16
    1d60:	2c c0       	rjmp	.+88     	; 0x1dba <vfprintf+0xf0>
    1d62:	8d 32       	cpi	r24, 0x2D	; 45
    1d64:	39 f0       	breq	.+14     	; 0x1d74 <vfprintf+0xaa>
    1d66:	80 33       	cpi	r24, 0x30	; 48
    1d68:	39 f4       	brne	.+14     	; 0x1d78 <vfprintf+0xae>
    1d6a:	21 60       	ori	r18, 0x01	; 1
    1d6c:	26 c0       	rjmp	.+76     	; 0x1dba <vfprintf+0xf0>
    1d6e:	22 60       	ori	r18, 0x02	; 2
    1d70:	24 60       	ori	r18, 0x04	; 4
    1d72:	23 c0       	rjmp	.+70     	; 0x1dba <vfprintf+0xf0>
    1d74:	28 60       	ori	r18, 0x08	; 8
    1d76:	21 c0       	rjmp	.+66     	; 0x1dba <vfprintf+0xf0>
    1d78:	27 fd       	sbrc	r18, 7
    1d7a:	27 c0       	rjmp	.+78     	; 0x1dca <vfprintf+0x100>
    1d7c:	30 ed       	ldi	r19, 0xD0	; 208
    1d7e:	38 0f       	add	r19, r24
    1d80:	3a 30       	cpi	r19, 0x0A	; 10
    1d82:	78 f4       	brcc	.+30     	; 0x1da2 <vfprintf+0xd8>
    1d84:	26 ff       	sbrs	r18, 6
    1d86:	06 c0       	rjmp	.+12     	; 0x1d94 <vfprintf+0xca>
    1d88:	fa e0       	ldi	r31, 0x0A	; 10
    1d8a:	1f 9f       	mul	r17, r31
    1d8c:	30 0d       	add	r19, r0
    1d8e:	11 24       	eor	r1, r1
    1d90:	13 2f       	mov	r17, r19
    1d92:	13 c0       	rjmp	.+38     	; 0x1dba <vfprintf+0xf0>
    1d94:	6a e0       	ldi	r22, 0x0A	; 10
    1d96:	56 9e       	mul	r5, r22
    1d98:	30 0d       	add	r19, r0
    1d9a:	11 24       	eor	r1, r1
    1d9c:	53 2e       	mov	r5, r19
    1d9e:	20 62       	ori	r18, 0x20	; 32
    1da0:	0c c0       	rjmp	.+24     	; 0x1dba <vfprintf+0xf0>
    1da2:	8e 32       	cpi	r24, 0x2E	; 46
    1da4:	21 f4       	brne	.+8      	; 0x1dae <vfprintf+0xe4>
    1da6:	26 fd       	sbrc	r18, 6
    1da8:	f5 c2       	rjmp	.+1514   	; 0x2394 <vfprintf+0x6ca>
    1daa:	20 64       	ori	r18, 0x40	; 64
    1dac:	06 c0       	rjmp	.+12     	; 0x1dba <vfprintf+0xf0>
    1dae:	8c 36       	cpi	r24, 0x6C	; 108
    1db0:	11 f4       	brne	.+4      	; 0x1db6 <vfprintf+0xec>
    1db2:	20 68       	ori	r18, 0x80	; 128
    1db4:	02 c0       	rjmp	.+4      	; 0x1dba <vfprintf+0xf0>
    1db6:	88 36       	cpi	r24, 0x68	; 104
    1db8:	41 f4       	brne	.+16     	; 0x1dca <vfprintf+0x100>
    1dba:	f1 01       	movw	r30, r2
    1dbc:	93 fd       	sbrc	r25, 3
    1dbe:	85 91       	lpm	r24, Z+
    1dc0:	93 ff       	sbrs	r25, 3
    1dc2:	81 91       	ld	r24, Z+
    1dc4:	1f 01       	movw	r2, r30
    1dc6:	81 11       	cpse	r24, r1
    1dc8:	c1 cf       	rjmp	.-126    	; 0x1d4c <vfprintf+0x82>
    1dca:	9b eb       	ldi	r25, 0xBB	; 187
    1dcc:	98 0f       	add	r25, r24
    1dce:	93 30       	cpi	r25, 0x03	; 3
    1dd0:	18 f4       	brcc	.+6      	; 0x1dd8 <vfprintf+0x10e>
    1dd2:	20 61       	ori	r18, 0x10	; 16
    1dd4:	80 5e       	subi	r24, 0xE0	; 224
    1dd6:	06 c0       	rjmp	.+12     	; 0x1de4 <vfprintf+0x11a>
    1dd8:	9b e9       	ldi	r25, 0x9B	; 155
    1dda:	98 0f       	add	r25, r24
    1ddc:	93 30       	cpi	r25, 0x03	; 3
    1dde:	08 f0       	brcs	.+2      	; 0x1de2 <vfprintf+0x118>
    1de0:	9a c1       	rjmp	.+820    	; 0x2116 <vfprintf+0x44c>
    1de2:	2f 7e       	andi	r18, 0xEF	; 239
    1de4:	26 ff       	sbrs	r18, 6
    1de6:	16 e0       	ldi	r17, 0x06	; 6
    1de8:	2f 73       	andi	r18, 0x3F	; 63
    1dea:	72 2e       	mov	r7, r18
    1dec:	85 36       	cpi	r24, 0x65	; 101
    1dee:	21 f4       	brne	.+8      	; 0x1df8 <vfprintf+0x12e>
    1df0:	f2 2f       	mov	r31, r18
    1df2:	f0 64       	ori	r31, 0x40	; 64
    1df4:	7f 2e       	mov	r7, r31
    1df6:	08 c0       	rjmp	.+16     	; 0x1e08 <vfprintf+0x13e>
    1df8:	86 36       	cpi	r24, 0x66	; 102
    1dfa:	21 f4       	brne	.+8      	; 0x1e04 <vfprintf+0x13a>
    1dfc:	62 2f       	mov	r22, r18
    1dfe:	60 68       	ori	r22, 0x80	; 128
    1e00:	76 2e       	mov	r7, r22
    1e02:	02 c0       	rjmp	.+4      	; 0x1e08 <vfprintf+0x13e>
    1e04:	11 11       	cpse	r17, r1
    1e06:	11 50       	subi	r17, 0x01	; 1
    1e08:	77 fe       	sbrs	r7, 7
    1e0a:	07 c0       	rjmp	.+14     	; 0x1e1a <vfprintf+0x150>
    1e0c:	1c 33       	cpi	r17, 0x3C	; 60
    1e0e:	48 f4       	brcc	.+18     	; 0x1e22 <vfprintf+0x158>
    1e10:	44 24       	eor	r4, r4
    1e12:	43 94       	inc	r4
    1e14:	41 0e       	add	r4, r17
    1e16:	27 e0       	ldi	r18, 0x07	; 7
    1e18:	0b c0       	rjmp	.+22     	; 0x1e30 <vfprintf+0x166>
    1e1a:	18 30       	cpi	r17, 0x08	; 8
    1e1c:	30 f4       	brcc	.+12     	; 0x1e2a <vfprintf+0x160>
    1e1e:	21 2f       	mov	r18, r17
    1e20:	06 c0       	rjmp	.+12     	; 0x1e2e <vfprintf+0x164>
    1e22:	27 e0       	ldi	r18, 0x07	; 7
    1e24:	4c e3       	ldi	r20, 0x3C	; 60
    1e26:	44 2e       	mov	r4, r20
    1e28:	03 c0       	rjmp	.+6      	; 0x1e30 <vfprintf+0x166>
    1e2a:	27 e0       	ldi	r18, 0x07	; 7
    1e2c:	17 e0       	ldi	r17, 0x07	; 7
    1e2e:	41 2c       	mov	r4, r1
    1e30:	56 01       	movw	r10, r12
    1e32:	74 e0       	ldi	r23, 0x04	; 4
    1e34:	a7 0e       	add	r10, r23
    1e36:	b1 1c       	adc	r11, r1
    1e38:	f6 01       	movw	r30, r12
    1e3a:	60 81       	ld	r22, Z
    1e3c:	71 81       	ldd	r23, Z+1	; 0x01
    1e3e:	82 81       	ldd	r24, Z+2	; 0x02
    1e40:	93 81       	ldd	r25, Z+3	; 0x03
    1e42:	04 2d       	mov	r16, r4
    1e44:	a4 01       	movw	r20, r8
    1e46:	ea d2       	rcall	.+1492   	; 0x241c <__ftoa_engine>
    1e48:	6c 01       	movw	r12, r24
    1e4a:	09 81       	ldd	r16, Y+1	; 0x01
    1e4c:	00 ff       	sbrs	r16, 0
    1e4e:	02 c0       	rjmp	.+4      	; 0x1e54 <vfprintf+0x18a>
    1e50:	03 ff       	sbrs	r16, 3
    1e52:	06 c0       	rjmp	.+12     	; 0x1e60 <vfprintf+0x196>
    1e54:	71 fc       	sbrc	r7, 1
    1e56:	07 c0       	rjmp	.+14     	; 0x1e66 <vfprintf+0x19c>
    1e58:	72 fc       	sbrc	r7, 2
    1e5a:	08 c0       	rjmp	.+16     	; 0x1e6c <vfprintf+0x1a2>
    1e5c:	61 2c       	mov	r6, r1
    1e5e:	08 c0       	rjmp	.+16     	; 0x1e70 <vfprintf+0x1a6>
    1e60:	3d e2       	ldi	r19, 0x2D	; 45
    1e62:	63 2e       	mov	r6, r19
    1e64:	05 c0       	rjmp	.+10     	; 0x1e70 <vfprintf+0x1a6>
    1e66:	2b e2       	ldi	r18, 0x2B	; 43
    1e68:	62 2e       	mov	r6, r18
    1e6a:	02 c0       	rjmp	.+4      	; 0x1e70 <vfprintf+0x1a6>
    1e6c:	90 e2       	ldi	r25, 0x20	; 32
    1e6e:	69 2e       	mov	r6, r25
    1e70:	80 2f       	mov	r24, r16
    1e72:	8c 70       	andi	r24, 0x0C	; 12
    1e74:	81 f1       	breq	.+96     	; 0x1ed6 <vfprintf+0x20c>
    1e76:	66 20       	and	r6, r6
    1e78:	11 f0       	breq	.+4      	; 0x1e7e <vfprintf+0x1b4>
    1e7a:	84 e0       	ldi	r24, 0x04	; 4
    1e7c:	01 c0       	rjmp	.+2      	; 0x1e80 <vfprintf+0x1b6>
    1e7e:	83 e0       	ldi	r24, 0x03	; 3
    1e80:	85 15       	cp	r24, r5
    1e82:	10 f0       	brcs	.+4      	; 0x1e88 <vfprintf+0x1be>
    1e84:	51 2c       	mov	r5, r1
    1e86:	0a c0       	rjmp	.+20     	; 0x1e9c <vfprintf+0x1d2>
    1e88:	58 1a       	sub	r5, r24
    1e8a:	73 fc       	sbrc	r7, 3
    1e8c:	07 c0       	rjmp	.+14     	; 0x1e9c <vfprintf+0x1d2>
    1e8e:	b7 01       	movw	r22, r14
    1e90:	80 e2       	ldi	r24, 0x20	; 32
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	b1 d3       	rcall	.+1890   	; 0x25f8 <fputc>
    1e96:	5a 94       	dec	r5
    1e98:	d1 f7       	brne	.-12     	; 0x1e8e <vfprintf+0x1c4>
    1e9a:	f4 cf       	rjmp	.-24     	; 0x1e84 <vfprintf+0x1ba>
    1e9c:	66 20       	and	r6, r6
    1e9e:	21 f0       	breq	.+8      	; 0x1ea8 <vfprintf+0x1de>
    1ea0:	b7 01       	movw	r22, r14
    1ea2:	86 2d       	mov	r24, r6
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	a8 d3       	rcall	.+1872   	; 0x25f8 <fputc>
    1ea8:	03 fd       	sbrc	r16, 3
    1eaa:	03 c0       	rjmp	.+6      	; 0x1eb2 <vfprintf+0x1e8>
    1eac:	0e e0       	ldi	r16, 0x0E	; 14
    1eae:	12 e0       	ldi	r17, 0x02	; 2
    1eb0:	02 c0       	rjmp	.+4      	; 0x1eb6 <vfprintf+0x1ec>
    1eb2:	0a e0       	ldi	r16, 0x0A	; 10
    1eb4:	12 e0       	ldi	r17, 0x02	; 2
    1eb6:	f7 2d       	mov	r31, r7
    1eb8:	f0 71       	andi	r31, 0x10	; 16
    1eba:	7f 2e       	mov	r7, r31
    1ebc:	f8 01       	movw	r30, r16
    1ebe:	84 91       	lpm	r24, Z
    1ec0:	88 23       	and	r24, r24
    1ec2:	09 f4       	brne	.+2      	; 0x1ec6 <vfprintf+0x1fc>
    1ec4:	5e c2       	rjmp	.+1212   	; 0x2382 <vfprintf+0x6b8>
    1ec6:	71 10       	cpse	r7, r1
    1ec8:	80 52       	subi	r24, 0x20	; 32
    1eca:	b7 01       	movw	r22, r14
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	94 d3       	rcall	.+1832   	; 0x25f8 <fputc>
    1ed0:	0f 5f       	subi	r16, 0xFF	; 255
    1ed2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed4:	f3 cf       	rjmp	.-26     	; 0x1ebc <vfprintf+0x1f2>
    1ed6:	77 fe       	sbrs	r7, 7
    1ed8:	0f c0       	rjmp	.+30     	; 0x1ef8 <vfprintf+0x22e>
    1eda:	4c 0c       	add	r4, r12
    1edc:	04 ff       	sbrs	r16, 4
    1ede:	04 c0       	rjmp	.+8      	; 0x1ee8 <vfprintf+0x21e>
    1ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee2:	81 33       	cpi	r24, 0x31	; 49
    1ee4:	09 f4       	brne	.+2      	; 0x1ee8 <vfprintf+0x21e>
    1ee6:	4a 94       	dec	r4
    1ee8:	14 14       	cp	r1, r4
    1eea:	74 f5       	brge	.+92     	; 0x1f48 <vfprintf+0x27e>
    1eec:	f8 e0       	ldi	r31, 0x08	; 8
    1eee:	f4 15       	cp	r31, r4
    1ef0:	78 f5       	brcc	.+94     	; 0x1f50 <vfprintf+0x286>
    1ef2:	88 e0       	ldi	r24, 0x08	; 8
    1ef4:	48 2e       	mov	r4, r24
    1ef6:	2c c0       	rjmp	.+88     	; 0x1f50 <vfprintf+0x286>
    1ef8:	76 fc       	sbrc	r7, 6
    1efa:	2a c0       	rjmp	.+84     	; 0x1f50 <vfprintf+0x286>
    1efc:	81 2f       	mov	r24, r17
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	8c 15       	cp	r24, r12
    1f02:	9d 05       	cpc	r25, r13
    1f04:	9c f0       	brlt	.+38     	; 0x1f2c <vfprintf+0x262>
    1f06:	6c ef       	ldi	r22, 0xFC	; 252
    1f08:	c6 16       	cp	r12, r22
    1f0a:	6f ef       	ldi	r22, 0xFF	; 255
    1f0c:	d6 06       	cpc	r13, r22
    1f0e:	74 f0       	brlt	.+28     	; 0x1f2c <vfprintf+0x262>
    1f10:	77 2d       	mov	r23, r7
    1f12:	70 68       	ori	r23, 0x80	; 128
    1f14:	77 2e       	mov	r7, r23
    1f16:	0a c0       	rjmp	.+20     	; 0x1f2c <vfprintf+0x262>
    1f18:	e2 e0       	ldi	r30, 0x02	; 2
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	ec 0f       	add	r30, r28
    1f1e:	fd 1f       	adc	r31, r29
    1f20:	e1 0f       	add	r30, r17
    1f22:	f1 1d       	adc	r31, r1
    1f24:	80 81       	ld	r24, Z
    1f26:	80 33       	cpi	r24, 0x30	; 48
    1f28:	19 f4       	brne	.+6      	; 0x1f30 <vfprintf+0x266>
    1f2a:	11 50       	subi	r17, 0x01	; 1
    1f2c:	11 11       	cpse	r17, r1
    1f2e:	f4 cf       	rjmp	.-24     	; 0x1f18 <vfprintf+0x24e>
    1f30:	77 fe       	sbrs	r7, 7
    1f32:	0e c0       	rjmp	.+28     	; 0x1f50 <vfprintf+0x286>
    1f34:	44 24       	eor	r4, r4
    1f36:	43 94       	inc	r4
    1f38:	41 0e       	add	r4, r17
    1f3a:	81 2f       	mov	r24, r17
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	c8 16       	cp	r12, r24
    1f40:	d9 06       	cpc	r13, r25
    1f42:	2c f4       	brge	.+10     	; 0x1f4e <vfprintf+0x284>
    1f44:	1c 19       	sub	r17, r12
    1f46:	04 c0       	rjmp	.+8      	; 0x1f50 <vfprintf+0x286>
    1f48:	44 24       	eor	r4, r4
    1f4a:	43 94       	inc	r4
    1f4c:	01 c0       	rjmp	.+2      	; 0x1f50 <vfprintf+0x286>
    1f4e:	10 e0       	ldi	r17, 0x00	; 0
    1f50:	77 fe       	sbrs	r7, 7
    1f52:	07 c0       	rjmp	.+14     	; 0x1f62 <vfprintf+0x298>
    1f54:	1c 14       	cp	r1, r12
    1f56:	1d 04       	cpc	r1, r13
    1f58:	3c f4       	brge	.+14     	; 0x1f68 <vfprintf+0x29e>
    1f5a:	96 01       	movw	r18, r12
    1f5c:	2f 5f       	subi	r18, 0xFF	; 255
    1f5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f60:	05 c0       	rjmp	.+10     	; 0x1f6c <vfprintf+0x2a2>
    1f62:	25 e0       	ldi	r18, 0x05	; 5
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	02 c0       	rjmp	.+4      	; 0x1f6c <vfprintf+0x2a2>
    1f68:	21 e0       	ldi	r18, 0x01	; 1
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	66 20       	and	r6, r6
    1f6e:	11 f0       	breq	.+4      	; 0x1f74 <vfprintf+0x2aa>
    1f70:	2f 5f       	subi	r18, 0xFF	; 255
    1f72:	3f 4f       	sbci	r19, 0xFF	; 255
    1f74:	11 23       	and	r17, r17
    1f76:	31 f0       	breq	.+12     	; 0x1f84 <vfprintf+0x2ba>
    1f78:	41 2f       	mov	r20, r17
    1f7a:	50 e0       	ldi	r21, 0x00	; 0
    1f7c:	4f 5f       	subi	r20, 0xFF	; 255
    1f7e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f80:	24 0f       	add	r18, r20
    1f82:	35 1f       	adc	r19, r21
    1f84:	45 2d       	mov	r20, r5
    1f86:	50 e0       	ldi	r21, 0x00	; 0
    1f88:	24 17       	cp	r18, r20
    1f8a:	35 07       	cpc	r19, r21
    1f8c:	14 f4       	brge	.+4      	; 0x1f92 <vfprintf+0x2c8>
    1f8e:	52 1a       	sub	r5, r18
    1f90:	01 c0       	rjmp	.+2      	; 0x1f94 <vfprintf+0x2ca>
    1f92:	51 2c       	mov	r5, r1
    1f94:	87 2d       	mov	r24, r7
    1f96:	89 70       	andi	r24, 0x09	; 9
    1f98:	41 f4       	brne	.+16     	; 0x1faa <vfprintf+0x2e0>
    1f9a:	55 20       	and	r5, r5
    1f9c:	31 f0       	breq	.+12     	; 0x1faa <vfprintf+0x2e0>
    1f9e:	b7 01       	movw	r22, r14
    1fa0:	80 e2       	ldi	r24, 0x20	; 32
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	29 d3       	rcall	.+1618   	; 0x25f8 <fputc>
    1fa6:	5a 94       	dec	r5
    1fa8:	f8 cf       	rjmp	.-16     	; 0x1f9a <vfprintf+0x2d0>
    1faa:	66 20       	and	r6, r6
    1fac:	21 f0       	breq	.+8      	; 0x1fb6 <vfprintf+0x2ec>
    1fae:	b7 01       	movw	r22, r14
    1fb0:	86 2d       	mov	r24, r6
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	21 d3       	rcall	.+1602   	; 0x25f8 <fputc>
    1fb6:	73 fc       	sbrc	r7, 3
    1fb8:	08 c0       	rjmp	.+16     	; 0x1fca <vfprintf+0x300>
    1fba:	55 20       	and	r5, r5
    1fbc:	31 f0       	breq	.+12     	; 0x1fca <vfprintf+0x300>
    1fbe:	b7 01       	movw	r22, r14
    1fc0:	80 e3       	ldi	r24, 0x30	; 48
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	19 d3       	rcall	.+1586   	; 0x25f8 <fputc>
    1fc6:	5a 94       	dec	r5
    1fc8:	f8 cf       	rjmp	.-16     	; 0x1fba <vfprintf+0x2f0>
    1fca:	77 fe       	sbrs	r7, 7
    1fcc:	5d c0       	rjmp	.+186    	; 0x2088 <vfprintf+0x3be>
    1fce:	9c 2d       	mov	r25, r12
    1fd0:	8d 2d       	mov	r24, r13
    1fd2:	d7 fe       	sbrs	r13, 7
    1fd4:	02 c0       	rjmp	.+4      	; 0x1fda <vfprintf+0x310>
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	69 2e       	mov	r6, r25
    1fdc:	78 2e       	mov	r7, r24
    1fde:	40 e0       	ldi	r20, 0x00	; 0
    1fe0:	50 e0       	ldi	r21, 0x00	; 0
    1fe2:	c6 01       	movw	r24, r12
    1fe4:	84 19       	sub	r24, r4
    1fe6:	91 09       	sbc	r25, r1
    1fe8:	8c 87       	std	Y+12, r24	; 0x0c
    1fea:	9d 87       	std	Y+13, r25	; 0x0d
    1fec:	96 01       	movw	r18, r12
    1fee:	26 19       	sub	r18, r6
    1ff0:	37 09       	sbc	r19, r7
    1ff2:	28 0d       	add	r18, r8
    1ff4:	39 1d       	adc	r19, r9
    1ff6:	81 2f       	mov	r24, r17
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	ee 27       	eor	r30, r30
    1ffc:	ff 27       	eor	r31, r31
    1ffe:	e8 1b       	sub	r30, r24
    2000:	f9 0b       	sbc	r31, r25
    2002:	ee 87       	std	Y+14, r30	; 0x0e
    2004:	ff 87       	std	Y+15, r31	; 0x0f
    2006:	ff ef       	ldi	r31, 0xFF	; 255
    2008:	6f 16       	cp	r6, r31
    200a:	7f 06       	cpc	r7, r31
    200c:	61 f4       	brne	.+24     	; 0x2026 <vfprintf+0x35c>
    200e:	b7 01       	movw	r22, r14
    2010:	8e e2       	ldi	r24, 0x2E	; 46
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	2b 8b       	std	Y+19, r18	; 0x13
    2016:	3a 8b       	std	Y+18, r19	; 0x12
    2018:	48 8b       	std	Y+16, r20	; 0x10
    201a:	59 8b       	std	Y+17, r21	; 0x11
    201c:	ed d2       	rcall	.+1498   	; 0x25f8 <fputc>
    201e:	59 89       	ldd	r21, Y+17	; 0x11
    2020:	48 89       	ldd	r20, Y+16	; 0x10
    2022:	3a 89       	ldd	r19, Y+18	; 0x12
    2024:	2b 89       	ldd	r18, Y+19	; 0x13
    2026:	c6 14       	cp	r12, r6
    2028:	d7 04       	cpc	r13, r7
    202a:	54 f0       	brlt	.+20     	; 0x2040 <vfprintf+0x376>
    202c:	6c 85       	ldd	r22, Y+12	; 0x0c
    202e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2030:	66 15       	cp	r22, r6
    2032:	77 05       	cpc	r23, r7
    2034:	2c f4       	brge	.+10     	; 0x2040 <vfprintf+0x376>
    2036:	f9 01       	movw	r30, r18
    2038:	e4 0f       	add	r30, r20
    203a:	f5 1f       	adc	r31, r21
    203c:	81 81       	ldd	r24, Z+1	; 0x01
    203e:	01 c0       	rjmp	.+2      	; 0x2042 <vfprintf+0x378>
    2040:	80 e3       	ldi	r24, 0x30	; 48
    2042:	71 e0       	ldi	r23, 0x01	; 1
    2044:	67 1a       	sub	r6, r23
    2046:	71 08       	sbc	r7, r1
    2048:	4f 5f       	subi	r20, 0xFF	; 255
    204a:	5f 4f       	sbci	r21, 0xFF	; 255
    204c:	ee 85       	ldd	r30, Y+14	; 0x0e
    204e:	ff 85       	ldd	r31, Y+15	; 0x0f
    2050:	6e 16       	cp	r6, r30
    2052:	7f 06       	cpc	r7, r31
    2054:	64 f0       	brlt	.+24     	; 0x206e <vfprintf+0x3a4>
    2056:	b7 01       	movw	r22, r14
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	2b 8b       	std	Y+19, r18	; 0x13
    205c:	3a 8b       	std	Y+18, r19	; 0x12
    205e:	48 8b       	std	Y+16, r20	; 0x10
    2060:	59 8b       	std	Y+17, r21	; 0x11
    2062:	ca d2       	rcall	.+1428   	; 0x25f8 <fputc>
    2064:	2b 89       	ldd	r18, Y+19	; 0x13
    2066:	3a 89       	ldd	r19, Y+18	; 0x12
    2068:	48 89       	ldd	r20, Y+16	; 0x10
    206a:	59 89       	ldd	r21, Y+17	; 0x11
    206c:	cc cf       	rjmp	.-104    	; 0x2006 <vfprintf+0x33c>
    206e:	6c 14       	cp	r6, r12
    2070:	7d 04       	cpc	r7, r13
    2072:	39 f4       	brne	.+14     	; 0x2082 <vfprintf+0x3b8>
    2074:	9a 81       	ldd	r25, Y+2	; 0x02
    2076:	96 33       	cpi	r25, 0x36	; 54
    2078:	18 f4       	brcc	.+6      	; 0x2080 <vfprintf+0x3b6>
    207a:	95 33       	cpi	r25, 0x35	; 53
    207c:	11 f4       	brne	.+4      	; 0x2082 <vfprintf+0x3b8>
    207e:	04 ff       	sbrs	r16, 4
    2080:	81 e3       	ldi	r24, 0x31	; 49
    2082:	b7 01       	movw	r22, r14
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	45 c0       	rjmp	.+138    	; 0x2112 <vfprintf+0x448>
    2088:	8a 81       	ldd	r24, Y+2	; 0x02
    208a:	81 33       	cpi	r24, 0x31	; 49
    208c:	09 f0       	breq	.+2      	; 0x2090 <vfprintf+0x3c6>
    208e:	0f 7e       	andi	r16, 0xEF	; 239
    2090:	b7 01       	movw	r22, r14
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	b1 d2       	rcall	.+1378   	; 0x25f8 <fputc>
    2096:	11 11       	cpse	r17, r1
    2098:	05 c0       	rjmp	.+10     	; 0x20a4 <vfprintf+0x3da>
    209a:	74 fe       	sbrs	r7, 4
    209c:	16 c0       	rjmp	.+44     	; 0x20ca <vfprintf+0x400>
    209e:	85 e4       	ldi	r24, 0x45	; 69
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	15 c0       	rjmp	.+42     	; 0x20ce <vfprintf+0x404>
    20a4:	b7 01       	movw	r22, r14
    20a6:	8e e2       	ldi	r24, 0x2E	; 46
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	a6 d2       	rcall	.+1356   	; 0x25f8 <fputc>
    20ac:	82 e0       	ldi	r24, 0x02	; 2
    20ae:	66 24       	eor	r6, r6
    20b0:	63 94       	inc	r6
    20b2:	68 0e       	add	r6, r24
    20b4:	f4 01       	movw	r30, r8
    20b6:	e8 0f       	add	r30, r24
    20b8:	f1 1d       	adc	r31, r1
    20ba:	80 81       	ld	r24, Z
    20bc:	b7 01       	movw	r22, r14
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	9b d2       	rcall	.+1334   	; 0x25f8 <fputc>
    20c2:	11 50       	subi	r17, 0x01	; 1
    20c4:	51 f3       	breq	.-44     	; 0x209a <vfprintf+0x3d0>
    20c6:	86 2d       	mov	r24, r6
    20c8:	f2 cf       	rjmp	.-28     	; 0x20ae <vfprintf+0x3e4>
    20ca:	85 e6       	ldi	r24, 0x65	; 101
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	b7 01       	movw	r22, r14
    20d0:	93 d2       	rcall	.+1318   	; 0x25f8 <fputc>
    20d2:	d7 fc       	sbrc	r13, 7
    20d4:	05 c0       	rjmp	.+10     	; 0x20e0 <vfprintf+0x416>
    20d6:	c1 14       	cp	r12, r1
    20d8:	d1 04       	cpc	r13, r1
    20da:	39 f4       	brne	.+14     	; 0x20ea <vfprintf+0x420>
    20dc:	04 ff       	sbrs	r16, 4
    20de:	05 c0       	rjmp	.+10     	; 0x20ea <vfprintf+0x420>
    20e0:	d1 94       	neg	r13
    20e2:	c1 94       	neg	r12
    20e4:	d1 08       	sbc	r13, r1
    20e6:	8d e2       	ldi	r24, 0x2D	; 45
    20e8:	01 c0       	rjmp	.+2      	; 0x20ec <vfprintf+0x422>
    20ea:	8b e2       	ldi	r24, 0x2B	; 43
    20ec:	b7 01       	movw	r22, r14
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	83 d2       	rcall	.+1286   	; 0x25f8 <fputc>
    20f2:	80 e3       	ldi	r24, 0x30	; 48
    20f4:	6a e0       	ldi	r22, 0x0A	; 10
    20f6:	c6 16       	cp	r12, r22
    20f8:	d1 04       	cpc	r13, r1
    20fa:	2c f0       	brlt	.+10     	; 0x2106 <vfprintf+0x43c>
    20fc:	8f 5f       	subi	r24, 0xFF	; 255
    20fe:	fa e0       	ldi	r31, 0x0A	; 10
    2100:	cf 1a       	sub	r12, r31
    2102:	d1 08       	sbc	r13, r1
    2104:	f7 cf       	rjmp	.-18     	; 0x20f4 <vfprintf+0x42a>
    2106:	b7 01       	movw	r22, r14
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	76 d2       	rcall	.+1260   	; 0x25f8 <fputc>
    210c:	b7 01       	movw	r22, r14
    210e:	c6 01       	movw	r24, r12
    2110:	c0 96       	adiw	r24, 0x30	; 48
    2112:	72 d2       	rcall	.+1252   	; 0x25f8 <fputc>
    2114:	36 c1       	rjmp	.+620    	; 0x2382 <vfprintf+0x6b8>
    2116:	83 36       	cpi	r24, 0x63	; 99
    2118:	31 f0       	breq	.+12     	; 0x2126 <vfprintf+0x45c>
    211a:	83 37       	cpi	r24, 0x73	; 115
    211c:	79 f0       	breq	.+30     	; 0x213c <vfprintf+0x472>
    211e:	83 35       	cpi	r24, 0x53	; 83
    2120:	09 f0       	breq	.+2      	; 0x2124 <vfprintf+0x45a>
    2122:	54 c0       	rjmp	.+168    	; 0x21cc <vfprintf+0x502>
    2124:	20 c0       	rjmp	.+64     	; 0x2166 <vfprintf+0x49c>
    2126:	56 01       	movw	r10, r12
    2128:	72 e0       	ldi	r23, 0x02	; 2
    212a:	a7 0e       	add	r10, r23
    212c:	b1 1c       	adc	r11, r1
    212e:	f6 01       	movw	r30, r12
    2130:	80 81       	ld	r24, Z
    2132:	89 83       	std	Y+1, r24	; 0x01
    2134:	01 e0       	ldi	r16, 0x01	; 1
    2136:	10 e0       	ldi	r17, 0x00	; 0
    2138:	64 01       	movw	r12, r8
    213a:	13 c0       	rjmp	.+38     	; 0x2162 <vfprintf+0x498>
    213c:	56 01       	movw	r10, r12
    213e:	f2 e0       	ldi	r31, 0x02	; 2
    2140:	af 0e       	add	r10, r31
    2142:	b1 1c       	adc	r11, r1
    2144:	f6 01       	movw	r30, r12
    2146:	c0 80       	ld	r12, Z
    2148:	d1 80       	ldd	r13, Z+1	; 0x01
    214a:	26 ff       	sbrs	r18, 6
    214c:	03 c0       	rjmp	.+6      	; 0x2154 <vfprintf+0x48a>
    214e:	61 2f       	mov	r22, r17
    2150:	70 e0       	ldi	r23, 0x00	; 0
    2152:	02 c0       	rjmp	.+4      	; 0x2158 <vfprintf+0x48e>
    2154:	6f ef       	ldi	r22, 0xFF	; 255
    2156:	7f ef       	ldi	r23, 0xFF	; 255
    2158:	c6 01       	movw	r24, r12
    215a:	2b 8b       	std	Y+19, r18	; 0x13
    215c:	42 d2       	rcall	.+1156   	; 0x25e2 <strnlen>
    215e:	8c 01       	movw	r16, r24
    2160:	2b 89       	ldd	r18, Y+19	; 0x13
    2162:	2f 77       	andi	r18, 0x7F	; 127
    2164:	14 c0       	rjmp	.+40     	; 0x218e <vfprintf+0x4c4>
    2166:	56 01       	movw	r10, r12
    2168:	f2 e0       	ldi	r31, 0x02	; 2
    216a:	af 0e       	add	r10, r31
    216c:	b1 1c       	adc	r11, r1
    216e:	f6 01       	movw	r30, r12
    2170:	c0 80       	ld	r12, Z
    2172:	d1 80       	ldd	r13, Z+1	; 0x01
    2174:	26 ff       	sbrs	r18, 6
    2176:	03 c0       	rjmp	.+6      	; 0x217e <vfprintf+0x4b4>
    2178:	61 2f       	mov	r22, r17
    217a:	70 e0       	ldi	r23, 0x00	; 0
    217c:	02 c0       	rjmp	.+4      	; 0x2182 <vfprintf+0x4b8>
    217e:	6f ef       	ldi	r22, 0xFF	; 255
    2180:	7f ef       	ldi	r23, 0xFF	; 255
    2182:	c6 01       	movw	r24, r12
    2184:	2b 8b       	std	Y+19, r18	; 0x13
    2186:	22 d2       	rcall	.+1092   	; 0x25cc <strnlen_P>
    2188:	8c 01       	movw	r16, r24
    218a:	2b 89       	ldd	r18, Y+19	; 0x13
    218c:	20 68       	ori	r18, 0x80	; 128
    218e:	72 2e       	mov	r7, r18
    2190:	23 fd       	sbrc	r18, 3
    2192:	18 c0       	rjmp	.+48     	; 0x21c4 <vfprintf+0x4fa>
    2194:	85 2d       	mov	r24, r5
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	08 17       	cp	r16, r24
    219a:	19 07       	cpc	r17, r25
    219c:	98 f4       	brcc	.+38     	; 0x21c4 <vfprintf+0x4fa>
    219e:	b7 01       	movw	r22, r14
    21a0:	80 e2       	ldi	r24, 0x20	; 32
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	29 d2       	rcall	.+1106   	; 0x25f8 <fputc>
    21a6:	5a 94       	dec	r5
    21a8:	f5 cf       	rjmp	.-22     	; 0x2194 <vfprintf+0x4ca>
    21aa:	f6 01       	movw	r30, r12
    21ac:	77 fc       	sbrc	r7, 7
    21ae:	85 91       	lpm	r24, Z+
    21b0:	77 fe       	sbrs	r7, 7
    21b2:	81 91       	ld	r24, Z+
    21b4:	6f 01       	movw	r12, r30
    21b6:	b7 01       	movw	r22, r14
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	1e d2       	rcall	.+1084   	; 0x25f8 <fputc>
    21bc:	51 10       	cpse	r5, r1
    21be:	5a 94       	dec	r5
    21c0:	01 50       	subi	r16, 0x01	; 1
    21c2:	11 09       	sbc	r17, r1
    21c4:	01 15       	cp	r16, r1
    21c6:	11 05       	cpc	r17, r1
    21c8:	81 f7       	brne	.-32     	; 0x21aa <vfprintf+0x4e0>
    21ca:	db c0       	rjmp	.+438    	; 0x2382 <vfprintf+0x6b8>
    21cc:	84 36       	cpi	r24, 0x64	; 100
    21ce:	11 f0       	breq	.+4      	; 0x21d4 <vfprintf+0x50a>
    21d0:	89 36       	cpi	r24, 0x69	; 105
    21d2:	49 f5       	brne	.+82     	; 0x2226 <vfprintf+0x55c>
    21d4:	56 01       	movw	r10, r12
    21d6:	27 ff       	sbrs	r18, 7
    21d8:	09 c0       	rjmp	.+18     	; 0x21ec <vfprintf+0x522>
    21da:	f4 e0       	ldi	r31, 0x04	; 4
    21dc:	af 0e       	add	r10, r31
    21de:	b1 1c       	adc	r11, r1
    21e0:	f6 01       	movw	r30, r12
    21e2:	60 81       	ld	r22, Z
    21e4:	71 81       	ldd	r23, Z+1	; 0x01
    21e6:	82 81       	ldd	r24, Z+2	; 0x02
    21e8:	93 81       	ldd	r25, Z+3	; 0x03
    21ea:	0a c0       	rjmp	.+20     	; 0x2200 <vfprintf+0x536>
    21ec:	f2 e0       	ldi	r31, 0x02	; 2
    21ee:	af 0e       	add	r10, r31
    21f0:	b1 1c       	adc	r11, r1
    21f2:	f6 01       	movw	r30, r12
    21f4:	60 81       	ld	r22, Z
    21f6:	71 81       	ldd	r23, Z+1	; 0x01
    21f8:	88 27       	eor	r24, r24
    21fa:	77 fd       	sbrc	r23, 7
    21fc:	80 95       	com	r24
    21fe:	98 2f       	mov	r25, r24
    2200:	02 2f       	mov	r16, r18
    2202:	0f 76       	andi	r16, 0x6F	; 111
    2204:	97 ff       	sbrs	r25, 7
    2206:	08 c0       	rjmp	.+16     	; 0x2218 <vfprintf+0x54e>
    2208:	90 95       	com	r25
    220a:	80 95       	com	r24
    220c:	70 95       	com	r23
    220e:	61 95       	neg	r22
    2210:	7f 4f       	sbci	r23, 0xFF	; 255
    2212:	8f 4f       	sbci	r24, 0xFF	; 255
    2214:	9f 4f       	sbci	r25, 0xFF	; 255
    2216:	00 68       	ori	r16, 0x80	; 128
    2218:	2a e0       	ldi	r18, 0x0A	; 10
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	a4 01       	movw	r20, r8
    221e:	1e d2       	rcall	.+1084   	; 0x265c <__ultoa_invert>
    2220:	c8 2e       	mov	r12, r24
    2222:	c8 18       	sub	r12, r8
    2224:	3d c0       	rjmp	.+122    	; 0x22a0 <vfprintf+0x5d6>
    2226:	02 2f       	mov	r16, r18
    2228:	85 37       	cpi	r24, 0x75	; 117
    222a:	21 f4       	brne	.+8      	; 0x2234 <vfprintf+0x56a>
    222c:	0f 7e       	andi	r16, 0xEF	; 239
    222e:	2a e0       	ldi	r18, 0x0A	; 10
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	1d c0       	rjmp	.+58     	; 0x226e <vfprintf+0x5a4>
    2234:	09 7f       	andi	r16, 0xF9	; 249
    2236:	8f 36       	cpi	r24, 0x6F	; 111
    2238:	91 f0       	breq	.+36     	; 0x225e <vfprintf+0x594>
    223a:	18 f4       	brcc	.+6      	; 0x2242 <vfprintf+0x578>
    223c:	88 35       	cpi	r24, 0x58	; 88
    223e:	59 f0       	breq	.+22     	; 0x2256 <vfprintf+0x58c>
    2240:	a9 c0       	rjmp	.+338    	; 0x2394 <vfprintf+0x6ca>
    2242:	80 37       	cpi	r24, 0x70	; 112
    2244:	19 f0       	breq	.+6      	; 0x224c <vfprintf+0x582>
    2246:	88 37       	cpi	r24, 0x78	; 120
    2248:	11 f0       	breq	.+4      	; 0x224e <vfprintf+0x584>
    224a:	a4 c0       	rjmp	.+328    	; 0x2394 <vfprintf+0x6ca>
    224c:	00 61       	ori	r16, 0x10	; 16
    224e:	04 ff       	sbrs	r16, 4
    2250:	09 c0       	rjmp	.+18     	; 0x2264 <vfprintf+0x59a>
    2252:	04 60       	ori	r16, 0x04	; 4
    2254:	07 c0       	rjmp	.+14     	; 0x2264 <vfprintf+0x59a>
    2256:	24 ff       	sbrs	r18, 4
    2258:	08 c0       	rjmp	.+16     	; 0x226a <vfprintf+0x5a0>
    225a:	06 60       	ori	r16, 0x06	; 6
    225c:	06 c0       	rjmp	.+12     	; 0x226a <vfprintf+0x5a0>
    225e:	28 e0       	ldi	r18, 0x08	; 8
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	05 c0       	rjmp	.+10     	; 0x226e <vfprintf+0x5a4>
    2264:	20 e1       	ldi	r18, 0x10	; 16
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	02 c0       	rjmp	.+4      	; 0x226e <vfprintf+0x5a4>
    226a:	20 e1       	ldi	r18, 0x10	; 16
    226c:	32 e0       	ldi	r19, 0x02	; 2
    226e:	56 01       	movw	r10, r12
    2270:	07 ff       	sbrs	r16, 7
    2272:	09 c0       	rjmp	.+18     	; 0x2286 <vfprintf+0x5bc>
    2274:	f4 e0       	ldi	r31, 0x04	; 4
    2276:	af 0e       	add	r10, r31
    2278:	b1 1c       	adc	r11, r1
    227a:	f6 01       	movw	r30, r12
    227c:	60 81       	ld	r22, Z
    227e:	71 81       	ldd	r23, Z+1	; 0x01
    2280:	82 81       	ldd	r24, Z+2	; 0x02
    2282:	93 81       	ldd	r25, Z+3	; 0x03
    2284:	08 c0       	rjmp	.+16     	; 0x2296 <vfprintf+0x5cc>
    2286:	f2 e0       	ldi	r31, 0x02	; 2
    2288:	af 0e       	add	r10, r31
    228a:	b1 1c       	adc	r11, r1
    228c:	f6 01       	movw	r30, r12
    228e:	60 81       	ld	r22, Z
    2290:	71 81       	ldd	r23, Z+1	; 0x01
    2292:	80 e0       	ldi	r24, 0x00	; 0
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	a4 01       	movw	r20, r8
    2298:	e1 d1       	rcall	.+962    	; 0x265c <__ultoa_invert>
    229a:	c8 2e       	mov	r12, r24
    229c:	c8 18       	sub	r12, r8
    229e:	0f 77       	andi	r16, 0x7F	; 127
    22a0:	06 ff       	sbrs	r16, 6
    22a2:	0b c0       	rjmp	.+22     	; 0x22ba <vfprintf+0x5f0>
    22a4:	20 2f       	mov	r18, r16
    22a6:	2e 7f       	andi	r18, 0xFE	; 254
    22a8:	c1 16       	cp	r12, r17
    22aa:	50 f4       	brcc	.+20     	; 0x22c0 <vfprintf+0x5f6>
    22ac:	04 ff       	sbrs	r16, 4
    22ae:	0a c0       	rjmp	.+20     	; 0x22c4 <vfprintf+0x5fa>
    22b0:	02 fd       	sbrc	r16, 2
    22b2:	08 c0       	rjmp	.+16     	; 0x22c4 <vfprintf+0x5fa>
    22b4:	20 2f       	mov	r18, r16
    22b6:	2e 7e       	andi	r18, 0xEE	; 238
    22b8:	05 c0       	rjmp	.+10     	; 0x22c4 <vfprintf+0x5fa>
    22ba:	dc 2c       	mov	r13, r12
    22bc:	20 2f       	mov	r18, r16
    22be:	03 c0       	rjmp	.+6      	; 0x22c6 <vfprintf+0x5fc>
    22c0:	dc 2c       	mov	r13, r12
    22c2:	01 c0       	rjmp	.+2      	; 0x22c6 <vfprintf+0x5fc>
    22c4:	d1 2e       	mov	r13, r17
    22c6:	24 ff       	sbrs	r18, 4
    22c8:	0d c0       	rjmp	.+26     	; 0x22e4 <vfprintf+0x61a>
    22ca:	fe 01       	movw	r30, r28
    22cc:	ec 0d       	add	r30, r12
    22ce:	f1 1d       	adc	r31, r1
    22d0:	80 81       	ld	r24, Z
    22d2:	80 33       	cpi	r24, 0x30	; 48
    22d4:	11 f4       	brne	.+4      	; 0x22da <vfprintf+0x610>
    22d6:	29 7e       	andi	r18, 0xE9	; 233
    22d8:	09 c0       	rjmp	.+18     	; 0x22ec <vfprintf+0x622>
    22da:	22 ff       	sbrs	r18, 2
    22dc:	06 c0       	rjmp	.+12     	; 0x22ea <vfprintf+0x620>
    22de:	d3 94       	inc	r13
    22e0:	d3 94       	inc	r13
    22e2:	04 c0       	rjmp	.+8      	; 0x22ec <vfprintf+0x622>
    22e4:	82 2f       	mov	r24, r18
    22e6:	86 78       	andi	r24, 0x86	; 134
    22e8:	09 f0       	breq	.+2      	; 0x22ec <vfprintf+0x622>
    22ea:	d3 94       	inc	r13
    22ec:	23 fd       	sbrc	r18, 3
    22ee:	12 c0       	rjmp	.+36     	; 0x2314 <vfprintf+0x64a>
    22f0:	20 ff       	sbrs	r18, 0
    22f2:	06 c0       	rjmp	.+12     	; 0x2300 <vfprintf+0x636>
    22f4:	1c 2d       	mov	r17, r12
    22f6:	d5 14       	cp	r13, r5
    22f8:	18 f4       	brcc	.+6      	; 0x2300 <vfprintf+0x636>
    22fa:	15 0d       	add	r17, r5
    22fc:	1d 19       	sub	r17, r13
    22fe:	d5 2c       	mov	r13, r5
    2300:	d5 14       	cp	r13, r5
    2302:	60 f4       	brcc	.+24     	; 0x231c <vfprintf+0x652>
    2304:	b7 01       	movw	r22, r14
    2306:	80 e2       	ldi	r24, 0x20	; 32
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	2b 8b       	std	Y+19, r18	; 0x13
    230c:	75 d1       	rcall	.+746    	; 0x25f8 <fputc>
    230e:	d3 94       	inc	r13
    2310:	2b 89       	ldd	r18, Y+19	; 0x13
    2312:	f6 cf       	rjmp	.-20     	; 0x2300 <vfprintf+0x636>
    2314:	d5 14       	cp	r13, r5
    2316:	10 f4       	brcc	.+4      	; 0x231c <vfprintf+0x652>
    2318:	5d 18       	sub	r5, r13
    231a:	01 c0       	rjmp	.+2      	; 0x231e <vfprintf+0x654>
    231c:	51 2c       	mov	r5, r1
    231e:	24 ff       	sbrs	r18, 4
    2320:	11 c0       	rjmp	.+34     	; 0x2344 <vfprintf+0x67a>
    2322:	b7 01       	movw	r22, r14
    2324:	80 e3       	ldi	r24, 0x30	; 48
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	2b 8b       	std	Y+19, r18	; 0x13
    232a:	66 d1       	rcall	.+716    	; 0x25f8 <fputc>
    232c:	2b 89       	ldd	r18, Y+19	; 0x13
    232e:	22 ff       	sbrs	r18, 2
    2330:	16 c0       	rjmp	.+44     	; 0x235e <vfprintf+0x694>
    2332:	21 ff       	sbrs	r18, 1
    2334:	03 c0       	rjmp	.+6      	; 0x233c <vfprintf+0x672>
    2336:	88 e5       	ldi	r24, 0x58	; 88
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	02 c0       	rjmp	.+4      	; 0x2340 <vfprintf+0x676>
    233c:	88 e7       	ldi	r24, 0x78	; 120
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	b7 01       	movw	r22, r14
    2342:	0c c0       	rjmp	.+24     	; 0x235c <vfprintf+0x692>
    2344:	82 2f       	mov	r24, r18
    2346:	86 78       	andi	r24, 0x86	; 134
    2348:	51 f0       	breq	.+20     	; 0x235e <vfprintf+0x694>
    234a:	21 fd       	sbrc	r18, 1
    234c:	02 c0       	rjmp	.+4      	; 0x2352 <vfprintf+0x688>
    234e:	80 e2       	ldi	r24, 0x20	; 32
    2350:	01 c0       	rjmp	.+2      	; 0x2354 <vfprintf+0x68a>
    2352:	8b e2       	ldi	r24, 0x2B	; 43
    2354:	27 fd       	sbrc	r18, 7
    2356:	8d e2       	ldi	r24, 0x2D	; 45
    2358:	b7 01       	movw	r22, r14
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	4d d1       	rcall	.+666    	; 0x25f8 <fputc>
    235e:	c1 16       	cp	r12, r17
    2360:	30 f4       	brcc	.+12     	; 0x236e <vfprintf+0x6a4>
    2362:	b7 01       	movw	r22, r14
    2364:	80 e3       	ldi	r24, 0x30	; 48
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	47 d1       	rcall	.+654    	; 0x25f8 <fputc>
    236a:	11 50       	subi	r17, 0x01	; 1
    236c:	f8 cf       	rjmp	.-16     	; 0x235e <vfprintf+0x694>
    236e:	ca 94       	dec	r12
    2370:	f4 01       	movw	r30, r8
    2372:	ec 0d       	add	r30, r12
    2374:	f1 1d       	adc	r31, r1
    2376:	80 81       	ld	r24, Z
    2378:	b7 01       	movw	r22, r14
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	3d d1       	rcall	.+634    	; 0x25f8 <fputc>
    237e:	c1 10       	cpse	r12, r1
    2380:	f6 cf       	rjmp	.-20     	; 0x236e <vfprintf+0x6a4>
    2382:	55 20       	and	r5, r5
    2384:	09 f4       	brne	.+2      	; 0x2388 <vfprintf+0x6be>
    2386:	dd cc       	rjmp	.-1606   	; 0x1d42 <vfprintf+0x78>
    2388:	b7 01       	movw	r22, r14
    238a:	80 e2       	ldi	r24, 0x20	; 32
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	34 d1       	rcall	.+616    	; 0x25f8 <fputc>
    2390:	5a 94       	dec	r5
    2392:	f7 cf       	rjmp	.-18     	; 0x2382 <vfprintf+0x6b8>
    2394:	f7 01       	movw	r30, r14
    2396:	86 81       	ldd	r24, Z+6	; 0x06
    2398:	97 81       	ldd	r25, Z+7	; 0x07
    239a:	02 c0       	rjmp	.+4      	; 0x23a0 <vfprintf+0x6d6>
    239c:	8f ef       	ldi	r24, 0xFF	; 255
    239e:	9f ef       	ldi	r25, 0xFF	; 255
    23a0:	63 96       	adiw	r28, 0x13	; 19
    23a2:	cd bf       	out	0x3d, r28	; 61
    23a4:	de bf       	out	0x3e, r29	; 62
    23a6:	df 91       	pop	r29
    23a8:	cf 91       	pop	r28
    23aa:	1f 91       	pop	r17
    23ac:	0f 91       	pop	r16
    23ae:	ff 90       	pop	r15
    23b0:	ef 90       	pop	r14
    23b2:	df 90       	pop	r13
    23b4:	cf 90       	pop	r12
    23b6:	bf 90       	pop	r11
    23b8:	af 90       	pop	r10
    23ba:	9f 90       	pop	r9
    23bc:	8f 90       	pop	r8
    23be:	7f 90       	pop	r7
    23c0:	6f 90       	pop	r6
    23c2:	5f 90       	pop	r5
    23c4:	4f 90       	pop	r4
    23c6:	3f 90       	pop	r3
    23c8:	2f 90       	pop	r2
    23ca:	08 95       	ret

000023cc <__udivmodsi4>:
    23cc:	a1 e2       	ldi	r26, 0x21	; 33
    23ce:	1a 2e       	mov	r1, r26
    23d0:	aa 1b       	sub	r26, r26
    23d2:	bb 1b       	sub	r27, r27
    23d4:	fd 01       	movw	r30, r26
    23d6:	0d c0       	rjmp	.+26     	; 0x23f2 <__udivmodsi4_ep>

000023d8 <__udivmodsi4_loop>:
    23d8:	aa 1f       	adc	r26, r26
    23da:	bb 1f       	adc	r27, r27
    23dc:	ee 1f       	adc	r30, r30
    23de:	ff 1f       	adc	r31, r31
    23e0:	a2 17       	cp	r26, r18
    23e2:	b3 07       	cpc	r27, r19
    23e4:	e4 07       	cpc	r30, r20
    23e6:	f5 07       	cpc	r31, r21
    23e8:	20 f0       	brcs	.+8      	; 0x23f2 <__udivmodsi4_ep>
    23ea:	a2 1b       	sub	r26, r18
    23ec:	b3 0b       	sbc	r27, r19
    23ee:	e4 0b       	sbc	r30, r20
    23f0:	f5 0b       	sbc	r31, r21

000023f2 <__udivmodsi4_ep>:
    23f2:	66 1f       	adc	r22, r22
    23f4:	77 1f       	adc	r23, r23
    23f6:	88 1f       	adc	r24, r24
    23f8:	99 1f       	adc	r25, r25
    23fa:	1a 94       	dec	r1
    23fc:	69 f7       	brne	.-38     	; 0x23d8 <__udivmodsi4_loop>
    23fe:	60 95       	com	r22
    2400:	70 95       	com	r23
    2402:	80 95       	com	r24
    2404:	90 95       	com	r25
    2406:	9b 01       	movw	r18, r22
    2408:	ac 01       	movw	r20, r24
    240a:	bd 01       	movw	r22, r26
    240c:	cf 01       	movw	r24, r30
    240e:	08 95       	ret

00002410 <__tablejump2__>:
    2410:	ee 0f       	add	r30, r30
    2412:	ff 1f       	adc	r31, r31

00002414 <__tablejump__>:
    2414:	05 90       	lpm	r0, Z+
    2416:	f4 91       	lpm	r31, Z
    2418:	e0 2d       	mov	r30, r0
    241a:	19 94       	eijmp

0000241c <__ftoa_engine>:
    241c:	28 30       	cpi	r18, 0x08	; 8
    241e:	08 f0       	brcs	.+2      	; 0x2422 <__ftoa_engine+0x6>
    2420:	27 e0       	ldi	r18, 0x07	; 7
    2422:	33 27       	eor	r19, r19
    2424:	da 01       	movw	r26, r20
    2426:	99 0f       	add	r25, r25
    2428:	31 1d       	adc	r19, r1
    242a:	87 fd       	sbrc	r24, 7
    242c:	91 60       	ori	r25, 0x01	; 1
    242e:	00 96       	adiw	r24, 0x00	; 0
    2430:	61 05       	cpc	r22, r1
    2432:	71 05       	cpc	r23, r1
    2434:	39 f4       	brne	.+14     	; 0x2444 <__ftoa_engine+0x28>
    2436:	32 60       	ori	r19, 0x02	; 2
    2438:	2e 5f       	subi	r18, 0xFE	; 254
    243a:	3d 93       	st	X+, r19
    243c:	30 e3       	ldi	r19, 0x30	; 48
    243e:	2a 95       	dec	r18
    2440:	e1 f7       	brne	.-8      	; 0x243a <__ftoa_engine+0x1e>
    2442:	08 95       	ret
    2444:	9f 3f       	cpi	r25, 0xFF	; 255
    2446:	30 f0       	brcs	.+12     	; 0x2454 <__ftoa_engine+0x38>
    2448:	80 38       	cpi	r24, 0x80	; 128
    244a:	71 05       	cpc	r23, r1
    244c:	61 05       	cpc	r22, r1
    244e:	09 f0       	breq	.+2      	; 0x2452 <__ftoa_engine+0x36>
    2450:	3c 5f       	subi	r19, 0xFC	; 252
    2452:	3c 5f       	subi	r19, 0xFC	; 252
    2454:	3d 93       	st	X+, r19
    2456:	91 30       	cpi	r25, 0x01	; 1
    2458:	08 f0       	brcs	.+2      	; 0x245c <__ftoa_engine+0x40>
    245a:	80 68       	ori	r24, 0x80	; 128
    245c:	91 1d       	adc	r25, r1
    245e:	df 93       	push	r29
    2460:	cf 93       	push	r28
    2462:	1f 93       	push	r17
    2464:	0f 93       	push	r16
    2466:	ff 92       	push	r15
    2468:	ef 92       	push	r14
    246a:	19 2f       	mov	r17, r25
    246c:	98 7f       	andi	r25, 0xF8	; 248
    246e:	96 95       	lsr	r25
    2470:	e9 2f       	mov	r30, r25
    2472:	96 95       	lsr	r25
    2474:	96 95       	lsr	r25
    2476:	e9 0f       	add	r30, r25
    2478:	ff 27       	eor	r31, r31
    247a:	e4 59       	subi	r30, 0x94	; 148
    247c:	fd 4f       	sbci	r31, 0xFD	; 253
    247e:	99 27       	eor	r25, r25
    2480:	33 27       	eor	r19, r19
    2482:	ee 24       	eor	r14, r14
    2484:	ff 24       	eor	r15, r15
    2486:	a7 01       	movw	r20, r14
    2488:	e7 01       	movw	r28, r14
    248a:	05 90       	lpm	r0, Z+
    248c:	08 94       	sec
    248e:	07 94       	ror	r0
    2490:	28 f4       	brcc	.+10     	; 0x249c <__ftoa_engine+0x80>
    2492:	36 0f       	add	r19, r22
    2494:	e7 1e       	adc	r14, r23
    2496:	f8 1e       	adc	r15, r24
    2498:	49 1f       	adc	r20, r25
    249a:	51 1d       	adc	r21, r1
    249c:	66 0f       	add	r22, r22
    249e:	77 1f       	adc	r23, r23
    24a0:	88 1f       	adc	r24, r24
    24a2:	99 1f       	adc	r25, r25
    24a4:	06 94       	lsr	r0
    24a6:	a1 f7       	brne	.-24     	; 0x2490 <__ftoa_engine+0x74>
    24a8:	05 90       	lpm	r0, Z+
    24aa:	07 94       	ror	r0
    24ac:	28 f4       	brcc	.+10     	; 0x24b8 <__ftoa_engine+0x9c>
    24ae:	e7 0e       	add	r14, r23
    24b0:	f8 1e       	adc	r15, r24
    24b2:	49 1f       	adc	r20, r25
    24b4:	56 1f       	adc	r21, r22
    24b6:	c1 1d       	adc	r28, r1
    24b8:	77 0f       	add	r23, r23
    24ba:	88 1f       	adc	r24, r24
    24bc:	99 1f       	adc	r25, r25
    24be:	66 1f       	adc	r22, r22
    24c0:	06 94       	lsr	r0
    24c2:	a1 f7       	brne	.-24     	; 0x24ac <__ftoa_engine+0x90>
    24c4:	05 90       	lpm	r0, Z+
    24c6:	07 94       	ror	r0
    24c8:	28 f4       	brcc	.+10     	; 0x24d4 <__ftoa_engine+0xb8>
    24ca:	f8 0e       	add	r15, r24
    24cc:	49 1f       	adc	r20, r25
    24ce:	56 1f       	adc	r21, r22
    24d0:	c7 1f       	adc	r28, r23
    24d2:	d1 1d       	adc	r29, r1
    24d4:	88 0f       	add	r24, r24
    24d6:	99 1f       	adc	r25, r25
    24d8:	66 1f       	adc	r22, r22
    24da:	77 1f       	adc	r23, r23
    24dc:	06 94       	lsr	r0
    24de:	a1 f7       	brne	.-24     	; 0x24c8 <__ftoa_engine+0xac>
    24e0:	05 90       	lpm	r0, Z+
    24e2:	07 94       	ror	r0
    24e4:	20 f4       	brcc	.+8      	; 0x24ee <__ftoa_engine+0xd2>
    24e6:	49 0f       	add	r20, r25
    24e8:	56 1f       	adc	r21, r22
    24ea:	c7 1f       	adc	r28, r23
    24ec:	d8 1f       	adc	r29, r24
    24ee:	99 0f       	add	r25, r25
    24f0:	66 1f       	adc	r22, r22
    24f2:	77 1f       	adc	r23, r23
    24f4:	88 1f       	adc	r24, r24
    24f6:	06 94       	lsr	r0
    24f8:	a9 f7       	brne	.-22     	; 0x24e4 <__ftoa_engine+0xc8>
    24fa:	84 91       	lpm	r24, Z
    24fc:	10 95       	com	r17
    24fe:	17 70       	andi	r17, 0x07	; 7
    2500:	41 f0       	breq	.+16     	; 0x2512 <__ftoa_engine+0xf6>
    2502:	d6 95       	lsr	r29
    2504:	c7 95       	ror	r28
    2506:	57 95       	ror	r21
    2508:	47 95       	ror	r20
    250a:	f7 94       	ror	r15
    250c:	e7 94       	ror	r14
    250e:	1a 95       	dec	r17
    2510:	c1 f7       	brne	.-16     	; 0x2502 <__ftoa_engine+0xe6>
    2512:	e2 e1       	ldi	r30, 0x12	; 18
    2514:	f2 e0       	ldi	r31, 0x02	; 2
    2516:	68 94       	set
    2518:	15 90       	lpm	r1, Z+
    251a:	15 91       	lpm	r17, Z+
    251c:	35 91       	lpm	r19, Z+
    251e:	65 91       	lpm	r22, Z+
    2520:	95 91       	lpm	r25, Z+
    2522:	05 90       	lpm	r0, Z+
    2524:	7f e2       	ldi	r23, 0x2F	; 47
    2526:	73 95       	inc	r23
    2528:	e1 18       	sub	r14, r1
    252a:	f1 0a       	sbc	r15, r17
    252c:	43 0b       	sbc	r20, r19
    252e:	56 0b       	sbc	r21, r22
    2530:	c9 0b       	sbc	r28, r25
    2532:	d0 09       	sbc	r29, r0
    2534:	c0 f7       	brcc	.-16     	; 0x2526 <__ftoa_engine+0x10a>
    2536:	e1 0c       	add	r14, r1
    2538:	f1 1e       	adc	r15, r17
    253a:	43 1f       	adc	r20, r19
    253c:	56 1f       	adc	r21, r22
    253e:	c9 1f       	adc	r28, r25
    2540:	d0 1d       	adc	r29, r0
    2542:	7e f4       	brtc	.+30     	; 0x2562 <__ftoa_engine+0x146>
    2544:	70 33       	cpi	r23, 0x30	; 48
    2546:	11 f4       	brne	.+4      	; 0x254c <__ftoa_engine+0x130>
    2548:	8a 95       	dec	r24
    254a:	e6 cf       	rjmp	.-52     	; 0x2518 <__ftoa_engine+0xfc>
    254c:	e8 94       	clt
    254e:	01 50       	subi	r16, 0x01	; 1
    2550:	30 f0       	brcs	.+12     	; 0x255e <__ftoa_engine+0x142>
    2552:	08 0f       	add	r16, r24
    2554:	0a f4       	brpl	.+2      	; 0x2558 <__ftoa_engine+0x13c>
    2556:	00 27       	eor	r16, r16
    2558:	02 17       	cp	r16, r18
    255a:	08 f4       	brcc	.+2      	; 0x255e <__ftoa_engine+0x142>
    255c:	20 2f       	mov	r18, r16
    255e:	23 95       	inc	r18
    2560:	02 2f       	mov	r16, r18
    2562:	7a 33       	cpi	r23, 0x3A	; 58
    2564:	28 f0       	brcs	.+10     	; 0x2570 <__ftoa_engine+0x154>
    2566:	79 e3       	ldi	r23, 0x39	; 57
    2568:	7d 93       	st	X+, r23
    256a:	2a 95       	dec	r18
    256c:	e9 f7       	brne	.-6      	; 0x2568 <__ftoa_engine+0x14c>
    256e:	10 c0       	rjmp	.+32     	; 0x2590 <__ftoa_engine+0x174>
    2570:	7d 93       	st	X+, r23
    2572:	2a 95       	dec	r18
    2574:	89 f6       	brne	.-94     	; 0x2518 <__ftoa_engine+0xfc>
    2576:	06 94       	lsr	r0
    2578:	97 95       	ror	r25
    257a:	67 95       	ror	r22
    257c:	37 95       	ror	r19
    257e:	17 95       	ror	r17
    2580:	17 94       	ror	r1
    2582:	e1 18       	sub	r14, r1
    2584:	f1 0a       	sbc	r15, r17
    2586:	43 0b       	sbc	r20, r19
    2588:	56 0b       	sbc	r21, r22
    258a:	c9 0b       	sbc	r28, r25
    258c:	d0 09       	sbc	r29, r0
    258e:	98 f0       	brcs	.+38     	; 0x25b6 <__ftoa_engine+0x19a>
    2590:	23 95       	inc	r18
    2592:	7e 91       	ld	r23, -X
    2594:	73 95       	inc	r23
    2596:	7a 33       	cpi	r23, 0x3A	; 58
    2598:	08 f0       	brcs	.+2      	; 0x259c <__ftoa_engine+0x180>
    259a:	70 e3       	ldi	r23, 0x30	; 48
    259c:	7c 93       	st	X, r23
    259e:	20 13       	cpse	r18, r16
    25a0:	b8 f7       	brcc	.-18     	; 0x2590 <__ftoa_engine+0x174>
    25a2:	7e 91       	ld	r23, -X
    25a4:	70 61       	ori	r23, 0x10	; 16
    25a6:	7d 93       	st	X+, r23
    25a8:	30 f0       	brcs	.+12     	; 0x25b6 <__ftoa_engine+0x19a>
    25aa:	83 95       	inc	r24
    25ac:	71 e3       	ldi	r23, 0x31	; 49
    25ae:	7d 93       	st	X+, r23
    25b0:	70 e3       	ldi	r23, 0x30	; 48
    25b2:	2a 95       	dec	r18
    25b4:	e1 f7       	brne	.-8      	; 0x25ae <__ftoa_engine+0x192>
    25b6:	11 24       	eor	r1, r1
    25b8:	ef 90       	pop	r14
    25ba:	ff 90       	pop	r15
    25bc:	0f 91       	pop	r16
    25be:	1f 91       	pop	r17
    25c0:	cf 91       	pop	r28
    25c2:	df 91       	pop	r29
    25c4:	99 27       	eor	r25, r25
    25c6:	87 fd       	sbrc	r24, 7
    25c8:	90 95       	com	r25
    25ca:	08 95       	ret

000025cc <strnlen_P>:
    25cc:	fc 01       	movw	r30, r24
    25ce:	05 90       	lpm	r0, Z+
    25d0:	61 50       	subi	r22, 0x01	; 1
    25d2:	70 40       	sbci	r23, 0x00	; 0
    25d4:	01 10       	cpse	r0, r1
    25d6:	d8 f7       	brcc	.-10     	; 0x25ce <strnlen_P+0x2>
    25d8:	80 95       	com	r24
    25da:	90 95       	com	r25
    25dc:	8e 0f       	add	r24, r30
    25de:	9f 1f       	adc	r25, r31
    25e0:	08 95       	ret

000025e2 <strnlen>:
    25e2:	fc 01       	movw	r30, r24
    25e4:	61 50       	subi	r22, 0x01	; 1
    25e6:	70 40       	sbci	r23, 0x00	; 0
    25e8:	01 90       	ld	r0, Z+
    25ea:	01 10       	cpse	r0, r1
    25ec:	d8 f7       	brcc	.-10     	; 0x25e4 <strnlen+0x2>
    25ee:	80 95       	com	r24
    25f0:	90 95       	com	r25
    25f2:	8e 0f       	add	r24, r30
    25f4:	9f 1f       	adc	r25, r31
    25f6:	08 95       	ret

000025f8 <fputc>:
    25f8:	0f 93       	push	r16
    25fa:	1f 93       	push	r17
    25fc:	cf 93       	push	r28
    25fe:	df 93       	push	r29
    2600:	18 2f       	mov	r17, r24
    2602:	09 2f       	mov	r16, r25
    2604:	eb 01       	movw	r28, r22
    2606:	8b 81       	ldd	r24, Y+3	; 0x03
    2608:	81 fd       	sbrc	r24, 1
    260a:	03 c0       	rjmp	.+6      	; 0x2612 <fputc+0x1a>
    260c:	8f ef       	ldi	r24, 0xFF	; 255
    260e:	9f ef       	ldi	r25, 0xFF	; 255
    2610:	20 c0       	rjmp	.+64     	; 0x2652 <fputc+0x5a>
    2612:	82 ff       	sbrs	r24, 2
    2614:	10 c0       	rjmp	.+32     	; 0x2636 <fputc+0x3e>
    2616:	4e 81       	ldd	r20, Y+6	; 0x06
    2618:	5f 81       	ldd	r21, Y+7	; 0x07
    261a:	2c 81       	ldd	r18, Y+4	; 0x04
    261c:	3d 81       	ldd	r19, Y+5	; 0x05
    261e:	42 17       	cp	r20, r18
    2620:	53 07       	cpc	r21, r19
    2622:	7c f4       	brge	.+30     	; 0x2642 <fputc+0x4a>
    2624:	e8 81       	ld	r30, Y
    2626:	f9 81       	ldd	r31, Y+1	; 0x01
    2628:	9f 01       	movw	r18, r30
    262a:	2f 5f       	subi	r18, 0xFF	; 255
    262c:	3f 4f       	sbci	r19, 0xFF	; 255
    262e:	28 83       	st	Y, r18
    2630:	39 83       	std	Y+1, r19	; 0x01
    2632:	10 83       	st	Z, r17
    2634:	06 c0       	rjmp	.+12     	; 0x2642 <fputc+0x4a>
    2636:	e8 85       	ldd	r30, Y+8	; 0x08
    2638:	f9 85       	ldd	r31, Y+9	; 0x09
    263a:	81 2f       	mov	r24, r17
    263c:	19 95       	eicall
    263e:	89 2b       	or	r24, r25
    2640:	29 f7       	brne	.-54     	; 0x260c <fputc+0x14>
    2642:	2e 81       	ldd	r18, Y+6	; 0x06
    2644:	3f 81       	ldd	r19, Y+7	; 0x07
    2646:	2f 5f       	subi	r18, 0xFF	; 255
    2648:	3f 4f       	sbci	r19, 0xFF	; 255
    264a:	2e 83       	std	Y+6, r18	; 0x06
    264c:	3f 83       	std	Y+7, r19	; 0x07
    264e:	81 2f       	mov	r24, r17
    2650:	90 2f       	mov	r25, r16
    2652:	df 91       	pop	r29
    2654:	cf 91       	pop	r28
    2656:	1f 91       	pop	r17
    2658:	0f 91       	pop	r16
    265a:	08 95       	ret

0000265c <__ultoa_invert>:
    265c:	fa 01       	movw	r30, r20
    265e:	aa 27       	eor	r26, r26
    2660:	28 30       	cpi	r18, 0x08	; 8
    2662:	51 f1       	breq	.+84     	; 0x26b8 <__ultoa_invert+0x5c>
    2664:	20 31       	cpi	r18, 0x10	; 16
    2666:	81 f1       	breq	.+96     	; 0x26c8 <__ultoa_invert+0x6c>
    2668:	e8 94       	clt
    266a:	6f 93       	push	r22
    266c:	6e 7f       	andi	r22, 0xFE	; 254
    266e:	6e 5f       	subi	r22, 0xFE	; 254
    2670:	7f 4f       	sbci	r23, 0xFF	; 255
    2672:	8f 4f       	sbci	r24, 0xFF	; 255
    2674:	9f 4f       	sbci	r25, 0xFF	; 255
    2676:	af 4f       	sbci	r26, 0xFF	; 255
    2678:	b1 e0       	ldi	r27, 0x01	; 1
    267a:	3e d0       	rcall	.+124    	; 0x26f8 <__ultoa_invert+0x9c>
    267c:	b4 e0       	ldi	r27, 0x04	; 4
    267e:	3c d0       	rcall	.+120    	; 0x26f8 <__ultoa_invert+0x9c>
    2680:	67 0f       	add	r22, r23
    2682:	78 1f       	adc	r23, r24
    2684:	89 1f       	adc	r24, r25
    2686:	9a 1f       	adc	r25, r26
    2688:	a1 1d       	adc	r26, r1
    268a:	68 0f       	add	r22, r24
    268c:	79 1f       	adc	r23, r25
    268e:	8a 1f       	adc	r24, r26
    2690:	91 1d       	adc	r25, r1
    2692:	a1 1d       	adc	r26, r1
    2694:	6a 0f       	add	r22, r26
    2696:	71 1d       	adc	r23, r1
    2698:	81 1d       	adc	r24, r1
    269a:	91 1d       	adc	r25, r1
    269c:	a1 1d       	adc	r26, r1
    269e:	20 d0       	rcall	.+64     	; 0x26e0 <__ultoa_invert+0x84>
    26a0:	09 f4       	brne	.+2      	; 0x26a4 <__ultoa_invert+0x48>
    26a2:	68 94       	set
    26a4:	3f 91       	pop	r19
    26a6:	2a e0       	ldi	r18, 0x0A	; 10
    26a8:	26 9f       	mul	r18, r22
    26aa:	11 24       	eor	r1, r1
    26ac:	30 19       	sub	r19, r0
    26ae:	30 5d       	subi	r19, 0xD0	; 208
    26b0:	31 93       	st	Z+, r19
    26b2:	de f6       	brtc	.-74     	; 0x266a <__ultoa_invert+0xe>
    26b4:	cf 01       	movw	r24, r30
    26b6:	08 95       	ret
    26b8:	46 2f       	mov	r20, r22
    26ba:	47 70       	andi	r20, 0x07	; 7
    26bc:	40 5d       	subi	r20, 0xD0	; 208
    26be:	41 93       	st	Z+, r20
    26c0:	b3 e0       	ldi	r27, 0x03	; 3
    26c2:	0f d0       	rcall	.+30     	; 0x26e2 <__ultoa_invert+0x86>
    26c4:	c9 f7       	brne	.-14     	; 0x26b8 <__ultoa_invert+0x5c>
    26c6:	f6 cf       	rjmp	.-20     	; 0x26b4 <__ultoa_invert+0x58>
    26c8:	46 2f       	mov	r20, r22
    26ca:	4f 70       	andi	r20, 0x0F	; 15
    26cc:	40 5d       	subi	r20, 0xD0	; 208
    26ce:	4a 33       	cpi	r20, 0x3A	; 58
    26d0:	18 f0       	brcs	.+6      	; 0x26d8 <__ultoa_invert+0x7c>
    26d2:	49 5d       	subi	r20, 0xD9	; 217
    26d4:	31 fd       	sbrc	r19, 1
    26d6:	40 52       	subi	r20, 0x20	; 32
    26d8:	41 93       	st	Z+, r20
    26da:	02 d0       	rcall	.+4      	; 0x26e0 <__ultoa_invert+0x84>
    26dc:	a9 f7       	brne	.-22     	; 0x26c8 <__ultoa_invert+0x6c>
    26de:	ea cf       	rjmp	.-44     	; 0x26b4 <__ultoa_invert+0x58>
    26e0:	b4 e0       	ldi	r27, 0x04	; 4
    26e2:	a6 95       	lsr	r26
    26e4:	97 95       	ror	r25
    26e6:	87 95       	ror	r24
    26e8:	77 95       	ror	r23
    26ea:	67 95       	ror	r22
    26ec:	ba 95       	dec	r27
    26ee:	c9 f7       	brne	.-14     	; 0x26e2 <__ultoa_invert+0x86>
    26f0:	00 97       	sbiw	r24, 0x00	; 0
    26f2:	61 05       	cpc	r22, r1
    26f4:	71 05       	cpc	r23, r1
    26f6:	08 95       	ret
    26f8:	9b 01       	movw	r18, r22
    26fa:	ac 01       	movw	r20, r24
    26fc:	0a 2e       	mov	r0, r26
    26fe:	06 94       	lsr	r0
    2700:	57 95       	ror	r21
    2702:	47 95       	ror	r20
    2704:	37 95       	ror	r19
    2706:	27 95       	ror	r18
    2708:	ba 95       	dec	r27
    270a:	c9 f7       	brne	.-14     	; 0x26fe <__ultoa_invert+0xa2>
    270c:	62 0f       	add	r22, r18
    270e:	73 1f       	adc	r23, r19
    2710:	84 1f       	adc	r24, r20
    2712:	95 1f       	adc	r25, r21
    2714:	a0 1d       	adc	r26, r0
    2716:	08 95       	ret

00002718 <_exit>:
    2718:	f8 94       	cli

0000271a <__stop_program>:
    271a:	ff cf       	rjmp	.-2      	; 0x271a <__stop_program>
